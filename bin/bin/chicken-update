#!/usr/bin/chicken-csi -s
; -*- mode: scheme -*-
(import (only chicken.pretty-print pp)
        (only chicken.io read-lines)
        (only chicken.process process-execute call-with-input-pipe)
        (only chicken.string string-split)
        (only srfi-1 filter first last lset-difference)
        (only fmt fmt dsp fmt-join tabular)
        (only fmt-color fmt-bold)
        (only ssax ssax:xml->sxml)
        (only sxpath-lolevel sxml:text)
        (only sxpath sxpath)
        (only fmt-unicode fmt-unicode)
        (prefix http-client hc:)
        (prefix uri-common uc:))

;; Delay is doing nothing here.
(define upstream-eggs
  (let ((cached #f))
    (lambda (#!optional refresh)
      (if (or refresh (not cached))
          (let* ((sxml
                  (hc:call-with-input-request
                   (uc:uri-reference "http://eggs.call-cc.org/rss-5.xml")
                   #f
                   (cut ssax:xml->sxml <> '())))
                 (titles ((sxpath
                           `(// channel
                                item
                                ((title
                                  ,(lambda (nodeset var-binding)
                                     (sxml:text nodeset))))))
                          sxml))
                 (versions (map
                            (lambda (s)
                              (let ((parts (string-split s)))
                                (cons (car parts) (cadr parts))))
                            titles)))
            (set! cached versions)
            versions)
          cached))))

(define local-eggs
  (let ((raw-eggs (map string-split
                       (call-with-input-pipe "chicken-status" read-lines))))
    (map (lambda (s) (cons (first s) (last s)))
         raw-eggs)))

(define to-update
  (filter (lambda (x)
            (not (string=? "unknown" (cdr x))))
          (lset-difference equal? local-eggs (upstream-eggs))))

(if (null? to-update)
    (print "Nothing to update.")
    (let* ((eggs (map car to-update))
           (old-versions (map cdr to-update))
           (new-versions (map (lambda (x)
                                (cdr (assoc (car x) (upstream-eggs))))
                              to-update)))
      (fmt #t
           (fmt-unicode
            (tabular (fmt-join dsp (cons (fmt-bold "Egg") eggs) "\n")
                     "  "
                     (fmt-join dsp (cons "Old Version" old-versions) "\n")
                     "  "
                     (fmt-join dsp (cons "New Version" new-versions) "\n"))))
      (display "Proceed? [y/n]: ")
      (when (string=? (read-string 1) "y")
        (process-execute "chicken-install" (cons "-s" eggs)))))
