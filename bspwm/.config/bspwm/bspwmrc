#!/bin/zsh
# Behavior
bspc config focus_follows_pointer  true
bspc config pointer_follows_monitor true
bspc config external_rules_command "$HOME/.config/bspwm/rules.sh"
bspc config window_gap 30

monitors=$(bspc query -M --names)
main=$(echo $monitors | grep -P 'e-?DP1')
first=$(echo $monitors | head -n1)
# Make sure laptop is first. Since BSPWM assigns workspaces in visual order,
# this way I can make sure 1-4 (by index, not name) are actually on the laptop
bspc monitor $main -s $first
bspc monitor $main -d 1 2 3 4
if [ $(echo $monitors | wc -l) -gt 1 ]; then
    i=5;j=6
    for monitor_name in $(echo $monitors | grep -vE 'e-?DP1'); do
        bspc monitor $monitor_name -d $i $j
        i=$((i+2))
        j=$((j+2))
    done
fi

# Window decoration
bspc config border_width 5
bspc config focused_border_color  "#504945"
bspc config normal_border_color   "#3C3836"
bspc config presel_feedback_color "#83A598"


# Rules
bspc rule -r '*'
bspc rule -a Screenkey       manage=off
bspc rule -a Pavucontrol     state=floating
bspc rule -a Blueman-manager state=floating
bspc rule -a Pcmanfm         state=floating
bspc rule -a Zathura         state=tiled
bspc rule -a Civ5XP          state=fullscreen
bspc rule -a guvcview        state=floating
bspc rule -a mpv             state=floating sticky=on rectangle=960x540+1575+275
bspc rule -a 'jetbrains-studio:sun-awt-X11-XWindowPeer' manage=off

# Programs
run() {
    if [ "$1" = "-f" ]; then
        flags="-f"
        shift
    fi
    # Make sure the command exists.
    command -v "$1"  &> /dev/null \
        && { pgrep $flags "$1" || ($@ &) } || not_found+="\n$1"
}

# Bindings
run sxhkd -m -1
run xcape -e 'Control_L=Escape'

# Pointer behavior
run unclutter

# Screen locker
run xss-lock -- physlock

# Automount disks
# run udiskie

# Wallpaper
feh --bg-fill ~/pic/wallpapers/chicken-wall.png
# Random wallpaper
# feh --bg-fill $(find ~/pic/wallpapers -type f ! -path '*originals*' \
#                     | shuf -n1 --random-source=/dev/urandom)

hash picom && picom -b

# Clipboard
# run -f autocutsel -selection CLIPBOARD -fork
# run -f autocutsel -selection PRIMARY -fork

# Multi-monitor polybar setup - new polybar instance for each monitor
killall -q polybar
while pgrep -u $UID -x polybar >/dev/null; do sleep 1; done
for m in $(bspc query -M --names); do
    MONITOR=$m polybar simple &
done
ln -sf /tmp/polybar_mqueue.$! /tmp/ipc-polybar-simple

# I'm not sure why I need a 'sleep' at the beginning here, but otherwise
# polybar levels goes below windows
(sleep 1
 polybar levels &
 ln -sf /tmp/polybar_mqueue.$! /tmp/ipc-polybar-levels \
     && sleep 1 && echo "cmd:hide" >> /tmp/ipc-polybar-levels) &

# Floating st + tmux (see rules.sh)
if [ -z "$(pgrep -f st-float)" ]; then
    if [ -z "$(pgrep tmux)" ]; then
        alacritty --class st-float -e tmux &
    else
        alacritty --class st-float -e tmux attach &
    fi
fi

# Run emacs in background, connect with emacsclient
run emacs --daemon

# pgrep nextcloud || ionice -c 3 nice -n12 nextcloud &

# compton -b
[ -n "$not_found" ] \
    && notify-send "bspwmrc" "Commands not in \$PATH:\n$(echo $not_found | sort -u)"

run /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1

# Useful commands
# xrandr --output eDP1 --pos 2560x0 --auto --output HDMI2 --primary --scale-from 2560x1440 --mode 1920x1080

# xrandr --output eDP1 --pos 1920x0 --auto --output HDMI2 --primary --scale 1x1 --mode 1920x1080

