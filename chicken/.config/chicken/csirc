;; -*- mode: scheme -*-

(cond-expand
  (chicken-5
   (let ()
     (import (only chicken.process-context get-environment-variable)
             (prefix breadline rl:)
             (only breadline-scheme-completion scheme-completer)
             (only chicken.format format)
             compile-file
             chicken-doc
             expand-full)
     (unless (get-environment-variable "INSIDE_EMACS")
       (rl:history-file (format "~a/.csi_history"
                                (get-environment-variable "HOME")))
       (rl:stifle-history! 10000)
       (rl:completer-word-break-characters-set! "\"\'`;|(")
       (rl:completer-set! scheme-completer)
       (rl:basic-quote-characters-set! "\"|")
       (rl:variable-bind! "blink-matching-paren" "on")
       (rl:paren-blink-timeout-set! 200000)
       (current-input-port (rl:make-readline-port))))
   (import chicken.platform beaker.system)
   (define (compile sexp)
     (let ((tempf (chicken.file#create-temporary-file)))
       (call-with-output-file tempf (cut write sexp <>))
       (compile-file#compile-file tempf)
       (void))))
  (else))

