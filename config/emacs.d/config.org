#+TITLE: Emacs Init File! 
#+STARTUP: hideblocks 
* Intro
This is my emacs init file. =init.el= loads the elisp code from here. It's
pretty cool that I can write it in org mode, because easy organization and
rearrangement are pretty sweet. Check out [[https://github.com/aaronbieber/][@aaronbieber]] and [[https://github.com/hrs][@hrs]], a lot of the
inspiration (and erm, code) for this is taken from them.
* Personal Info

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Diego A. Mundo"
        user-mail-address "diegoamundo@gmail.com"
        calendar-location-name "Cambridge, MA")

#+END_SRC

* Package Managing
Setup up cool stuff like use-package, and stuff.

** Misc init

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'load-path
               (expand-file-name "lisp" user-emacs-directory))

  ;; Add directories in "lisp" folder
  (let ((files (directory-files-and-attributes "~/.emacs.d/lisp" t)))
    (dolist (file files)
      (let ((filename (car file))
            (dir (nth 1 file)))
        (when (and dir
                   (not (string-suffix-p "." filename)))
          (add-to-list 'load-path (car file))))))

  (add-to-list 'exec-path "/usr/local/bin")
#+END_SRC

** Init utils

#+BEGIN_SRC emacs-lisp
  ;;; init-utils.el --- Utilities borrowed from Steve Purcell
  ;;; Commentary:
  ;;; Code:
  (if (fboundp 'with-eval-after-load)
      (defalias 'after-load 'with-eval-after-load)
    (defmacro after-load (feature &rest body)
      "After FEATURE is loaded, evaluate BODY."
      (declare (indent defun))
      `(eval-after-load ,feature
         '(progn ,@body))))


  ;;----------------------------------------------------------------------------
  ;; Handier way to add modes to auto-mode-alist
  ;;----------------------------------------------------------------------------
  (defun add-auto-mode (mode &rest patterns)
    "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
    (dolist (pattern patterns)
      (add-to-list 'auto-mode-alist (cons pattern mode))))


  ;;----------------------------------------------------------------------------
  ;; String utilities missing from core emacs
  ;;----------------------------------------------------------------------------
  (defun sanityinc/string-all-matches (regex str &optional group)
    "Find all matches for `REGEX' within `STR', returning the full match string or group `GROUP'."
    (let ((result nil)
          (pos 0)
          (group (or group 0)))
      (while (string-match regex str pos)
        (push (match-string group str) result)
        (setq pos (match-end group)))
      result))

  (defun sanityinc/string-rtrim (str)
    "Remove trailing whitespace from `STR'."
    (replace-regexp-in-string "[ \t\n]+$" "" str))


  ;;----------------------------------------------------------------------------
  ;; Find the directory containing a given library
  ;;----------------------------------------------------------------------------
  (autoload 'find-library-name "find-func")
  (defun sanityinc/directory-of-library (library-name)
    "Return the directory in which the `LIBRARY-NAME' load file is found."
    (file-name-as-directory (file-name-directory (find-library-name library-name))))


  ;;----------------------------------------------------------------------------
  ;; Delete the current file
  ;;----------------------------------------------------------------------------
  (defun delete-this-file ()
    "Delete the current file, and kill the buffer."
    (interactive)
    (or (buffer-file-name) (error "No file is currently being edited"))
    (when (yes-or-no-p (format "Really delete '%s'?"
                               (file-name-nondirectory buffer-file-name)))
      (delete-file (buffer-file-name))
      (kill-this-buffer)))


  ;;----------------------------------------------------------------------------
  ;; Rename the current file
  ;;----------------------------------------------------------------------------
  (defun rename-this-file-and-buffer (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive "sNew name: ")
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (unless filename
        (error "Buffer '%s' is not visiting a file!" name))
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
        (progn
          (when (file-exists-p filename)
           (rename-file filename new-name 1))
          (rename-buffer new-name)
          (set-visited-file-name new-name)))))

  ;;----------------------------------------------------------------------------
  ;; Browse current HTML file
  ;;----------------------------------------------------------------------------
  (defun browse-current-file ()
    "Open the current file as a URL using `browse-url'."
    (interactive)
    (let ((file-name (buffer-file-name)))
      (if (tramp-tramp-file-p file-name)
          (error "Cannot open tramp file")
        (browse-url (concat "file://" file-name)))))


  ;;; init-utils.el ends here

#+END_SRC

** Package setup

#+BEGIN_SRC emacs-lisp
  ;;; Find and load the correct package.el

  ;; When switching between Emacs 23 and 24, we always use the bundled package.el in Emacs 24
  (let ((package-el-site-lisp-dir
         (expand-file-name "site-lisp/package" user-emacs-directory)))
    (when (and (file-directory-p package-el-site-lisp-dir)
               (> emacs-major-version 23))
      (message "Removing local package.el from load-path to avoid shadowing bundled version")
      (setq load-path (remove package-el-site-lisp-dir load-path))))

  (require 'package)


  ;;; Standard package repositories
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
  (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
  (add-to-list 'package-archives '("elpy" . "https://jorgenschaefer.github.io/packages/"))

  ;;; Pin some packages to specific repositories.
  (setq package-pinned-packages '((gtags . "marmalade")))

  ;; If gpg cannot be found, signature checking will fail, so we
  ;; conditionally enable it according to whether gpg is available. We
  ;; re-run this check once $PATH has been configured
  (defun sanityinc/package-maybe-enable-signatures ()
    (setq package-check-signature (when (executable-find "gpg") 'allow-unsigned)))

  (sanityinc/package-maybe-enable-signatures)
  (after-load 'init-exec-path
              (sanityinc/package-maybe-enable-signatures))


  ;;; On-demand installation of packages
  (defun require-package (package &optional min-version no-refresh)
      "Install given PACKAGE, optionally requiring MIN-VERSION.
  If NO-REFRESH is non-nil, the available package lists will not be
  re-downloaded in order to locate PACKAGE."
      (if (package-installed-p package min-version)
          t
        (if (or (assoc package package-archive-contents) no-refresh)
            (package-install package)
          (progn
            (package-refresh-contents)
            (require-package package min-version t)))))

  (defun maybe-require-package (package &optional min-version no-refresh)
      "Try to install PACKAGE, and return non-nil if successful.
  In the event of failure, return nil and print a warning message.
  Optionally require MIN-VERSION.  If NO-REFRESH is non-nil, the
  available package lists will not be re-downloaded in order to
  locate PACKAGE."
      (condition-case err
          (require-package package min-version no-refresh)
        (error
         (message "Couldn't install package `%s': %S" package err)
         nil)))


  ;;; Fire up package.el
  (setq package-enable-at-startup nil)
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
      (require 'use-package))
#+END_SRC

* Global settings and stuff

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t
        inhibit-startup-message t
        inhibit-startup-echo-area-message t)
  (menu-bar-mode 0)
  (tool-bar-mode -1)
  (toggle-scroll-bar -1)
  (show-paren-mode 1)
  (electric-pair-mode)
  (add-hook 'minibuffer-setup-hook (lambda ()
                                     (electric-pair-mode)))
  (setq display-time-load-average nil)
  (setq cursor-type 'bar)
  (fringe-mode 0)
  (add-to-list 'default-frame-alist '(font . "Menlo-10"))
  (setq scroll-conservatively 10000)
  (setq-default tab-width 4)
  (setq tab-stop-list (number-sequence 4 200 4))
  (setq completion-cycle-threshold t)

  ; Store backups in .emacsbackups, autosaves in temp dir
  (defvar backup-dir "~/.emacsbackups/")
  (setq backup-directory-alist (list (cons "." backup-dir)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))

  ;;; Custom Key Bindings ;;;
  ;; (global-set-key (kbd "<f8> <f1>")
  ;;              '(lambda () (interactive) (ansi-term "/usr/local/bin/ipython")))
  ;; (global-set-key (kbd "<f8> <f2>")
  ;;              '(lambda () (interactive) (ansi-term "/Users/diego/.virtualenvs/py2/bin/ipython")))
  ;; (global-set-key (kbd "<f9>") 'linum-mode)
  ;; (global-set-key (kbd "M-RET") 'python-shell-send-buffer)

  ;; Global stuff
  (global-hl-line-mode 1)
  ;; (global-linum-mode 1)
  (setq linum-delay t)
  (global-auto-revert-mode t)
  (setq whitespace-style '(face trailing))
  (setq column-number-mode t)
#+END_SRC 

* Major configs
...thanks, [[https://github.com/aaronbieber/][@aaronbieber]]. Seriously, go check him out. I
like the way he does stuff. This is mostly (entirely?) his code.

** Global functions
#+BEGIN_SRC emacs-lisp
  (defun air--pop-to-file (file &optional split)
    "Visit a FILE, either in the current window or a SPLIT."
    (if split
        (find-file-other-window file)
      (find-file file)))

  (defun occur-last-search ()
     "Run `occur` with the last evil search term."
     (interactive)
     ;; Use the appropriate search term based on regexp setting.
     (let ((term (if evil-regexp-search
                     (car-safe regexp-search-ring)
                   (car-safe search-ring))))
       ;; If a search term exists, execute `occur` on it.
       (if (> (length term) 0)
           (occur term)
         (message "No term to search for."))))

  (defun show-first-occurrence ()
    "Display the location of the word at point's first occurrence in the buffer."
    (interactive)
    (save-excursion
      (let ((search-word (thing-at-point 'symbol t)))
        (goto-char 1)
        (re-search-forward search-word)
        (message (concat
                  "L" (number-to-string (line-number-at-pos)) ": "
                  (replace-regexp-in-string
                   "[ \t\n]*\\'"
                   ""
                   (thing-at-point 'line t)
                   ))))))

  (defun switch-to-previous-buffer ()
      "Switch to previously open buffer.
  Repeated invocations toggle between the two most recently open buffers."
      (interactive)
        (switch-to-buffer (other-buffer (current-buffer) 1)))

  ;;; Helpers for narrowing.
  (defun narrow-and-set-normal ()
    "Narrow to the region and, if in a visual mode, set normal mode."
    (interactive)
    (narrow-to-region (region-beginning) (region-end))
    (if (string= evil-state "visual")
        (progn (evil-normal-state nil)
               (evil-goto-first-line))))

  (defun narrow-to-region-or-subtree ()
    "Narrow to a region, if set, otherwise to an Org subtree, if present."
    (interactive)
    (if (and mark-active
             (not (= (region-beginning) (region-end))))
        (narrow-and-set-normal)
      (if (derived-mode-p 'org-mode)
          (org-narrow-to-subtree))))

  (defun air-narrow-dwim ()
      "Narrow to a thing or widen based on context.
  Attempts to follow the Do What I Mean philosophy."
      (interactive)
      (if (buffer-narrowed-p)
          (widen)
        (narrow-to-region-or-subtree)))


  (defun toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (this-win-2nd (not (and (<= (car this-win-edges)
                                           (car next-win-edges))
                                       (<= (cadr this-win-edges)
                                           (cadr next-win-edges)))))
               (splitter
                (if (= (car this-win-edges)
                       (car (window-edges (next-window))))
                    'split-window-horizontally
                  'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (if this-win-2nd (other-window 1))
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)
            (if this-win-2nd (other-window 1))))))
#+END_SRC
** Evil mode
*** Leader config
#+BEGIN_SRC emacs-lisp
  (defun air--config-evil-leader ()
    "Configure evil leader mode."
    (evil-leader/set-leader ",")
    (setq evil-leader/in-all-states 1)
    (evil-leader/set-key
      ",f"        'helm-projectile-find-file
      ",y"        'yas-insert-snippet
      "."         'switch-to-previous-buffer
      ":"         'eval-expression
      "<right>"   'other-window
      "B"         'magit-blame-toggle
      "D"         'kill-this-buffer
      "aa"        'align-regexp
      "b"         'helm-mini ;; Switch to another buffer
      "c"         'comment-dwim
      "d"         'delete-trailing-whitespace
      "f"         'helm-find
      "g"         'magit-status
      "i"         'helm-imenu-anywhere ;; Jump to function in buffer
      "la"        (lambda () (interactive) (linum-mode) (fci-mode))
      "lc"        'fci-mode
      "lf"        'flycheck-mode      
      "ll"        'linum-mode
      "lw"        'whitespace-mode      ;; Show invisible characters 
      "nn"        'air-narrow-dwim      ;; Narrow to region and enter normal mode
      "o"         'delete-other-windows ;; C-w o
      "s"         'helm-projectile-switch-project
      "t"         'helm-locate           
      "w"         'save-buffer
      "x"         'helm-M-x
      "y"         'helm-show-kill-ring
      ;; "T"      'gtags-find-tag
      ;; "t"      'gtags-reindex
      )

    (defun magit-blame-toggle ()
      "Toggle magit-blame-mode on and off interactively."
      (interactive)
      (if (and (boundp 'magit-blame-mode) magit-blame-mode)
          (magit-blame-quit)
              (call-interactively 'magit-blame))))
#+END_SRC
*** Evil config
#+BEGIN_SRC emacs-lisp
  (defun air--config-evil ()
    "Configure evil mode."

    ;; Use Emacs state in these additional modes.
    (dolist (mode '(ag-mode
                    flycheck-error-list-mode
                    git-rebase-mode
                    octopress-mode
                    octopress-server-mode
                    octopress-process-mode
                    sunshine-mode
                    term-mode))
      (add-to-list 'evil-emacs-state-modes mode))

    (delete 'term-mode evil-insert-state-modes)

    ;; Use insert state in these additional modes.
    (dolist (mode '(magit-log-edit-mode))
      (add-to-list 'evil-insert-state-modes mode))

    (add-to-list 'evil-buffer-regexps '("\\*Flycheck"))

    (evil-add-hjkl-bindings occur-mode-map 'emacs
      (kbd "/")       'evil-search-forward
      (kbd "n")       'evil-search-next
      (kbd "N")       'evil-search-previous
      (kbd "C-d")     'evil-scroll-down
      (kbd "C-u")     'evil-scroll-up
      (kbd "C-w C-w") 'other-window)
 
#+END_SRC
*** Keybindings
#+BEGIN_SRC emacs-lisp
    ;; Global bindings.
    (define-key evil-normal-state-map (kbd "<down>") 'evil-next-visual-line)
    (define-key evil-normal-state-map (kbd "<up>")   'evil-previous-visual-line)
    (define-key evil-normal-state-map (kbd "-")     'helm-find-files)
    (define-key evil-normal-state-map (kbd "g/")    'occur-last-search)
    (define-key evil-normal-state-map (kbd "[i")    'show-first-occurrence)
    (define-key evil-insert-state-map (kbd "C-e")   'end-of-line) ;; I know...
    (define-key evil-normal-state-map (kbd "S-SPC") 'air-pop-to-org-agenda)
#+END_SRC
*** Tiny menu
#+BEGIN_SRC emacs-lisp
    (use-package tiny-menu :ensure t)
    (setq tiny-menu-items
          '(("org-things"   ("Things"
                             ((?t "Tag"     org-tags-view)
                              (?i "ID"      air-org-goto-custom-id)
                              (?k "Keyword" org-search-view))))
            ("org-links"    ("Links"
                             ((?c "Capture"   org-store-link)
                              (?l "Insert"    org-insert-link)
                              (?i "Custom ID" air-org-insert-custom-id-link))))
            ("org-files"    ("Files"
                             ((?t "TODO"  (lambda () (air-pop-to-org-todo nil)))
                              (?n "Notes" (lambda () (air-pop-to-org-notes nil)))
                              (?v "Vault" (lambda () (air-pop-to-org-vault nil))))))
            ("org-captures" ("Captures"
                             ((?c "TODO"  air-org-task-capture)
                              (?n "Note"  (lambda () (interactive) (org-capture nil "n"))))))))
    (evil-define-key 'normal global-map (kbd "\\ \\") 'tiny-menu)
    (evil-define-key 'normal global-map (kbd "\\ f") (tiny-menu-run-item "org-files"))
    (evil-define-key 'normal global-map (kbd "\\ t") (tiny-menu-run-item "org-things"))
    (evil-define-key 'normal global-map (kbd "\\ c") (tiny-menu-run-item "org-captures"))
    (evil-define-key 'normal global-map (kbd "\\ l") (tiny-menu-run-item "org-links"))
#+END_SRC
*** Not entirely sure
#+BEGIN_SRC emacs-lisp
    (defun evil-visual-line--mark-org-element-when-heading (&rest args)
          "When marking a visual line in Org, mark the current element.
  This function is used as a `:before-while' advice on
  `evil-visual-line'; if the current mode is derived from Org Mode and
  point is resting on an Org heading, mark the whole element instead of
  the line. ARGS are passed to `evil-visual-line' when text objects are
  used, but this function ignores them."
          (interactive)
          (if (and (derived-mode-p 'org-mode)
                   (org-on-heading-p))
              (not (org-mark-element))
            t))

      (advice-add 'evil-visual-line :before-while #'evil-visual-line--mark-org-element-when-heading)

    (defun minibuffer-keyboard-quit ()
          "Abort recursive edit.
  In Delete Selection mode, if the mark is active, just deactivate it;
  then it takes a second \\[keyboard-quit] to abort the minibuffer."
          (interactive)
          (if (and delete-selection-mode transient-mark-mode mark-active)
              (setq deactivate-mark  t)
            (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
            (abort-recursive-edit)))

    ;; Make escape quit everything, whenever possible.
    (define-key evil-normal-state-map [escape] 'keyboard-quit)
    (define-key evil-visual-state-map [escape] 'keyboard-quit)
    (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit))
#+END_SRC
*** Final Setup
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-C-u-scroll t)
    :config
    (add-hook 'evil-mode-hook 'air--config-evil)
    (evil-mode 1)

    (use-package evil-leader
      :ensure t
      :config
      (global-evil-leader-mode)
      (air--config-evil-leader))

    (use-package evil-indent-textobject
      :ensure t))
#+END_SRC

** Org mode
*** Helper functions
#+BEGIN_SRC emacs-lisp
  (defun air--org-global-custom-ids ()
    "Find custom ID fields in all org agenda files."
    (let ((files (org-agenda-files))
          file
          air-all-org-custom-ids)
      (while (setq file (pop files))
        (with-current-buffer (org-get-agenda-file-buffer file)
          (save-excursion
            (save-restriction
              (widen)
              (goto-char (point-min))
              (while (re-search-forward "^[ \t]*:CUSTOM_ID:[ \t]+\\(\\S-+\\)[ \t]*$"
                                        nil t)
                (add-to-list 'air-all-org-custom-ids
                             `(,(match-string-no-properties 1)
                               ,(concat file ":" (number-to-string (line-number-at-pos))))))))))
      air-all-org-custom-ids))

  (defun air-org-goto-custom-id ()
    "Go to the location of CUSTOM-ID, or prompt interactively."
    (interactive)
    (let* ((all-custom-ids (air--org-global-custom-ids))
           (custom-id (completing-read
                       "Custom ID: "
                       all-custom-ids)))
      (when custom-id
        (let* ((val (cadr (assoc custom-id all-custom-ids)))
               (id-parts (split-string val ":"))
               (file (car id-parts))
               (line (string-to-int (cadr id-parts))))
          (pop-to-buffer (org-get-agenda-file-buffer file))
          (goto-char (point-min))
          (forward-line line)
          (org-reveal)
          (org-up-element)))))

  (defun air-org-insert-custom-id-link ()
    "Insert an Org link to a custom ID selected interactively."
    (interactive)
    (let* ((all-custom-ids (air--org-global-custom-ids))
           (custom-id (completing-read
                       "Custom ID: "
                       all-custom-ids)))
      (when custom-id
        (let* ((val (cadr (assoc custom-id all-custom-ids)))
               (id-parts (split-string val ":"))
               (file (car id-parts))
               (line (string-to-int (cadr id-parts))))
          (org-insert-link nil (concat file "::#" custom-id) custom-id)))))

  (defun air-org-set-category-property (value)
    "Set the category property of the current item to VALUE."
    (interactive (list (org-read-property-value "CATEGORY")))
    (org-set-property "CATEGORY" value))

  (defun air-org-insert-heading (&optional subheading)
      "Insert a heading or a subheading.
  If the optional SUBHEADING is t, insert a subheading.  Inserting
  headings always respects content."
      (interactive "P")
      (if subheading
          (org-insert-subheading t)
        (org-insert-heading t)))

  (defun air-org-insert-scheduled-heading (&optional subheading)
      "Insert a new org heading scheduled for today.
  Insert the new heading at the end of the current subtree if
  FORCE-HEADING is non-nil."
      (interactive "P")
      (if subheading
          (org-insert-subheading t)
        (org-insert-todo-heading t t))
      (org-schedule nil (format-time-string "%Y-%m-%d")))

  (defun air-org-task-capture ()
    "Capture a task with my default template."
    (interactive)
    (org-capture nil "a"))

  (defun air-org-agenda-capture ()
    "Capture a task in agenda mode, using the date at point."
    (interactive)
    (let ((org-overriding-default-time (org-get-cursor-date)))
      (org-capture nil "a")))

  (defun air-org-agenda-toggle-date (current-line)
    "Toggle `SCHEDULED' and `DEADLINE' tag in the capture buffer."
    (interactive "P")
    (save-excursion
      (let ((search-limit (if current-line
                              (line-end-position)
                            (point-max))))

        (if current-line (beginning-of-line)
          (beginning-of-buffer))
        (if (search-forward "DEADLINE:" search-limit t)
            (replace-match "SCHEDULED:")
          (and (search-forward "SCHEDULED:" search-limit t)
               (replace-match "DEADLINE:"))))))

  (defun air-pop-to-org-todo ;; (split)
    "Visit my main TODO list, in the current window or a SPLIT."
    ;; (interactive "P")
    ;; (air--pop-to-file "~/Dropbox (MIT)/org/todo.org" split)
    (interactive)
    (air--pop-to-file "~/Dropbox (MIT)/org/todo.org"))

  (defun air-pop-to-org-notes (split)
    "Visit my main notes file, in the current window or a SPLIT."
    (interactive "P")
    (air--pop-to-file "~/Dropbox (MIT)/org/notes.org" split))

  (defun air-pop-to-org-vault (split)
    "Visit my encrypted vault file, in the current window or a SPLIT."
    (interactive "P")
    (air--pop-to-file "~/Dropbox (MIT)/org/vault.gpg" split))

  (defun air-pop-to-org-agenda (split)
    "Visit the org agenda, in the current window or a SPLIT."
    (interactive "P")
    (org-agenda-list nil "today" 'day)
    (when (not split)
      (delete-other-windows)))

  (defun air--org-insert-list-leader-or-self (char)
      "If on column 0, insert space-padded CHAR; otherwise insert CHAR.
  This has the effect of automatically creating a properly indented list
  leader; like hyphen, asterisk, or plus sign; without having to use
  list-specific key maps."
      (if (= (current-column) 0)
          (insert (concat " " char " "))
        (insert char)))

  (defun air--org-swap-tags (tags)
      "Replace any tags on the current headline with TAGS.
  The assumption is that TAGS will be a string conforming to Org Mode's
  tag format specifications, or nil to remove all tags."
      (let ((old-tags (org-get-tags-string))
            (tags (if tags
                      (concat " " tags)
                    "")))
        (save-excursion
          (beginning-of-line)
          (re-search-forward
           (concat "[ \t]*" (regexp-quote old-tags) "[ \t]*$")
           (line-end-position) t)
          (replace-match tags)
          (org-set-tags t))))

  (defun air-org-set-tags (tag)
      "Add TAG if it is not in the list of tags, remove it otherwise.
  TAG is chosen interactively from the global tags completion table."
      (interactive
       (list (let ((org-last-tags-completion-table
                    (if (derived-mode-p 'org-mode)
                        (org-uniquify
                         (delq nil (append (org-get-buffer-tags)
                                           (org-global-tags-completion-table))))
                      (org-global-tags-completion-table))))
               (completing-read
                "Tag: " 'org-tags-completion-function nil nil nil
                'org-tags-history))))
      (let* ((cur-list (org-get-tags))
             (new-tags (mapconcat 'identity
                                  (if (member tag cur-list)
                                      (delete tag cur-list)
                                    (append cur-list (list tag)))
                                  ":"))
             (new (if (> (length new-tags) 1) (concat " :" new-tags ":")
                    nil)))
        (air--org-swap-tags new)))

#+END_SRC
*** Setup
#+BEGIN_SRC emacs-lisp
  ;;; Code:
  (use-package org
    :ensure t
    :defer t
    :commands (org-capture)
    :bind (("C-c c" .   air-org-task-capture)
           ("C-c l" .   org-store-link)
           ("C-c t n" . air-pop-to-org-notes)
           ("C-c t t" . air-pop-to-org-todo)
           ("C-c t v" . air-pop-to-org-vault)
           ("C-c t a" . air-pop-to-org-agenda)
           ("C-c t A" . org-agenda)
           ("C-c f k" . org-search-view)
           ("C-c f t" . org-tags-view)
           ("C-c f i" . air-org-goto-custom-id))
    :config
    (setq org-agenda-text-search-extra-files '(agenda-archives))
    (setq org-agenda-files '("~/Dropbox (MIT)/org/"))
    (setq org-todo-keywords
          '((sequence "☛ TODO" "○ IN-PROGRESS" "⚑ WAITING" "|" "✓ DONE" "✗ CANCELED")))
    (setq org-blank-before-new-entry '((heading . t)
                                       (plain-list-item . t)))
    (setq org-capture-templates
          '(("a" "My TODO task format." entry
             (file "todo.org")
             "* ☛ TODO %?\nSCHEDULED: %t")
            ("n" "A (work-related) note." entry
             (file+headline "notes.org" "Work")
             "* %?\n%u\n\n"
             :jump-to-captured t)))
    (setq org-default-notes-file "~/Dropbox (MIT)/org/todo.org")
    (setq org-directory "~/Dropbox (MIT)/org")
    (setq org-enforce-todo-dependencies t)
    (setq org-log-done (quote time))
    (setq org-log-redeadline (quote time))
    (setq org-log-reschedule (quote time))
    (setq org-agenda-skip-scheduled-if-done t)
    (setq org-insert-heading-respect-content t)
    (setq org-ellipsis " …")
    (setq org-startup-with-inline-images t)
    (set-face-attribute 'org-upcoming-deadline nil :foreground "gold1")

    (evil-leader/set-key-for-mode 'org-mode
      "$"  'org-archive-subtree
      "a"  'org-agenda
      "c"  'air-org-set-category-property
      "d"  'org-deadline
      "ns" 'org-narrow-to-subtree
      "p"  'org-set-property
      "s"  'org-schedule
      "t"  'air-org-set-tags
      ",c" 'org-table-insert-column
      ",r" 'org-table-insert-row
      ",w" 'fill-paragraph)

    (add-hook 'org-agenda-mode-hook
              (lambda ()
                (setq org-habit-graph-column 50)
                (define-key org-agenda-mode-map "j"          'org-agenda-next-line)
                (define-key org-agenda-mode-map "k"          'org-agenda-previous-line)
                (define-key org-agenda-mode-map "n"          'org-agenda-next-date-line)
                (define-key org-agenda-mode-map "p"          'org-agenda-previous-date-line)
                (define-key org-agenda-mode-map "c"          'air-org-agenda-capture)
                (define-key org-agenda-mode-map "R"          'org-revert-all-org-buffers)
                (define-key org-agenda-mode-map (kbd "RET")  'org-agenda-switch-to)

                (define-prefix-command 'air-org-run-shortcuts)
                (define-key air-org-run-shortcuts "f" (tiny-menu-run-item "org-files"))
                (define-key air-org-run-shortcuts "t" (tiny-menu-run-item "org-things"))
                (define-key air-org-run-shortcuts "c" (tiny-menu-run-item "org-captures"))
                (define-key air-org-run-shortcuts "l" (tiny-menu-run-item "org-links"))
                (define-key org-agenda-mode-map (kbd "\\") air-org-run-shortcuts)))

    (add-hook 'org-capture-mode-hook
              (lambda ()
                (evil-define-key 'insert org-capture-mode-map (kbd "C-d") 'air-org-agenda-toggle-date)
                (evil-define-key 'normal org-capture-mode-map (kbd "C-d") 'air-org-agenda-toggle-date)
                (evil-insert-state)))

    (add-hook 'org-mode-hook
              (lambda ()
                ;; Special plain list leader inserts
                (dolist (char '("+" "-"))
                  (define-key org-mode-map (kbd char)
                    `(lambda ()
                       (interactive)
                       (air--org-insert-list-leader-or-self ,char))))

                ;; Normal maps
                (define-key org-mode-map (kbd "C-c d")   (lambda ()
                                                           (interactive) (air-org-agenda-toggle-date t)))
                (define-key org-mode-map (kbd "C-c ,")   'org-time-stamp-inactive)
                (define-key org-mode-map (kbd "C-|")     'air-org-insert-scheduled-heading)
                (define-key org-mode-map (kbd "C-\\")    'air-org-insert-heading)
                (define-key org-mode-map (kbd "C-<")     'org-metaleft)
                (define-key org-mode-map (kbd "C->")     'org-metaright)
                (define-key org-mode-map (kbd "S-r")     'org-revert-all-org-buffers)
                (define-key org-mode-map (kbd "C-c C-l") (tiny-menu-run-item "org-links"))

                (evil-define-key 'normal org-mode-map (kbd "TAB") 'org-cycle)
                (evil-define-key 'normal org-mode-map ">>"        'org-metaright)
                (evil-define-key 'normal org-mode-map "<<"        'org-metaleft)
                (evil-define-key 'normal org-mode-map (kbd "C-S-l") 'org-shiftright)
                (evil-define-key 'normal org-mode-map (kbd "C-S-h") 'org-shiftleft)
                (evil-define-key 'insert org-mode-map (kbd "C-S-l") 'org-shiftright)
                (evil-define-key 'insert org-mode-map (kbd "C-S-h") 'org-shiftleft)

                ;; Navigation
                (evil-define-key 'normal org-mode-map (kbd "]n") 'org-forward-heading-same-level)
                (evil-define-key 'normal org-mode-map (kbd "[n") 'org-backward-heading-same-level)
                (define-key org-mode-map (kbd "C-S-j") (lambda ()
                                                         (interactive)
                                                         (org-up-element)
                                                         (org-forward-heading-same-level 1)))
                (define-key org-mode-map (kbd "C-S-k") 'org-up-element)

                ;; Use fill column, but not in agenda
                (setq fill-column 79)
                ;; (when (not (eq major-mode 'org-agenda-mode))
                ;;   (visual-line-mode)
                ;;   (visual-fill-column-mode))
                ;; (flyspell-mode)
                (org-indent-mode))))

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    (setq org-bullets-bullet-list '("•")))

  ;;; init-org.el ends here"]")))))
#+END_SRC
 
* Dem packages
** [[https://github.com/emacs-helm/helm][emacs-helm/helm]]
Kind of an Alfred for emacs. Completion, nice menus for stuff,
overall great.

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :init
    (require 'helm-config)
    :config
    (use-package helm-descbinds
      ;; To describe keys in a nicer way
      :ensure t)
    (use-package helm-projectile
      ;; To use with projectile
      :ensure t
      :config
      (projectile-global-mode))
    ;; (use-package helm-ag
    ;;    :ensure t)
    (helm-mode 1)
    (helm-autoresize-mode t)
    (global-set-key (kbd "M-x") 'helm-M-x)  
    (global-set-key (kbd "<f1>") 'helm-find-files)  
    (global-set-key (kbd "<f2>") 'helm-mini)
    (setq helm-completion-in-region-fuzzy-match t)
    (setq helm-mode-fuzzy-match t)
    (setq helm-buffer-max-length 40)
    (setq helm-locate-command "mdfind -name %s %s") ; Use spotlight for search
    (global-set-key (kbd "M-y") 'helm-show-kill-ring))
#+END_SRC

** [[https://github.com/magit/magit][magit/magit]]
Like git, for emacs. But cooler.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC

** [[https://github.com/joaotavora/yasnippet][joaotavora/yasnippet]]
Freakin yasnippet. It's the best.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    ;; SNIPPETS!!!
    :ensure t
    :config
    (yas-global-mode 1))
#+END_SRC

** [[https://github.com/flycheck/flycheck][flycheck/flycheck]]
Syntax check for python. Pretty good.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    ;; Pep8 check, basically
    :ensure t
    :config
    (global-set-key (kbd "<f11>") 'flycheck-mode))
#+END_SRC

** [[https://github.com/company-mode/company-mode][company-mode/company-mode]]
Supposedly better than autocomplete... Also  using
[[https://github.com/syohex/emacs-company-jedi][syohex/company-jedi]]

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (use-package company-jedi
      ;; Not sure this is actually working for me
      :ensure t
      :config
      (defun my/python-mode-hook ()
        (add-to-list 'company-backends 'company-jedi))
      (add-hook 'python-mode-hook 'my/python-mode-hook)))
#+END_SRC

** [[https://github.com/Wilfred/ag.el][Wilfred/ag.el]]
Sweet package to integrate [[https://github.com/ggreer/the_silver_searcher][ag]] into emacs.

#+BEGIN_SRC emacs-lisp
  (use-package ag
    ;; Silver searcher
    :ensure t
    :defer t
    :init
    (use-package wgrep-ag  
      ;; Guess I need this first
      :ensure t
      :commands (wgrep-ag-setup))
    :config
    (add-hook 'ag-mode-hook
              (lambda ()
                (wgrep-ag-setup)
                (define-key ag-mode-map (kbd "n") 'evil-search-next)
                (define-key ag-mode-map (kbd "N") 'evil-search-previous)))
    (setq ag-executable "/usr/local/bin/ag")
    (setq ag-highlight-search t)
    (setq ag-reuse-buffers t)
    (setq ag-reuse-window t))
#+END_SRC

** [[https://github.com/alpaker/Fill-Column-Indicator][alpaker/Fill-Column-Indicator]]
I like a line length limit indicator in Python

#+BEGIN_SRC emacs-lisp

  (use-package fill-column-indicator
    :ensure t
    :init
    (setq-default fci-rule-column 79)
    (global-set-key (kbd "<f10>") 'fci-mode)
    (add-hook 'python-mode-hook 'fci-mode))
#+END_SRC

** [[https://github.com/Fanael/rainbow-delimiters][Fanael/rainbow-delimiters]]
Better parentheses coloring

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'python-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

** [[https://github.com/tsdh/highlight-parentheses.el][tsdh/highlight-parentheses.el]]
Makes the parentheses my cursor is between stand out more.
 
#+BEGIN_SRC emacs-lisp
  (use-package highlight-parentheses
    ;; Make parenthesis I'm currently in stand out
    :ensure t)
#+END_SRC

** [[https://github.com/Fanael/highlight-numbers][Fanael/highlight-numbers]]
Neat-o

#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers
    :ensure t
    :init
    (add-hook 'python-mode-hook 'highlight-numbers-mode))
#+END_SRC

** [[https://github.com/vspinu/imenu-anywhere][vspinu/imenu-anywhere]]
imenu on steroids.

#+BEGIN_SRC emacs-lisp
  (use-package imenu-anywhere
    ;; Imenu on steroids
    :ensure t
    :config
    (global-set-key (kbd "<f5>") 'imenu-anywhere))
#+END_SRC

** [[https://github.com/TheBB/spaceline][TheBB/spaceline]]
I was looking for something with the nice look and simplicity of
[[https://github.com/itchyny/lightline.vim][this]]. Spaceline does ok. 

#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    ;; Similar to vim's powerline, this one looks clean
    ;; and 'just works', to an extent
    :ensure t
    :config
    (require 'spaceline-config)
    (spaceline-spacemacs-theme)
    (spaceline-helm-mode)
    (spaceline-toggle-minor-modes-off)
    (spaceline-toggle-battery-on)
    (spaceline-toggle-buffer-size-off)
    (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
    (set-face-background 'spaceline-evil-normal "#afd700")
    (set-face-foreground 'spaceline-evil-normal "#005f00")
    (set-face-background 'spaceline-evil-insert "#0087af")
    (set-face-foreground 'spaceline-evil-insert "white")
    (set-face-background 'spaceline-evil-visual "#ff8700")
    (set-face-foreground 'spaceline-evil-visual "#870000"))

#+END_SRC

** [[https://github.com/lunaryorn/fancy-battery.el][lunaryorn/fancy-battery.el]]
For nice battery display info.

#+BEGIN_SRC emacs-lisp
  (use-package fancy-battery
    ;; Something something battery
    :ensure t
    :config
    (fancy-battery-mode)
    (setq fancy-battery-show-percentage t)
    (fancy-battery-update))
#+END_SRC

** [[https://github.com/myrkr/dictionary-el/blob/master/dictionary.el][myrkr/dictionary-el]]
Dictionary search!

#+BEGIN_SRC emacs-lisp
  (use-package dictionary
    :ensure t)
#+END_SRC

** [[https://github.com/naiquevin/sphinx-doc.el][naiquevin/sphinx-doc.el]]
Sphinx doc python integration. Pretty neat, though not entirely
complete, IMO.

#+BEGIN_SRC emacs-lisp
  (use-package sphinx-doc
    :ensure t
    :config
    (add-hook 'python-mode-hook
              (lambda ()
                (require 'sphinx-doc)
                (sphinx-doc-mode t))))

#+END_SRC

** [[https://github.com/defunkt/markdown-mode][defunkt/markdown-mode]]
Syntax highlighting for markdown files.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t)
#+END_SRC

** [[https://github.com/ancane/markdown-preview-mode][ancane/markdown-preview-mode]]
Generates markdown previews? Not sure if working.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-preview-mode
    :ensure t)
#+END_SRC

** [[http://elpa.gnu.org/packages/csv-mode.html][csv-mode]]
Eh, wanted to try a simpler way of editing
csv files. (Excel and Numbers both kinda suck at this,
LibreOffice was slightly better.) Haven't used this much.

#+BEGIN_SRC emacs-lisp

  (use-package csv-mode
    ;; I'll give this a shot
    :ensure t)
#+END_SRC
** [[https://www.emacswiki.org/emacs/download/multi-term.el][multi-term]]
I wanted a slightly better terminal in emacs. Not sure
if this is the answer as I haven't used it much.
#+BEGIN_SRC emacs-lisp
  (use-package multi-term
    ;; Supposed to be nicer than ansi-term
    :ensure t)
#+END_SRC
** Not currently in use
*** [[https://github.com/Malabarba/smart-mode-line][Malabarba/smart-mode-line]]
Used it for quite a while, but now I use [[https://github.com/TheBB/spaceline][spaceline]].

#+BEGIN_SRC emacs-lisp
  ;; (use-package smart-mode-powerline-theme
  ;;   :ensure t)

  ;; (use-package smart-mode-line
  ;;   :ensure t
  ;;   :config
  ;;   (setq sml/no-confirm-load-theme t)
  ;;   (setq sml/theme 'dark)
  ;;   (setq rm-whitelist '(""))
  ;;   (setq system-uses-terminfo nil)
  ;;   (sml/setup)
  ;;   (display-time-mode)
  ;;   (display-time-update)
  ;;   (fancy-battery-mode)
  ;;   (setq fancy-battery-show-percentage t))
#+END_SRC

*** [[https://github.com/jorgenschaefer/elpy][jorgenschaefer/elpy]]
Sets up a python editing environment. I'm not sure yet.

#+BEGIN_SRC emacs-lisp
  ;; (use-package elpy
  ;;   ;; Eh, I don't know...
  ;;   :ensure t
  ;;   :config
  ;;   (elpy-enable)
  ;;   (setq elpy-rpc-backend "jedi"))
#+END_SRC

*** [[https://github.com/zenozeng/yafolding.el][zenozeng/yafolding.el]]
Good code folding is hard to come by in Emacs,
and isn't /that/ useful. This was pretty good but
had some known issues.

#+BEGIN_SRC emacs-lisp
  ;; (use-package yafolding
  ;;   ;; Man, good code folding is hard to come by in emacs
  ;;   ;; This one's ok, but there are a couple know issues that
  ;;   ;; don't quite make it worth it, I think.
  ;;   :ensure t
  ;;   :config
  ;;   (defun air--yafolding-kbd ()
  ;;  (local-set-key (kbd "C-c <up>") 'yafolding-hide-all)
  ;;  (local-set-key (kbd "C-c <down>") 'yafolding-show-all)
  ;;  (local-set-key (kbd "C-c <left>") 'yafolding-hide-element)
  ;;  (local-set-key (kbd "C-c <right>") 'yafolding-show-element)
  ;;  (local-set-key [C-tab] 'yafolding-toggle-element))
  ;;   (add-hook 'python-mode-hook 'yafolding-mode)
  ;;   (add-hook 'python-mode-hook 'air--yafolding-kbd))
#+END_SRC

*** [[https://github.com/tkf/emacs-jedi][tkf/emacs-jedi]]
Integrates [[https://github.com/davidhalter/jedi][jedi]] into emacs for python completion,
hasn't been working for me recently. Either way,
this is for [[https://github.com/auto-complete/auto-complete][auto-complete]] but now I use [[https://github.com/syohex/emacs-company-jedi][syohex/emacs-company-jedi]]. 

#+BEGIN_SRC emacs-lisp
  ;; (use-package jedi
  ;;   ;; Hasn't been working smoothly recently
  ;;   :ensure t
  ;;   :init
  ;;   (add-hook 'python-mode-hook 'jedi:setup)
  ;;   (setq jedi:complete-on-dot t))
#+END_SRC

*** [[https://github.com/auto-complete/auto-complete][auto-complete/auto-complete]] 
Pretty good autocompletion, but trying out [[github.com/company-mode/company-mode][company-mode]] right now.

#+BEGIN_SRC emacs-lisp
  ;; (use-package auto-complete
  ;;   ;; Supposedly not as good as company mode
  ;;   :ensure t
  ;;   :config
  ;;   (global-auto-complete-mode t))
#+END_SRC

*** [[https://github.com/joaotavora/autopair][joaotavora/autopair]]
It may be recommended to use =electric-pair-mode= nowadays? That's
what I'm using anyway.  

#+Begin_src emacs-lisp
  ;; (use-package autopair
  ;;   :ensure t
  ;;   :config
  ;;   (autopair-global-mode))
#+END_SRC

* Python stuff
And one matlab thing

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.m$" . octave-mode))

  ;; Python stuff
  (defun ipython ()
    (interactive)
    (ansi-term "/usr/local/bin/ipython"))
  (defun ipython2()
    (interactive)
    (ansi-term "/Users/diego/.virtualenvs/py2/bin/ipython"))
  (add-hook 'python-mode-hook 'highlight-parentheses-mode)
  (add-hook 'python-mode-hook 'hs-minor-mode)
  ;;(add-hook 'python-mode-hook 'yafolding-mode)
  (add-hook 'python-mode-hook 'yas-minor-mode)
  (add-hook 'python-mode-hook
            (lambda () (set (make-local-variable 'comment-inline-offset) 2)))
  (add-hook 'python-mode-hook (lambda () (setq tab-width 4)))
  (add-hook 'python-mode-hook (lambda () (linum-mode 1)))
  (setenv "PYTHONPATH" "/usr/local/bin/python3")
#+END_SRC

* Emacs-Lisp stuff

#+BEGIN_SRC emacs-lisp
  ;; Emacs-lisp stuff
  (defun my-lisp-mode-config ()
    (setq ac-sources '(ac-source-symbols ac-source-words-in-same-mode-buffers))
    (local-set-key (kbd "C-c <up>") 'hs-hide-all)
    (local-set-key (kbd "C-c <down>") 'hs-show-all)
    (local-set-key (kbd "C-c <left>") 'hs-hide-block)
    (local-set-key (kbd "C-c <right>") 'hs-show-block))

  (add-hook 'emacs-lisp-mode-hook 'my-lisp-mode-config)
  (add-hook 'emacs-lisp-mode-hook 'highlight-parentheses-mode)
  (add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)
  (add-hook 'emacs-lisp-mode-hook (lambda () (linum-mode 1)))
#+END_SRC

* Fix fci pop-up menu issue
This is from somewhere on the internet.

#+BEGIN_SRC emacs-lisp
  ;; Disable fci mode when autocomplete popup menu happens
  (defun sanityinc/fci-enabled-p ()
      (and (boundp 'fci-mode) fci-mode))
  (defvar sanityinc/fci-mode-suppressed nil)
  (defadvice popup-create (before suppress-fci-mode activate)
    "Suspend fci-mode while popups are visible"
    (let ((fci-enabled (sanityinc/fci-enabled-p)))
      (when fci-enabled
        (set (make-local-variable 'sanityinc/fci-mode-suppressed) fci-enabled)
        (turn-off-fci-mode))))

  (defadvice popup-delete (after restore-fci-mode activate)
    "Restore fci-mode when all popups have closed"
    (when (and sanityinc/fci-mode-suppressed
               (null popup-instances))
      (setq sanityinc/fci-mode-suppressed nil)
      (turn-on-fci-mode)))
#+END_SRC

* Highlight currrent line number
This, too, is from somewhere on the internet. Possibly
stackoverflow. 

#+BEGIN_SRC emacs-lisp
  (defface my-linum-hl
    `((t :inherit linum :background ,(face-background 'hl-line nil t)))
    "Face for the current line number."
    :group 'linum)

  (defvar my-linum-format-string "%3d")

  (add-hook 'linum-before-numbering-hook 'my-linum-get-format-string)

  (defun my-linum-get-format-string ()
    (let* ((width (1+ (length (number-to-string
                               (count-lines (point-min) (point-max))))))
           (format (concat "%" (number-to-string width) "d ")))
      (setq my-linum-format-string format)))

  (defvar my-linum-current-line-number 0)

  (setq linum-format 'my-linum-format)

  (defun my-linum-format (line-number)
    (propertize (format my-linum-format-string line-number) 'face
                (if (eq line-number my-linum-current-line-number)
                    'my-linum-hl
                  'linum)))

  (defadvice linum-update (around my-linum-update)
    (let ((my-linum-current-line-number (line-number-at-pos)))
      ad-do-it))
  (ad-activate 'linum-update)
  (add-hook 'term-mode-hook (lambda ()
                              (setq-local global-hl-line-mode
                                          nil)))
#+END_SRC
