#+TITLE: Emacs Init File!
#+PROPERTY: header-args :results silent :comments link :tangle ~/dotfiles/emacs.d/config.el

* Intro

This is the bulk of my emacs configuration, loaded by [[./init.el][init.el]]. It's pretty cool
that I can write it in org mode, because easy organization and rearrangement
are sweet. Check out [[https://github.com/aaronbieber/dotfiles/tree/master/configs/emacs.d][@aaronbieber]], [[https://github.com/hrs/dotfiles/tree/master/emacs.d][@hrs]], and [[https://github.com/syl20bnr/spacemacs][spacemacs]] - a lot of the
inspiration (and erm, code) for this is taken from them.

:NOTE:
*Note:* The usual way to do this is to call ~(org-babel-load-file "config.org")~,
and I did that for a while, but for whatever reason I decided I wanted
=config.el= (and its compiled verison) to be produced as I changed the file
itself, hence the [[#dotfile-handling][dotfile handling]] functions and [[#local-vars][file local variables]]. Also,
the optional ~COMPILE~ argument of ~org-babel-load-file~ wasn't working for me, so
there's that.
:END:

First off, let's set lexical binding, in accordance with the
[[https://github.com/bbatsov/emacs-lisp-style-guide#source-code-layout--organization][emacs-lisp-style-guide]].
#+begin_src emacs-lisp :comments no
;;; -*- lexical-binding: t -*-
#+end_src

* Contents                                                            :toc_1:
- [[#intro][Intro]]
- [[#initial-setup][Initial Setup]]
- [[#package-management][Package management]]
- [[#core][Core]]
- [[#help][Help]]
- [[#files-and-buffers][Files and Buffers]]
- [[#editing][Editing]]
- [[#navigation][Navigation]]
- [[#git-and-github][Git and github]]
- [[#appearance][Appearance]]
- [[#modes][Modes]]
- [[#enhancements][Enhancements]]
- [[#fun][Fun]]
- [[#web][Web?]]
- [[#local-vars][Local vars!]]

* Initial Setup
** Personal Info
#+begin_src emacs-lisp
(setq user-full-name "Diego A. Mundo"
      user-mail-address "diegoamundo@gmail.com")
#+end_src
** Server
Start server if not already running. You can do this with ~emacs --daemon~ or
even automate it with ~brew services start emacs~ on macOS, but I usually just
run Emacs on login anyway, so this suffices.

This makes startup time irrelevant. Start emacs once, connect with emacsclient
every other time. See [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html#Emacs-Server][Using Emacs as a Server]].
#+begin_src emacs-lisp
(require 'server)
(unless (server-running-p)
  (server-start))
#+end_src
** Load Path
Add [[./lisp][lisp]] directory and subdirectories to ~load-path~ and ~custom-theme-load-path~.

This is where I put lisp that isn't necessarily central to my config or needs
to be in a standalone file such as a some auth settings, lisp practice,
really bad self-made themes, ~org-export-async-init-file~, etc.
#+begin_src emacs-lisp
(eval-and-compile
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
  (let ((default-directory  "~/.emacs.d/lisp/"))
    (normal-top-level-add-subdirs-to-load-path))

  (add-to-list 'custom-theme-load-path "~/.emacs.d/lisp/"))
#+end_src
** cl-lib
I'm sure this will be required by some package somewhere along the way, but I
use this a fair bit so let's explicitly require it.
#+begin_src emacs-lisp
(require 'cl-lib)
#+end_src
* Package management
** Defaults
*** Package-archives
This is adds places to fetch external packages from, using ~package-install~ or
[[#use-package][use-package]]. [[https://melpa.org/#/][Melpa]] is probably the best of these, having the biggest variety
and most active development. It builds packages around every 4 hours or so
directly from source.
#+begin_src emacs-lisp
(add-to-list 'package-archives '("org"       . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("melpa"     . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/"))
#+end_src
*** package-initialize
Load and activate packages. I /think/ this tells Emacs about what features are
available and where to find them.

Note that this is usually in init.el, but I put it down here because it helped
install the latest org-version without much fuss (otherwise there was a
conflict where the built-in version was always loaded). See [[#org-mode][org-mode]] for a bit
more info.
#+begin_src emacs-lisp
(package-initialize)
#+end_src
*** async-bytecomp-mode
Byte compile installed packages asynchronously, which remedies errors on
upgrading loaded packages (or something).
#+begin_src emacs-lisp
(with-eval-after-load 'async-bytecomp
  (async-bytecomp-package-mode 1)
  ;; (setq async-bytecomp-allowed-packages 'all)
  )
#+end_src
** Packages
*** [[https://github.com/jwiegley/use-package][use-package]]
#+begin_quote
  A use-package declaration for simplifying your .emacs
#+end_quote
An excellent utility for managing packages and package configuration in a neat
and organized way, with advanced support for deferring, pre/post-loading
configuration, time reporting, and more.

Using use-package, you can use the same init file across computers without
keeping track of what's installed or not and it will ensure that any missing
packages are installed. It's pretty neat.
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+end_src
I also set some variables - in particular, tell me the load time when a package
takes more than .001 seconds, always tell me about package loading, and always
defer and ensure packages are installed unless otherwise stated.
#+begin_src emacs-lisp
(setq use-package-minimum-reported-time .001
      use-package-verbose t
      use-package-always-defer t
      use-package-always-ensure t)

(eval-when-compile
  (require 'use-package))
#+end_src
*** [[https://github.com/quelpa/quelpa/][quelpa]]
#+begin_quote
  Build and install your Emacs Lisp packages on-the-fly directly from source
#+end_quote
Quelpa allows you to install packages from /anywhere/, provided the right [[https://github.com/melpa/melpa#recipe-format][melpa
format recipe]]. It's a great way to keep up with the bleeding edge of a package
(if melpa just isn't enough for you), install packages that aren't on melpa,
try out a different development branch, install your fork as a package... you
get the point.
#+begin_src emacs-lisp
(setq quelpa-update-melpa-p nil)
(unless (require 'quelpa nil t)
  (with-temp-buffer
    (url-insert-file-contents "https://raw.github.com/quelpa/quelpa/master/bootstrap.el")
    (eval-buffer)))
#+end_src
*** [[https://github.com/quelpa/quelpa-use-package][quelpa-use-package]]
#+begin_quote
  Emacs quelpa handler for use-package
#+end_quote
Integrates use-package and quelpa for maximum fun.
#+begin_src emacs-lisp
(quelpa
 '(quelpa-use-package
   :fetcher github
   :repo "quelpa/quelpa-use-package"))
(require 'quelpa-use-package)
(quelpa-use-package-activate-advice)
#+end_src
** Functions
#+begin_src emacs-lisp
(defun d/updates ()
  "Run `paradox-upgrade-packages' and  `quelpa-upgrade'."
  (interactive)
  (quelpa-upgrade)
  (paradox-upgrade-packages))
#+end_src
* Core
** Defaults
*** Prompts
Having to type "yes" can be annoying.
#+begin_src emacs-lisp
(defalias 'yes-or-no-p #'y-or-n-p)
#+end_src
*** Messages
Allow more messages in ~*Messages*~ buffer so you can look at what happened waaay
back if you need to.
#+begin_src emacs-lisp
(setq message-log-max 10000)
#+end_src
*** Scrolling
Scroll one line at a time, and only scroll the current line when moving past
right boundary.
#+begin_src emacs-lisp
(setq scroll-step 1
      scroll-conservatively 10000
      auto-hscroll-mode 'current-line)
#+end_src
Smoother mouse scrolling, which is now irrelevant to me since I've disabled the
mouse in emacs.
#+begin_src emacs-lisp :tangle no
(setq mouse-wheel-scroll-amount '(2 ((shift) . 1) ((control) . nil))
      mouse-wheel-progressive-speed nil)
#+end_src
*** Minibuffer
Allow editing in the minibuffer... /with/ the minibuffer. Also resize minibuffer
windows to fit text.
#+begin_src emacs-lisp
(setq enable-recursive-minibuffers t
      resize-mini-windows t)
#+end_src
*** Column
Show the column number in the modeline, because I'm not a savage.
#+begin_src emacs-lisp
(setq column-number-mode t)
#+end_src
*** Tab
Use tab for completion and cycling candidates (relevant for the minibuffer?).
#+begin_src emacs-lisp
(setq tab-stop-list (number-sequence 4 200 4)
      completion-cycle-threshold t
      tab-always-indent 'complete)
#+end_src
*** Tramp
Use ssh by default and remember passwords for [[https://www.gnu.org/software/tramp/][tramp]]. Also make it quieter
except for warnings and errors.
#+begin_src emacs-lisp
(setq tramp-default-method "ssh"
      tramp-verbose 2
      password-cache-expiry nil)
#+end_src
*** Kill-ring
Save stuff you've copied in other applications to the emacs kill-ring.
#+begin_src emacs-lisp
(setq save-interprogram-paste-before-kill t)
#+end_src
** Functions
*** Dotfiles
#+begin_src emacs-lisp
(defvar d/show-async-tangle-results nil)

(defun d/async-tangle-init ()
  "Asynchronously tangle config.org and and byte-compile."
  (interactive)
  (let ((init-tangle-start-time (current-time)))
    (async-start
     (lambda ()
       ;; make async emacs aware of packages (for byte-compilation)
       (require 'org)

       ;; tangle
       (org-babel-tangle-file
        (expand-file-name "~/dotfiles/emacs.d/config.org")))
     (unless d/show-async-tangle-results
       `(lambda (result)
          (if result
              (message "SUCCESS: config.org successfully tangled. (%.3fs)"
                       (float-time (time-subtract (current-time)
                                                  ',init-tangle-start-time)))
            (message "ERROR: config.org tangle failed.")))))))

(defun d/async-babel-tangle ()
  "Tangle org file asynchronously."
  (interactive)
  (let ((file (buffer-file-name)))
    (async-start
     `(lambda ()
        (require 'org)
        (org-babel-tangle-file ,file))
     (unless d/show-async-tangle-results
       (lambda (result)
         (if result
             (message "SUCCESS: successfully tangled file.")
           (message "ERROR: tangle file failed.")))))))
#+end_src
*** Config helpers
#+begin_src emacs-lisp
(defmacro d/setup-mode (modes &rest body)
  "Create a setup function for MODES and add it to relevant hook(s)."
  (declare (indent defun))
  (let ((modes (if (listp modes) modes (list modes))))
    (let ((setup-func
           (intern (concat "d/setup-"
                           (symbol-name (car modes))
                           "-mode"))))
      `(progn
         (defun ,setup-func ()
           ,@body)
         ,@(cl-loop for mode in modes collect
                    (let ((mode-hook (intern (concat (symbol-name mode)
                                                     "-mode-hook"))))
                      `(add-hook ',mode-hook #',setup-func)))))))
#+end_src
*** Other
#+begin_src emacs-lisp
(defun d/toggle-rlines ()
  "Toggle relative line numbers."
  (interactive)
  (if (eq display-line-numbers 'relative)
      (setq display-line-numbers t)
    (setq display-line-numbers 'relative)))


(define-minor-mode d/rlines-mode
  "Display relative line numbers for current buffer."
  nil
  " rl"
  nil
  (setq display-line-numbers nil)
  (when (and d/rlines-mode
             (not (minibufferp)))
    (setq display-line-numbers 'relative)
    (setq display-line-number-width
          (length
           (number-to-string
            (count-lines (point-min) (point-max)))))))

(define-globalized-minor-mode d/global-rlines-mode d/rlines-mode
  d/rlines-mode
  (lambda () (d/rlines-mode 1)))

(defmacro d/fbound-and-true-p (name &optional args)
  `(and (fboundp #',name)
        (apply #',name ,args)))
#+end_src
** Packages
These are packages that I consider /absolutely essential/ to my emacs workflow,
or that enhance emacs at a deeper level than any regular mode. Or, I just had
to load them before other things.
*** [[https://github.com/tarsius/no-littering/][no-littering]]
#+begin_quote
  Help keeping ~/.emacs.d clean
#+end_quote
Usually, a bunch of crap is kept in your ~.emacs.d~ folder by both built-in emacs
features and external packages. This package sets up a convention to store
everything in either ~.emacs.d/var~ or ~.emacs.d/etc~.
#+begin_src emacs-lisp
(use-package no-littering
  :demand t
  :config
  (savehist-mode 1)
  (add-to-list 'savehist-additional-variables 'kill-ring)
  (save-place-mode 1)
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))
#+end_src
*** [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]]
#+begin_quote
  Make Emacs use the $PATH set up by the user's shell
#+end_quote
If you've ever had issues where emacs doesn't find your executables, this
package should fix them nicely.
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :defer 5
  :config
  (setq exec-path-from-shell-check-startup-files nil)
  (exec-path-from-shell-initialize))
#+end_src
*** [[https://github.com/noctuid/general.el][general]]
#+begin_quote
  More convenient key definitions in emacs
#+end_quote
That undersells it. The /most/ convenient key definitions in emacs.
#+begin_src emacs-lisp
(use-package general
  :after evil
  :quelpa (general
           :fetcher github
           :repo "noctuid/general.el"
           :branch "buttercup")
  :config
  (general-evil-setup t t)

  (general-create-definer
   d/mode-leader-keys
   :states '(emacs normal visual motion insert)
   :non-normal-prefix "C-,"
   :prefix ",")

  (general-create-definer
   d/leader-keys
   :states '(emacs normal visual motion insert)
   :non-normal-prefix "C-SPC"
   :prefix "SPC"))
#+end_src
*** [[https://github.com/emacs-evil/evil][evil]]
#+begin_quote
  The extensible vi layer for Emacs.
#+end_quote
I really like Vim bindings. I originally learned Emacs bindings but there was
something really appealing about the simplicity and power of Vim bindings/modal
editing. So I went for it. Now I'll never go back.
**** Package
#+begin_src emacs-lisp
(use-package evil
  :demand t
  :general
  (nmap
   "S-SPC" 'org-agenda-list
   "-" 'negative-argument
   "\\" 'evil-window-next
   "C-_" 'keyboard-quit
   "C-/"  'keyboard-quit
   [escape]  'keyboard-quit)
  (:states '(insert replace visual)
   "C-_" 'evil-normal-state
   "C-/" 'evil-normal-state)
  (vmap [escape] 'keyboard-quit)
  :init
  (setq evil-want-C-u-scroll t
        evil-want-fine-undo t
        evil-search-module 'evil-search
        evil-lookup-func (lambda () (man (thing-at-point 'word))))
  :config
  (setq evil-insert-state-cursor '(bar . 1)
        evil-emacs-state-cursor '(bar . 1)
        evil-normal-state-tag  " N "
        evil-insert-state-tag  " I "
        evil-motion-state-tag  " M "
        evil-visual-state-tag  " V "
        evil-emacs-state-tag   " E "
        evil-replace-state-tag " R "
        evil-operator-state-tag " O ")

  (evil-ex-define-cmd "dtw" #'delete-trailing-whitespace)
  (evil-ex-define-cmd "buffers" #'ibuffer)

  (evil-mode 1))
#+end_src
**** Modes
#+begin_src emacs-lisp
(with-eval-after-load 'evil
  ;; Use Emacs state in these additional modes.
  (dolist (mode '(ag-mode
                  flycheck-error-list-mode
                  git-rebase-mode
                  eshell-mode
                  calc-mode
                  calc-trail-mode
                  sunshine-mode
                  term-mode
                  notmuch-tree-mode
                  profiler-report-mode))
    (add-to-list 'evil-emacs-state-modes mode))

  (setq evil-emacs-state-modes (delq 'ibuffer-mode evil-emacs-state-modes))
  (setq evil-emacs-state-modes (delq 'Custom-mode evil-emacs-state-modes))
  (setq evil-insert-state-modes (delq 'term-mode evil-insert-state-modes))

  ;; Use insert state in these additional modes.
  (dolist (mode '(magit-log-edit-mode org-capture-mode))
    (add-to-list 'evil-insert-state-modes mode))

  (add-to-list 'evil-buffer-regexps '("\\*Flycheck")))
#+end_src
*** [[https://github.com/abo-abo/swiper][ivy]]
#+begin_quote
  Ivy - a generic completion frontend for Emacs, Swiper - isearch with an
  overview, and more. Oh, man!
#+end_quote
A really nice search/completion system for emacs.
**** ivy
#+begin_src emacs-lisp
(use-package ivy
  :general
  (:keymaps 'ivy-minibuffer-map
   [escape] 'keyboard-escape-quit
   "C-/" 'keyboard-escape-quit
   [S-return] 'ivy-dispatching-done
   [C-return] 'ivy-immediate-done
   "C-j" 'ivy-next-line
   "C-k" 'ivy-previous-line
   [S-up] 'ivy-previous-history-element
   [S-down] 'ivy-next-history-element)
  (d/leader-keys
   "-" 'ivy-resume
   "bb" 'ivy-switch-buffer
   "bB" 'ivy-switch-buffer-other-window)
  :init
  (setq ivy-do-completion-in-region nil)
  :config
  (ivy-mode 1)

  (setq ivy-re-builders-alist '((swiper . ivy--regex-plus)
                                (t . ivy--regex-ignore-order)))
  (setq ivy-format-function 'ivy-format-function-arrow ; DAT NICE ARROW THOUGH aosenuth
        projectile-completion-system 'ivy
        ivy-use-virtual-buffers t ; Show recent files
        ivy-count-format ""
        ivy-extra-directories nil; '("../") ; ignore current folder and parent dir
        ivy-initial-inputs-alist '((man . "^"))
        ivy-switch-buffer-faces-alist '((dired-mode . ivy-subdir))
        recentf-max-saved-items 50
        ivy-use-selectable-prompt t))

(use-package ivy-hydra)
#+end_src
**** swiper
#+begin_src emacs-lisp
(use-package swiper
  :general
  (d/leader-keys
   "sm" 'swiper-multi
   "sS" 'swiper-all)
  :config (setq swiper-goto-start-of-match t))
#+end_src
**** counsel
#+begin_src emacs-lisp
(use-package counsel
  :general
  ("M-x" 'counsel-M-x
   "C-x C-f" 'counsel-find-file)
  (d/leader-keys
   "SPC"  'counsel-M-x
   "ff"  'counsel-find-file
   "fj"  'counsel-file-jump
   "fl"  'counsel-locate
   "hdF" 'counsel-describe-face
   "hdb" 'counsel-descbinds
   "hdf" 'counsel-describe-function
   "hdv" 'counsel-describe-variable
   "iu"  'counsel-unicode-char
   "sr"  'counsel-rg
   "ss"  'counsel-grep-or-swiper
   "y"   'counsel-yank-pop)
  :commands counsel-describe-face
  :config
  (when (eq system-type 'darwin)
    (setq counsel-locate-cmd 'counsel-locate-cmd-mdfind))

  (setq conusel-org-goto-display-style 'path
        counsel-org-goto-separator ": "
        counsel-org-goto-face-style 'org
        counsel-org-goto-display-todo t
        counsel-grep-base-command "grep -nEi '%s' %s"
        counsel-find-file-ignore-regexp (concat "\\(\\`\\.\\)"
                                                "\\|\\(\\.elc$\\)"
                                                "\\|\\(.pyc$\\)")
        counsel-yank-pop-separator "
  ─────────────────────────
")
  (counsel-mode 1)
  (defalias 'ag #'counsel-ag)
  (defalias 'locate #'counsel-locate)

  (defun d/counsel-yank-pop-action (s)
    "Make consistent with evil-paste-after.

Source: https://git.io/vQKmf"
    (save-excursion
      (undo-boundary)
      (unless (eq (point) (point-max))
        (forward-char))
      (with-ivy-window
        (delete-region ivy-completion-beg
                       ivy-completion-end)
        (insert (substring-no-properties s))
        (setq ivy-completion-end (point))))
    (forward-char (length s)))

  (advice-add #'counsel-yank-pop-action
              :override #'d/counsel-yank-pop-action)

  (defun d/counsel-yank-pop-format-function (cand-pairs)
    "Make counsel-yank-pop look a little more like the rest of ivy.

Source: https://git.io/vQK0v"
    (ivy--format-function-generic
     (lambda (str)
       (let ((temp-list (split-string (counsel--yank-pop-truncate str) "\n" t)))
         (mapconcat 'identity
                    (append (list (concat "> " (car temp-list)))
                            (mapcar (lambda (s) (concat "  " s))
                                    (cdr temp-list)))
                    "\n")))
     (lambda (str)
       (mapconcat (lambda (s) (concat "  " s))
                  (split-string (counsel--yank-pop-truncate str) "\n" t)
                  "\n"))
     cand-pairs
     counsel-yank-pop-separator))

  (advice-add #'counsel--yank-pop-format-function
              :override
              #'d/counsel-yank-pop-format-function))
#+end_src
*** [[https://github.com/Ilazki/prettify-utils.el][prettify-utils]]
#+begin_src emacs-lisp
(use-package prettify-utils
  :quelpa (prettify-utils
           :fetcher github
           :repo "Ilazki/prettify-utils.el"))
#+end_src
*** [[http://orgmode.org/][org-mode]]
#+begin_quote
  Org mode is for keeping notes, maintaining TODO lists, planning projects, and
  authoring documents with a fast and effective plain-text system.
#+end_quote
But really, it's life.

:NOTES:
*Note:* Getting emacs to run the latest version of org can be weird. Least I
didn't find a satisfactory solution for a while. Check out this [[http://sachachua.com/blog/2014/05/update-org-7-comes-emacs-org-8-configuration-better-exports/][blog post]] for
some advice on that (still relevant now-2016). In particular, make sure you
have something like:

#+begin_src emacs-lisp :tangle no
(package-initialize)
(setq package-enable-at-startup nil)
#+end_src

at the beginning of your init.el/emacs.d, or as in my case something like:

#+begin_src emacs-lisp :tangle no
;; (package-initialize)
(require 'package)
(setq package-enable-at-startup nil)
;; ---------------------------
;; my load-path settings here
;; ---------------------------
(package-initialize)
#+end_src

I actually don't think I tried the former option, but the latter simply worked
so I went with it.
:END:

**** Defaults
***** Files
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (setq org-agenda-text-search-extra-files '(agenda-archives)
        org-agenda-files '("~/Dropbox/org/todo.org" "~/Dropbox/org/gcal.org")
        org-default-notes-file "~/Dropbox/org/todo.org"
        d/notes-file "~Dropbox/org/notes.org"
        org-directory "~/Dropbox/org"
        org-archive-location "~/Dropbox/org/archive.org::"
        org-mobile-inbox-for-pull "~/Dropbox/org/mobile.org"
        org-export-async-init-file
        (locate-user-emacs-file "lisp/org-async-init.el")))
#+end_src
***** Todo/agenda
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (setq org-enforce-todo-dependencies t
        org-log-done (quote time)
        org-log-redeadline (quote time)
        org-log-reschedule (quote time)
        org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-hide-tags-regexp ".*"
        org-agenda-span 'week)

  (setq org-agenda-deadline-faces
        '((1.0 . org-warning)
          (0.5 . org-upcoming-deadline)
          (0.0 . '(:foreground "#A89984"))))

  (setq org-todo-keywords
        '((sequence "TODO(t)" "IN-PROGRESS(p)" "WAITING(w)" "|"
                    "DONE(d)" "CANCELED(c)")
          (sequence "READ(r)" "|"
                    "DONE(h)")))

  (setq org-capture-templates
        '(("t" "Todo")
          ("ts" "Todo: School")
          ("te" "Todo: Emacs" entry
           (file+olp org-default-notes-file "Emacs")
           "* TODO %?")
          ("n" "Note")
          ("g" "Google calendar" entry
           (file "~/Dropbox/org/gcal.org") "* %?\n\n%^T"))))
#+end_src

***** Behavior/appearance
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (setq org-insert-heading-respect-content t
        org-src-window-setup 'current-window
        org-list-demote-modify-bullet '(("-" . "*")
                                        ("*" . "+"))
        org-export-in-background t
        org-confirm-babel-evaluate nil
        org-src-tab-acts-natively t
        org-M-RET-may-split-line nil
        org-list-use-circular-motion t
        org-log-into-drawer t
        org-imenu-depth 5
        org-goto-interface 'outline-path-completion
        org-outline-path-complete-in-steps nil
        org-link-search-must-match-exact-headline nil
        org-confirm-elisp-link-function 'y-or-n-p
        org-tags-exclude-from-inheritance '("crypt")
        org-crypt-key "diegoamundo@protonmail.com"
        org-confirm-elisp-link-not-regexp (concat "(\\(wiki-search"
                                                  "\\|describe-function"
                                                  "\\|describe-variable"
                                                  "\\).*?)"))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (emacs-lisp . t)
     (calc . t)
     (ipython . t)
     (shell . t)
     (lisp . t)
     (C . t)
     (scheme . t)))

  ;; appearance
  (setq org-src-fontify-natively t
        org-src-preserve-indentation t
        org-fontify-quote-and-verse-blocks t
        org-hide-emphasis-markers t
        org-startup-with-inline-images t
        org-ellipsis " "
        org-highlight-latex-and-related '(latex)
        org-pretty-entities t
        org-image-actual-width 500)

  (mapc (lambda (arg) (setcdr arg (list (downcase (nth 1 arg)))))
        org-structure-template-alist)

  (add-to-list 'org-structure-template-alist
               (list "sel" (concat "#+begin_src emacs-lisp\n"
                                   "?\n"
                                   "#+end_src")))
  (add-to-list 'org-structure-template-alist
               (list "sp" (concat "#+begin_src python"
                                  "?\n"
                                  "#+end_src")))

  ;; latex
  (setq org-latex-listings t)
  (add-to-list 'org-latex-packages-alist '("" "listings"))
  (add-to-list 'org-latex-packages-alist '("" "color"))
  (add-to-list 'org-latex-packages-alist '("" "tabularx")))
#+end_src
**** Package
#+begin_src emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :defines (org-habit-graph-column)
  :general
  (nmap :keymaps 'org-mode-map
    "<" 'org-metaleft
    ">" 'org-metaright
    "gh" 'outline-up-heading
    "gl" 'outline-next-visible-heading
    "gj" 'org-forward-heading-same-level
    "gk" 'org-backward-heading-same-level
    "gt" 'org-todo
    "ga" 'org-archive-subtree
    "M-l" 'org-metaright
    "M-h" 'org-metaleft
    "M-k" 'org-metaup
    "M-j" 'org-metadown
    "M-L" 'org-shiftmetaright
    "M-H" 'org-shiftmetaleft
    "M-K" 'org-shiftmetaup
    "M-J" 'org-shiftmetadown)
  (d/leader-keys
   "C"   'org-capture
   "bo"  'org-iswitchb
   "ao"  '(:ignore t :wk "org")
   "ao#" 'org-agenda-list-stuck-projects
   "ao/" 'org-occur-in-agenda-files
   "aoO" 'org-clock-out
   "aoa" 'org-agenda-list
   "aoe" 'org-store-agenda-views
   "aol" 'org-store-link
   "aom" 'org-store-tags-view
   "aoo" 'org-agenda
   "aos" 'org-search-view
   "aot" 'org-todo-list )
  :init
  (setq org-list-allow-alphabetical t)
  :config
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines))
  (require 'org-crypt)
  (org-crypt-use-before-save-magic)
  (require 'org-mobile))
#+end_src
**** Variables
#+begin_src emacs-lisp
(defvar d/org-prettify-alist
  (prettify-utils-generate
   ("TODO" "❯❯❯")
   ("READ" "❙❙❙")
   ("IN-PROGRESS" "○○○")
   ("WAITING" "￭￭￭")
   ("CANCELED" "✗✗✗")
   ("DONE" "✓✓✓")))
#+end_src
**** Functions
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (defmacro d/create-block-wrap (&rest blocktypes)
    `(progn
       ,@(cl-loop
          for type in blocktypes collect
          (let ((newfunc (intern
                          (concat "d/org-wrap-with-block-"
                                  (replace-regexp-in-string " " "-" type)))))
            `(defun ,newfunc ()
               (interactive)
               (backward-paragraph)
               (insert ,(format "\n#+begin_%s" type))
               (forward-paragraph)
               (insert ,(format "#+end_%s\n" (car (split-string type))))
               (backward-paragraph))))))

  (d/create-block-wrap
   "src"
   "src python"
   "src emacs-lisp"
   "export latex")

  (defmacro d/org-emphasize (&rest args)
    "Make functions for setting the emphasis in org mode"
    `(progn
       ,@(cl-loop for (name char) on args
                  by #'cddr collect
                  (let ((fname (intern (concat "d/org-" name))))
                    `(defun ,fname ()
                       (interactive)
                       (org-emphasize ,char))))))

  (d/org-emphasize
   "bold" ?*
   "italic" ?/
   "code" ?~
   "underline" ?_
   "verbatim" ?=
   "strike-through" ?+
   "clear" ? )

  (defun d/org-agenda-toggle-date (current-line)
    "Toggle `SCHEDULED' and `DEADLINE' tag in the capture buffer.

Source: https://git.io/vQK0I"
    (interactive "P")
    (save-excursion
      (let ((search-limit (if current-line
                              (line-end-position)
                            (point-max))))

        (if current-line (beginning-of-line)
          (goto-char (point-min)))
        (if (search-forward "DEADLINE:" search-limit t)
            (replace-match "SCHEDULED:")
          (and (search-forward "SCHEDULED:" search-limit t)
               (replace-match "DEADLINE:"))))))

  (defun d/org-insert-list-leader-or-self (char)
    "If on column 0, insert space-padded CHAR; otherwise insert CHAR.

This has the effect of automatically creating a properly indented list
leader; like hyphen, asterisk, or plus sign; without having to use
list-specific key maps.

Source: https://git.io/vQK0s"
    (if (= (current-column) 0)
        (insert (concat " " char " "))
      (insert char)))

  (defun d/org-swap-tags (tags)
    "Replace any tags on the current headline with TAGS.

The assumption is that TAGS will be a string conforming to Org Mode's
tag format specifications, or nil to remove all tags.

Source: https://git.io/vQKEE"
    (let ((old-tags (org-get-tags-string))
          (tags (if tags
                    (concat " " tags)
                  "")))
      (save-excursion
        (beginning-of-line)
        (re-search-forward
         (concat "[ \t]*" (regexp-quote old-tags) "[ \t]*$")
         (line-end-position) t)
        (replace-match tags)
        (org-set-tags t))))

  (defun d/org-set-tags (tag)
    "Add TAG if it is not in the list of tags, remove it otherwise.

TAG is chosen interactively from the global tags completion table.

Source: https://git.io/vQKEa"
    (interactive
     (list (let ((org-last-tags-completion-table
                  (if (derived-mode-p 'org-mode)
                      (org-uniquify
                       (delq nil (append (org-get-buffer-tags)
                                         (org-global-tags-completion-table))))
                    (org-global-tags-completion-table))))
             (completing-read
              "Tag: " 'org-tags-completion-function nil nil nil
              'org-tags-history))))
    (let* ((cur-list (org-get-tags))
           (new-tags (mapconcat 'identity
                                (if (member tag cur-list)
                                    (delete tag cur-list)
                                  (append cur-list (list tag)))
                                ":"))
           (new (if (> (length new-tags) 1) (concat " :" new-tags ":")
                  nil)))
      (d/org-swap-tags new)))

  (defun d/org-choose-bullet-type ()
    "Change the bullet type for org lists with a prompt."
    (interactive)
    (let ((char (read-char-choice
                 "Bullet type? (-|*|+|1|2|a|b|A|B): "
                 '(?* ?- ?+ ?1 ?2 ?a ?b ?A ?B))))
      (pcase char
        (?1 (org-cycle-list-bullet 3))
        (?2 (org-cycle-list-bullet 4))
        (?a (org-cycle-list-bullet 5))
        (?b (org-cycle-list-bullet 7))
        (?A (org-cycle-list-bullet 6))
        (?B (org-cycle-list-bullet 8))
        (_ (org-cycle-list-bullet (char-to-string char))))))

  (defun org-at-openable-item-p ()
    (when (eq major-mode 'org-mode)
      (let* ((context (org-element-lineage
                       (org-element-context)
                       '(clock footnote-definition footnote-reference headline
                               inlinetask link timestamp)
                       t))
             (type (org-element-type context)))
        (memq type '(footnote-definition
                     footnote-reference
                     headline inlinetask
                     link
                     timestamp)))))

  (defun d/org-hugo-export ()
    "Export current subheading to markdown using pandoc."
    (interactive)
    ;; Save cursor position
    (save-excursion
      ;; Go to top level heading for subtree
      (unless (eq (org-current-level) 1)
        (org-up-heading-all 10))
      ;; Set export format, pandoc options, post properties
      (let* ((org-pandoc-format 'markdown)
             (org-pandoc-options-for-markdown '((standalone . t)
                                                (atx-headers . t)
                                                (columns . 79)))
             (hl (org-element-at-point))
             (filename (org-element-property :EXPORT_FILE_NAME hl))
             (title (format "\"%s\"" (org-element-property :title hl)))
             (slug (format "\"%s\"" (org-element-property :SLUG hl)))
             (date (format "\"%s\"" (org-element-property :DATE hl)))
             (tags (org-get-tags-at))
             (categories
              (format "[\"%s\"]" (mapconcat 'identity tags "\",\""))))
        (if (string= (org-get-todo-state) "DRAFT")
            (message "Draft not exported")
          (progn
            ;; Make the export
            (org-export-to-file
                'pandoc
                (org-export-output-file-name
                 (concat (make-temp-name ".tmp") ".org") t)
              nil t nil nil nil
              (lambda (f)
                (org-pandoc-run-to-buffer-or-file f 'markdown t nil)))
            ;; Use advice-add to add advice to existing process sentinel
            ;; to modify file /after/ the export process has finished.
            (advice-add
             #'org-pandoc-sentinel
             :after
             `(lambda (process event)
                (with-temp-file ,filename
                  (insert-file-contents ,filename)
                  (goto-char (point-min))
                  ;; Remove default header
                  (re-search-forward "---\\(.\\|\n\\)+?---\n\n")
                  (replace-match "")
                  (goto-char (point-min))
                  ;; Insert new properties
                  (insert
                   (format
                    "---\ntitle: %s\nslug: %s\ndate: %s\ncategories: %s\n---\n\n"
                    ,title ,slug ,date ,categories))
                  ;; Demote headings and tweak code blocks
                  (dolist (reps '(("^#" . "##")
                                  ("``` {\\.\\(.+?\\)}" . "```\\1")))
                    (goto-char (point-min))
                    (while (re-search-forward (car reps) nil t)
                      (replace-match (cdr reps))))))
             '((name . "hugo-advice")))
            ;; We don't want our advice to stick around afterwards
            (advice-remove #'org-pandoc-sentinel 'hugo-advice)
            (when (string= (org-get-todo-state) "↑")
              (org-todo))))))))
#+end_src
**** Keyboard Macros
***** TODO Turn this into an elisp function
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (fset 'd/org-wrap-with-quote
        [?\{ ?i return ?# ?+ ?b ?e ?g ?i ?n ?_ ?q ?u ?o ?t ?e ?\C-/ ?\} ?i return
             up ?# ?+ ?e ?n ?d ?_ ?q ?u ?o ?t ?e ?\C-/ ?\{ ?j ?i ?  ?  ?\M-q
             ?\M-q ?\M-q ?\C-/]))
#+end_src
**** Bindings
#+begin_src emacs-lisp
(d/mode-leader-keys
 :keymaps 'org-mode-map
 "$"  'org-archive-subtree
 "'"  'org-edit-special
 "."  'org-time-stamp
 "/"  'org-sparse-tree
 ":"  'd/org-set-tags
 "-"  'org-decrypt-entry
 "A"  'org-archive-subtree
 "N"  'widen
 "P"  'org-set-property
 "R"  'org-refile
 "^"  'org-sort
 "a"  'org-agenda
 "c"  'org-capture
 "d"  'org-deadline
 "g"  'counsel-org-goto
 "G"  'counsel-org-goto-all
 "l"  'd/org-choose-bullet-type
 "n"  'org-narrow-to-subtree
 "s"  'org-schedule

 "i"  '(:ignore t :wk "insert")
 "ic" 'org-table-insert-column
 "ir" 'org-table-insert-row
 "il" 'org-insert-link
 "if" 'org-footnote-new
 "id" 'org-insert-drawer

 "e"  '(:ignore t :wk "eval/export")
 "ed" 'org-export-dispatch
 "eh" 'd/org-hugo-export
 "es" 'd/eval-surrounding-sexp
 "er" 'eval-region
 "eb" 'd/eval-buffer
 "ef" 'd/eval-defun

 "b"  'org-babel-tangle

 "x"  '(:ignore t :wk "text")
 "xb" 'd/org-bold
 "xi" 'd/org-italic
 "xc" 'd/org-code
 "xu" 'd/org-underline
 "xv" 'd/org-verbatim
 "xs" 'd/org-strike-through
 "xr" 'd/org-clear
 "xq" 'd/org-wrap-with-quote
 "xx" 'org-cut-special
 "xp" 'org-paste-special

 ;; tables
 "t"   '(:ignore t :wk "table")
 "ta"  'org-table-align
 "tb"  'org-table-blank-field
 "tc"  'org-table-convert
 "tdc" 'org-table-delete-column
 "tdr" 'org-table-kill-row
 "te"  'org-table-eval-formula
 "tE"  'org-table-export
 "th"  'org-table-previous-field
 "tH"  'org-table-move-column-left
 "tic" 'org-table-insert-column
 "tih" 'org-table-insert-hline
 "tiH" 'org-table-hline-and-move
 "tir" 'org-table-insert-row
 "tI"  'org-table-import
 "tj"  'org-table-next-row
 "tJ"  'org-table-move-row-down
 "tK"  'org-table-move-row-up
 "tl"  'org-table-next-field
 "tL"  'org-table-move-column-right
 "tn"  'org-table-create
 "tN"  'org-table-create-with-table.el
 "tr"  'org-table-recalculate
 "ts"  'org-table-sort-lines
 "ttf" 'org-table-toggle-formula-debugger
 "tto" 'org-table-toggle-coordinate-overlays
 "tw"  'org-table-wrap-region)

(with-eval-after-load 'org
  (d/mode-leader-keys
   :keymaps 'org-src-mode
   :definer 'minor-mode
   "'" 'org-edit-src-exit)

  (d/leader-keys
   :keymaps 'org-src-mode
   :definer 'minor-mode
   "fs" 'org-edit-src-save))
#+end_src
**** Setup
***** Agenda
#+begin_src emacs-lisp
(general-define-key :keymaps 'org-agenda-mode-map
  "j" 'org-agenda-next-line
  "k" 'org-agenda-previous-line
  "n" 'org-agenda-next-date-line
  "p" 'org-agenda-previous-date-line
  "c" 'org-agenda-capture
  "R" 'org-revert-all-org-buffers
  "RET" 'org-agenda-switch-to)

(with-eval-after-load 'org-agenda
  (setq org-habit-graph-column 50))

(d/setup-mode org-agenda
  (setq-local prettify-symbols-alist d/org-prettify-alist)
  (prettify-symbols-mode))

#+end_src
***** Capture
#+begin_src emacs-lisp
(imap :keymaps 'org-capture-mode-mop
  "C-d" 'd/org-agenda-toggle-date)
(nmap :keymaps 'org-capture-mode-map
  "C-d" 'd/org-agenda-toggle-date)
#+end_src
***** Org
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (dolist (char '("+" "-"))
    (define-key org-mode-map (kbd char)
      `(lambda ()
         (interactive)
         (d/org-insert-list-leader-or-self ,char))))
  (setq org-bullets-bullet-list '("•")))

(d/setup-mode org
  (setq-local prettify-symbols-alist d/org-prettify-alist)
  (prettify-symbols-mode)
  (org-bullets-mode 1)
  (goto-address-mode)
  (org-indent-mode))
#+end_src
*** [[https://github.com/abo-abo/hydra][hydra]]
#+begin_quote
  make Emacs bindings that stick around
#+end_quote
#+begin_src emacs-lisp
(use-package hydra
  :config)
#+end_src
*** [[https://github.com/bbatsov/crux][crux]]
#+begin_quote
  A Collection of Ridiculously Useful eXtensions for Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package crux
  :defer 5
  :general
  (d/leader-keys
   "TAB" 'crux-switch-to-previous-buffer
   "fd" 'crux-delete-file-and-buffer
   "fr" 'crux-rename-file-and-buffer
   "br" 'crux-sudo-edit )
  :commands (crux-with-region-or-line
             crux-with-region-or-buffer
             crux-switch-to-previous-buffer
             crux-rename-file-and-buffer)
  :config
  (crux-with-region-or-line eval-region)
  (crux-with-region-or-buffer indent-region)
  (crux-with-region-or-buffer untabify)
  (crux-with-region-or-buffer tabify)
  (crux-with-region-or-buffer fill-region))
#+end_src

*** [[https://github.com/company-mode/company-mode][company-mode]]
#+begin_quote
  Modular in-buffer completion framework for Emacs
#+end_quote
Supposedly better than autocomplete.
#+begin_src emacs-lisp
(use-package company
  :defer 5
  :general
  (:keymaps 'company-active-map
   [tab] 'company-complete-common-or-cycle)
  :init
  (setq company-idle-delay 0.3
        company-minimum-prefix-length 1
        company-selection-wrap-around t
        company-dabbrev-char-regexp "\\sw\\|\\s_\\|[-_]")
  :config
  (defun company-mode/backend-with-yas (backend)
    "Source: https://git.io/vQKE6"
    (if (and (listp backend) (member 'company-yasnippet backend))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))
  (setq company-backends (mapcar #'company-mode/backend-with-yas
                                 company-backends))
  (global-company-mode t))
#+end_src

*** [[https://github.com/justbur/emacs-which-key][emacs-which-key]]
#+begin_quote
  Emacs package that displays available keybindings in popup
#+end_quote
#+begin_src emacs-lisp
(use-package which-key
  :defer 10
  :general
  (d/leader-keys
   "hk" 'which-key-show-top-level)
  :config
  (which-key-mode)

  (defmacro d/declare-prefix (&rest body)
    (declare (indent defun))
    `(which-key-add-key-based-replacements
       ,@(cl-loop
          for (prefix name) on body
          by #'cddr
          while name
          append `(,(concat "SPC " prefix) ,name
                   ,(concat "C-SPC " prefix) ,name))))

  (defmacro d/declare-mode-prefix (modes &rest body)
    (declare (indent defun))
    (let ((modes (if (listp modes) modes (list modes))))
      `(progn
         ,@(cl-loop
            for mode in modes collect
            `(which-key-add-major-mode-key-based-replacements ',mode
               ,@(cl-loop
                  for (prefix name) on body
                  by #'cddr
                  while name
                  append `(,(concat ", " prefix) ,name
                           ,(concat "C-, " prefix) ,name)))))))

  (defmacro d/which-key-remove-prefix (&rest body)
    (declare (indent defun))
    `(progn
       ,@(cl-loop for regexp in body collect
                  `(push '((nil . ,(concat regexp "\\(.+\\)")) . (nil . "\\1"))
                         which-key-replacement-alist))))


  (d/declare-prefix
    "a"   "applications"
    "b"   "buffer"
    "f"   "file"
    "h"   "help"
    "hd"  "describe"
    "i"   "insert"
    "j"   "jump"
    "n"   "narrow/numbers"
    "q"   "quit"
    "s"   "search"
    "w"   "window"
    "xi"  "indent"
    "xl"  "lines"
    "SPC" "root")

  (d/declare-mode-prefix (emacs-lisp-mode lisp-interaction-mode)
    "e" "eval"
    "p" "pp")

  (setq which-key-sort-order 'which-key-key-order-alpha)
  (setq which-key-sort-uppercase-first nil)

  (d/which-key-remove-prefix
    "avy-"
    "counsel-"
    "counsel-projectile-"
    "crux-"
    "customize-"
    "d/"
    "evil-mc-"
    "evilnc-"
    "eyebrowse-"
    "ivy-"
    "magit-"
    "projectile-"))
#+end_src

*** [[https://github.com/milkypostman/powerline][powerline]]
#+begin_src emacs-lisp
(use-package powerline)
#+end_src
** Bindings
*** Ret
#+begin_src emacs-lisp
(mmap "RET"
      (general-predicate-dispatch nil
        (thing-at-point 'url) 'goto-address-at-point
        (d/fbound-and-true-p org-at-openable-item-p) 'org-open-at-point
        (d/fbound-and-true-p org-at-item-checkbox-p) 'org-toggle-checkbox
        (d/fbound-and-true-p org-in-src-block-p) 'org-babel-execute-src-block))
#+end_src
*** Leader
#+begin_src emacs-lisp
(d/leader-keys
 "qf" 'delete-frame
 "qq" 'save-buffers-kill-emacs

 "&"   'async-shell-command
 ":"   'eval-expression
 "r"   'repeat
 "u"   'universal-argument)
#+end_src
*** Minibuffer
I like to use ~C-/~ as Evil/Vim's ~C-[~ since I use a Dvorak keyboard, so I like to
also use these keys to quit out of the minibuffer.
#+begin_src emacs-lisp
(general-define-key
 :keymaps '(minibuffer-local-map
            minibuffer-local-ns-map
            minibuffer-local-completion-map
            minibuffer-local-must-match-map
            minibuffer-local-isearch-map)
 [?\C-/]  'minibuffer-keyboard-quit
 [?\C-_]  'minibuffer-keyboard-quit
 [escape] 'minibuffer-keyboard-quit)

#+end_src
*** universal argument
#+begin_src emacs-lisp
(general-define-key
 :keymaps 'universal-argument-map
 "SPC u" 'universal-argument-more)
#+end_src
*** macOS fullscreen
A convenient full-screen binding I'm used to from iTerm.
#+begin_src emacs-lisp
(when (eq system-type 'darwin)
  (global-set-key (kbd "<s-return>") #'toggle-frame-fullscreen))
#+end_src
* Help
** Defaults
#+begin_src emacs-lisp
(add-hook 'help-mode-hook #'goto-address-mode)
#+end_src
** Packages
*** [[https://github.com/abo-abo/define-word][define-word]]
#+begin_quote
  Display the definition of word at point in Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package define-word
  :commands d/define-word
  :general
  (d/leader-keys "sw" 'd/define-word)
  :config
  (defun d/define-word (&optional word)
    (interactive)
    (if word
        (define-word word)
      (let ((word (read-string
                   (concat "Define word ["
                           (if (region-active-p)
                               (buffer-substring (region-beginning) (region-end))
                             (thing-at-point 'word)) "]: ")
                   nil nil
                   (thing-at-point 'word))))
        (define-word word)))))
#+end_src
*** [[https://github.com/xuchunyang/devdocs.el][devdocs]]
#+begin_quote
  Emacs package allowing you to easily search the DevDocs documentation
#+end_quote
#+begin_src emacs-lisp
(use-package devdocs
  :general
  (d/leader-keys "hdd"  'devdocs-search))
#+end_src
*** [[https://github.com/Malabarba/emacs-google-this][emacs-google-this]]
#+begin_quote
  A set of emacs functions and bindings to google under point.
#+end_quote
#+begin_src emacs-lisp
(use-package google-this
  :commands ddg-this-search
  :general
  (d/leader-keys
   "sd" 'ddg-this-search
   "sg" 'google-this-search)
  :config
  (defun ddg-this-parse-and-search-string (text prefix &optional search-url)
    "Convert illegal characters in TEXT to their %XX versions, and then duckduckgo.
PREFIX determines quoting.

Don't call this function directly, it could change depending on
version. Use `ddg-this-string' instead."
    (let* (;; Create the url
           (query-string (google-this--maybe-wrap-in-quotes text prefix))
           ;; Perform the actual search.
           (browse-result (funcall google-this-browse-url-function
                                   (format (or search-url "https://duckduckgo.com/?q=%s")
                                           (url-hexify-string query-string)))))
      ;; Maybe suspend emacs.
      (when google-this-suspend-after-search (suspend-frame))
      ;; Return what browse-url returned (very usefull for tests).
      browse-result))

  (defun ddg-this-pick-term (prefix)
    "Decide what \"this\" and return it.
PREFIX determines quoting."
    (let* ((term (if (region-active-p)
                     (buffer-substring (region-beginning) (region-end))
                   (or (thing-at-point 'symbol)
                       (thing-at-point 'word)
                       (buffer-substring (line-beginning-position)
                                         (line-end-position)))))
           (term (read-string (concat "DuckDuckGo [" term "]: ") nil nil term)))
      term))

  (defun ddg-this-search (prefix &optional search-string)
    "Write and do a DuckDuckGo search.
Interactively PREFIX determines quoting.
Non-interactively SEARCH-STRING is the string to search."
    (interactive "P")
    (let* ((term (ddg-this-pick-term prefix)))
      (if (stringp term)
          (ddg-this-parse-and-search-string term prefix search-string)
        (message "[google-this-string] Empty query.")))))
#+end_src
*** [[https://github.com/atykhonov/google-translate][google-translate]]
#+begin_quote
  Emacs interface to Google Translate
#+end_quote
#+begin_src emacs-lisp
(use-package google-translate)
#+end_src
*** [[https://www.emacswiki.org/emacs/info+.el][info+]]
#+begin_quote
  Extensions to info.el.
#+end_quote
#+begin_src emacs-lisp
(use-package info+)
#+end_src
*** [[https://github.com/laynor/melpa-upstream-visit][melpa-upstream-visit]]
#+begin_quote
  A set of kludges to visit the homepage of a package hosted on elpa.
#+end_quote
#+begin_src emacs-lisp
(use-package melpa-upstream-visit
  :config
  (setq muv:completing-read-function 'ivy-completing-read))
#+end_src
*** [[https://github.com/vermiculus/sx.el/][sx]]
#+begin_quote
  Stack Exchange for Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package sx)
#+end_src
*** [[https://github.com/kuanyui/tldr.el][tldr]]
#+begin_src emacs-lisp
(use-package tldr
  :general
  (d/leader-keys "ht" 'tldr)
  (nmap :keymaps 'tldr-mode-map
    "q" 'quit-window))
#+end_src
** Bindings
Leader bindings
#+begin_src emacs-lisp
(d/leader-keys
 "hc"  '(:ignore t :wk "customize")
 "hca" 'customize-apropos
 "hcf" 'customize-face-other-window
 "hcg" 'customize-group-other-window
 "hcm" 'customize-mode
 "hcv" 'customize-variable-other-window
 "hdV" 'apropos-value
 "hdc" 'describe-char
 "hdk" 'describe-key
 "hdm" 'describe-mode
 "hdp" 'describe-package
 "hds" 'describe-symbol
 "hdt" 'describe-theme
 "hm"  'man
 "hn"  'view-emacs-news
 "hs"  'system-name
 "hv"  'version)
#+end_src
* Files and Buffers
** Defaults
If a frame is already open, use it to open files.
#+begin_src emacs-lisp
(setq ns-pop-up-frames nil)
#+end_src
Follow symlinks to files under version control because why would I not.
#+begin_src emacs-lisp
(setq vc-follow-symlinks t)
#+end_src
Select the help window when opening it (I like this so I can quickly ~q~ out).
#+begin_src emacs-lisp
(setq help-window-select t)
#+end_src
Clean up whitespace before saving files.
#+begin_src emacs-lisp
(add-hook 'before-save-hook #'whitespace-cleanup)
#+end_src
Do dired actions (meaning file copying/deleting and the like) asynchronously.
Which means it's less likely to block up emacs. Or something.
#+begin_src emacs-lisp
(with-eval-after-load 'dired-async
  (autoload 'dired-async-mode "dired-async.el" nil t)
  (dired-async-mode 1))
#+end_src
** Packages
*** [[https://github.com/lunaryorn/osx-trash.el][osx-trash]]
#+begin_quote
  Make Emacs' delete-by-moving-to-trash do what you expect it to do on OS X.
#+end_quote
#+begin_src emacs-lisp
(use-package osx-trash
  :defer 5
  :if (eq system-type 'darwin)
  :config
  (osx-trash-setup)
  (setq delete-by-moving-to-trash t))
#+end_src

*** [[https://www.emacswiki.org/emacs/dired%252b.el][dired+]]
#+begin_src emacs-lisp
(use-package dired+
  :after ranger)
#+end_src

*** [[https://github.com/ralesi/ranger.el][ranger]]
#+begin_quote
  Bringing the goodness of ranger to dired!
#+end_quote
#+begin_src emacs-lisp
(use-package ranger
  :commands d/deer
  :general
  (d/leader-keys
   "ad" 'd/deer
   "ar" 'ranger)
  :init
  (require 'bookmark)
  :config
  (ranger-override-dired-mode t)
  (setq ranger-show-literal nil
        ranger-show-hidden nil
        ranger-cleanup-eagerly t
        ranger-parent-depth 0)

  (defun d/ranger-travel ()
    "Use ivy for ranger-travel instead."
    (interactive)
    (cond
     ((featurep 'ivy)
      (counsel-find-file default-directory))
     (t (call-interactively #'ido-find-file))))

  (advice-add #'ranger-travel
              :override #'d/ranger-travel)

  (defun d/deer (arg)
    (interactive "P")
    (if arg
        (deer)
      (deer-jump-other-window))))
#+end_src

*** [[https://github.com/bbatsov/projectile][projectile]]
#+begin_quote
  Project Interaction Library for Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package projectile
  :general
  (d/leader-keys
   "p"  '(:ignore t :wk "project")
   "pg" 'projectile-vc
   "pk" 'projectile-kill-buffers
   "po" 'projectile-multi-occur
   "pr" 'projectil-recentf)
  :config
  (setq projectile-globally-ignored-files '("TAGS" ".DS_Store")
        projectile-ignored-projects '("/usr/local"))
  (projectile-mode))
#+end_src

*** [[https://github.com/ericdanan/counsel-projectile][counsel-projectile]]
#+begin_src emacs-lisp
(use-package counsel-projectile
  :commands d/project-find-file
  :general
  (d/leader-keys
   "pb" 'counsel-projectile-switch-to-buffer
   "pd" 'counsel-projectile-find-dir
   "pf" 'counsel-projectile-find-file
   "pp" 'counsel-projectile
   "ps" 'counsel-projectile-switch-project)
  :config
  (defun d/project-find-file ()
    (interactive)
    (condition-case nil
        (counsel-git)
      (error (counsel-projectile-find-file)))))
#+end_src

*** [[https://github.com/abo-abo/headlong][headlong]]
#+begin_src emacs-lisp
(use-package headlong
  :general
  (d/leader-keys "fB" 'headlong-bookmark-jump-other
                     "fb" 'headlong-bookmark-jump)
  :config
  (bookmark-maybe-load-default-file))
#+end_src

** Functions
*** File Manipulation
#+begin_src emacs-lisp
(defun d/copy-file ()
  "Copy file to another location.

Source: https://git.io/vQKES"
  (interactive)
  (call-interactively #'write-file))

(defun d/safe-erase-buffer ()
  "Prompt before erasing buffer.
Source: https://git.io/vQKEd"
  (interactive)
  (if (y-or-n-p (format "Erase content of buffer %s ? " (current-buffer)))
      (progn
        (erase-buffer)
        (message "Buffer erased."))
    (message "erase-buffer cancelled")))

(defun d/download-file ()
  "Download a file from url to specified path."
  (interactive)
  (let* ((file-url (read-from-minibuffer "URL: "))
         (file-name
          (read-from-minibuffer "File : "
                                (concat default-directory
                                        (file-name-nondirectory file-url)))))
    (url-copy-file file-url file-name)))
#+end_src
*** Switching
#+begin_src emacs-lisp
(defun d/switch-to-scratch ()
  "Switch to scratch buffer."
  (interactive)
  (switch-to-buffer "*scratch*"))

(defun d/switch-to-star ()
  "Switch to '*' buffers."
  (interactive)
  (let ((ivy-initial-inputs-alist '((ivy-switch-buffer . "^*"))))
    (ivy-switch-buffer)))

(defun d/switch-to-customize ()
  "Switch to \"Customize\" buffers."
  (interactive)
  (let ((ivy-initial-inputs-alist '((ivy-switch-buffer . "^*customize "))))
    (ivy-switch-buffer)))

(defun d/switch-to-messages ()
  "Switch to *Messages* buffer."
  (interactive)
  (switch-to-buffer "*Messages*"))
#+end_src
*** Narrowing
#+begin_src emacs-lisp
(defun d/narrow-and-set-normal ()
  "Narrow to the region and, if in a visual mode, set normal mode.

Source: https://git.io/vQKEx"
  (interactive)
  (narrow-to-region (region-beginning) (region-end))
  (if (string= evil-state "visual")
      (progn (evil-normal-state nil)
             (evil-goto-first-line))))

(defun d/narrow-to-region-or-subtree ()
  "Narrow to a region, if set, otherwise to an Org subtree, if present.

Source: https://git.io/vQKuf"
  (interactive)
  (if (and mark-active
           (not (= (region-beginning) (region-end))))
      (d/narrow-and-set-normal)
    (if (derived-mode-p 'org-mode)
        (org-narrow-to-subtree))))

(defun d/narrow-dwim ()
  "Narrow to a thing or widen based on context.
Attempts to follow the Do What I Mean philosophy.

Source: https://git.io/vQKuU"
  (interactive)
  (if (buffer-narrowed-p)
      (widen)
    (d/narrow-to-region-or-subtree)))
#+end_src
** Bindings
#+begin_src emacs-lisp
(d/leader-keys
 "b*"  'd/switch-to-star
 "bC"  'd/switch-to-customize
 "bK"  'kill-buffer
 "bM"  'd/switch-to-messages
 "bR"  'revert-buffer
 "bS"  'd/switch-to-scratch
 "bc"  'clone-indirect-buffer-other-window
 "be"  'd/safe-erase-buffer
 "bi"  'ibuffer
 "bk"  'kill-this-buffer
 "bm"  'kill-matching-buffers
 "bv"  'view-mode

 "fc"  'd/copy-file
 "fs"  'save-buffer

 "nf"  'narrow-to-defun
 "nn"  'd/narrow-dwim
 "np"  'narrow-to-page
 "nr"  'narrow-to-region)
#+end_src
* Editing
** Defaults
Text-mode is nicer than fundamental-mode, or so I hear.
#+begin_src emacs-lisp
(setq-default major-mode 'text-mode)
#+end_src
Fill column default, and use auto-fill for text-mode (and derived modes, such
as org-mode, markdown, etc.).
#+begin_src emacs-lisp
(setq-default fill-column 79)
(add-hook 'text-mode-hook 'auto-fill-mode)
#+end_src
TeX input is /really/ useful for inputing special characters. Setting it as
default makes it quickly available with ~C-\~, or ~toggle-input-method~.

This way, when you need to input a greek letter or an em-dash or something,
type ~C-\~, use latex input, and see the automagic replacement happen in all its
glory.
#+begin_src emacs-lisp
(setq default-input-method "TeX")
#+end_src
Who uses double spaces between sentences?
#+begin_src emacs-lisp
(setq sentence-end-double-space nil)
#+end_src
Dear god I hate tabs. Also, four spaces is a good indentation default.
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil
              tab-width 4)
#+end_src
** Packages
*** [[https://github.com/alpha22jp/atomic-chrome][atomic-chrome]]
#+begin_quote
  Edit text area on Chrome with Emacs using Atomic Chrome
#+end_quote
#+begin_src emacs-lisp
(use-package atomic-chrome
  :defer 10
  :config
  (unless atomic-chrome-server-atomic-chrome
    (atomic-chrome-start-server))
  (setq atomic-chrome-buffer-open-style 'frame))
#+end_src
*** [[https://github.com/abo-abo/auto-yasnippet][auto-yasnippet]]
#+begin_src emacs-lisp
(use-package auto-yasnippet)
#+end_src
*** [[https://github.com/gabesoft/evil-mc][evil-mc]]
#+begin_src emacs-lisp
(use-package evil-mc
  :general
  (nmap
   "gr"  '(:ignore t :wk "mc")
   "grm" 'evil-mc-make-all-cursors
   "gru" 'evil-mc-undo-all-cursors
   "grs" 'evil-mc-pause-cursors
   "grr" 'evil-mc-resume-cursors
   "grf" 'evil-mc-make-and-goto-first-cursor
   "grl" 'evil-mc-make-and-goto-last-cursor
   "grh" 'evil-mc-make-cursor-here
   "grj" 'evil-mc-make-cursor-move-next-line
   "grk" 'evil-mc-make-cursor-move-prev-line
   "M-n" 'evil-mc-skip-and-goto-next-cursor
   "grN" 'evil-mc-make-and-goto-next-cursor
   "M-p" 'evil-mc-skip-and-goto-prev-cursor
   "grP" 'evil-mc-make-and-goto-prev-cursor
   "C-n" 'evil-mc-skip-and-goto-next-match
   "grn" 'evil-mc-make-and-goto-next-match
   "C-p" 'evil-mc-skip-and-goto-prev-match
   "grp" 'evil-mc-make-and-goto-prev-match)
  :init
  (setq evil-mc-key-map nil)
  :config
  (global-evil-mc-mode)
  (push 'evil-smartparens-mode evil-mc-incompatible-minor-modes)
  (push 'fci-mode evil-mc-incompatible-minor-modes))
#+end_src
*** [[https://github.com/hlissner/evil-multiedit][evil-multiedit]]
#+begin_quote
  Multiple cursors for evil-mode, based on iedit
#+end_quote
#+begin_src emacs-lisp
(use-package evil-multiedit
  :config
  (evil-ex-define-cmd "ie[dit]" 'evil-multiedit-ex-match))
#+end_src
*** [[https://www.emacswiki.org/emacs/FlySpell][flyspell]]
Flyspell spell-checking and ivy integration with [[https://github.com/d12frosted/flyspell-correct][d12frosted/flyspell-correct]]
#+begin_src emacs-lisp
(use-package flyspell
  :config
  (defun d/flyspell-correct-next ()
    (interactive "p")
    (flyspell-goto-next-error)
    (flyspell-auto-correct-word))

  (defun d/flyspell-add-to-dictionary ()
    "Add word at point to flyspell dictionary at `/Users/d/.ispell_english'.

Source: http://tinyurl.com/k8g9sex"
    (interactive)
    (let ((current-location (point))
          (word (flyspell-get-word)))
      (when (consp word)
        (flyspell-do-correct 'save
                             nil
                             (car word)
                             current-location
                             (cl-caddr word)
                             (cl-caddr word)
                             current-location)))))

(use-package flyspell-correct-ivy
  :after flyspell)
#+end_src
*** [[https://github.com/syohex/emacs-fontawesome][fontawesome]]
#+begin_src emacs-lisp
(use-package fontawesome)
#+end_src
*** [[https://github.com/nflath/hungry-delete][hungry-delete]]
#+begin_src emacs-lisp
(use-package hungry-delete
  :defer 5
  :config
  (global-hungry-delete-mode))
#+end_src
*** [[https://github.com/Fuco1/smartparens][smartparens]]
#+begin_quote
  Minor mode for Emacs that deals with parens pairs and tries to be smart about
  it.
#+end_quote
#+begin_src emacs-lisp
(use-package smartparens
  :defer 5
  :config
  (require 'smartparens-config)
  (smartparens-global-mode)
  (show-smartparens-global-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'smartparens-strict-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'show-smartparens-mode)
  (let ((modes '(text-mode
                 org-mode
                 markdown-mode
                 minibuffer-inactive-mode
                 html-mode)))
    (sp-local-pair modes "'" nil :actions nil)
    (sp-local-pair modes "`" nil :actions nil))

  (defmacro d/sp-wrap-with (&rest args)
    "Make function(s) for wrapping with character using `sp-wrap-with-pair'"
    `(progn
       ,@(cl-loop for (char-name char) on args
                  by #'cddr collect
                  (let ((fname (intern (concat "d/sp-wrap-with-" char-name))))
                    `(defun ,fname (&optional arg)
                       (interactive "P")
                       (sp-wrap-with-pair ,char))))))

  (d/sp-wrap-with
   "paren" "("
   "curly" "{"
   "double-quote" "\""
   "single-quote" "'"))

(use-package evil-smartparens
  :after smartparens
  :config
  (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))
#+end_src
*** [[https://www.emacswiki.org/emacs/UndoTree][undo-tree]]
Kind of makes undo's like git. Or Vim, apparently, if you're into that.
#+begin_src emacs-lisp
(use-package undo-tree
  :general
  (d/leader-keys "au" 'undo-tree-visualize)
  :config
  (setq undo-tree-visualizer-timestamps t))
#+end_src
*** [[https://github.com/purcell/unfill][unfill]]
#+begin_src emacs-lisp
(use-package unfill
  :general
  (d/leader-keys "xq" 'unfill-toggle)
  ([remap fill-paragraph] 'unfill-toggle))
#+end_src
*** [[https://github.com/joaotavora/yasnippet][yasnippet]]
#+begin_quote
  A template system for Emacs
#+end_quote
Freakin yasnippet. It's the best.
#+begin_src emacs-lisp
(use-package yasnippet
  :defer 5
  :general (d/leader-keys "iy" 'yas-insert-snippet)
  :config
  (yas-global-mode 1))
#+end_src
**** [[https://github.com/haskell/haskell-snippets][haskell-snippets]]
#+begin_src emacs-lisp
(use-package haskell-snippets)
#+end_src
** Functions
*** Move text
#+begin_src emacs-lisp
(defun d/transpose-chars (arg)
  "Move character at point forward one character.
With prefix arg ARG, effect is to take character at point
and drag it forward past ARG other characters (backward if ARG negative)."
  (interactive "P")
  (forward-char)
  (if arg
      (transpose-chars arg)
    (transpose-chars 1))
  (backward-char))

(defun d/backward-transpose-chars (arg)
  "Move character at point backward one character.
With prefix arg ARG, effect is to take character at point
and drag it backward past ARG other characters (backward if ARG negative)."
  (interactive "P")
  (forward-char)
  (if arg
      (transpose-chars (- arg))
    (transpose-chars -1))
  (backward-char))

(defun d/backward-transpose-words (arg)
  "Interchange words around point, leaving point at end of them.
With prefix arg ARG, effect is to take word before or around point
and drag it forward past ARG other words (backward if ARG negative).
If ARG is zero, the words around or after point and around or after mark
are interchanged."
  (interactive "P")
  (if arg
      (transpose-words (- arg))
    (transpose-words -1)))

(defun d/move-line-or-region (arg)
  "Move line or region down one one line.
With prefix arg ARG, effect is to take line at point and
drag it down past ARG other lines (up if ARG negative)."
  (interactive "P")
  (if (or (not arg) (>= arg 0))
      (let ((reg-or-lin (if (region-active-p) "'>" "."))
            (reactivate-region (if (region-active-p) "gv=gv" ""))
            (num (if arg arg 1)))
        (execute-kbd-macro
         (concat ":m" reg-or-lin "+" (number-to-string num) (kbd "RET") reactivate-region)))
    (d/backward-move-line-or-region (- arg))))

(defun d/backward-move-line-or-region (arg)
  "Move line or region up one one line.
With prefix arg ARG, effect is to take line at point and
drag it up past ARG other lines (down if ARG negative)."
  (interactive "P")
  (if (or (not arg) (>= arg 0))
      (let ((reg-or-lin (if (region-active-p) "'<" "."))
            (reactivate-region (if (region-active-p) "gv=gv" ""))
            (num (if arg (+ arg 1) 2)))
        (execute-kbd-macro
         (concat ":m" reg-or-lin "-" (number-to-string num) (kbd "RET") reactivate-region)))
    (d/move-line-or-region (- arg))))

#+end_src
*** Align
#+begin_src emacs-lisp
(defun d/align-repeat (start end regexp &optional justify-right after)
  "Repeat alignment with respect to the given regular expression.

If JUSTIFY-RIGHT is non nil justify to the right instead of the
left. If AFTER is non-nil, add whitespace to the left instead of
the right.

Source: https://git.io/vQKul"
  (interactive "r\nsAlign regexp: ")
  (let* ((ws-regexp (if (string-empty-p regexp)
                        "\\(\\s-+\\)"
                      "\\(\\s-*\\)"))
         (complete-regexp (if after
                              (concat regexp ws-regexp)
                            (concat ws-regexp regexp)))
         (group (if justify-right -1 1)))
    (message "%S" complete-regexp)
    (align-regexp start end complete-regexp group 1 t)))

(defmacro d/create-align-repeat-x (&rest args)
  "Create an alignment function given name and alignment regexp.

Source: https://git.io/vQKu4"
  `(progn
     ,@(cl-loop
        for (name regexp justify-right default-after) on args
        by #'cddddr collect
        (let ((new-func (intern (concat "d/align-repeat-" name))))
          `(defun ,new-func (start end switch)
             (interactive "r\nP")
             (let ((after (not (eq (if switch t nil) (if ,default-after t nil)))))
               (d/align-repeat start end ,regexp ,justify-right after)))))))

(d/create-align-repeat-x
 "comma" "," nil t
 "semicolon" ";" nil t
 "colon" ":" nil t
 "equal" "=" nil nil
 "math-oper" "[+\\-*/]" nil nil
 "ampersand" "&" nil nil
 "bar" "|" nil nil
 "left-paren" "(" nil nil
 "right-paren" ")" t nil
 "backslash" "\\\\" nil nil
 "single-quote" "'" nil nil)

(defun d/align-repeat-decimal (start end)
  "Align a table of numbers on decimal points and dollar signs (both optional).

Source: https://git.io/vQKu2"
  (interactive "r")
  (require 'align)
  (align-region start end nil
                '((nil (regexp . "\\([\t ]*\\)\\$?\\([\t ]+[0-9]+\\)\\.?")
                       (repeat . t)
                       (group 1 2)
                       (spacing 1 1)
                       (justify nil t)))
                nil))


#+end_src
*** Justify
#+begin_src emacs-lisp
(defmacro d/create-justify-x (&rest types)
  "Create justification function(s), one per given TYPE."
  `(progn
     ,@(cl-loop
        for type in types collect
        (let ((func-name (intern (concat "d/justify-" type)))
              (current-type type))
          `(defun ,func-name ()
             (interactive)
             (if (region-active-p)
                 (set-justification (region-beginning)
                                    (region-end)
                                    (intern ,current-type))
               (set-justification (line-beginning-position)
                                  (line-end-position)
                                  (intern ,current-type))))))))

(d/create-justify-x
 "left"
 "right"
 "full"
 "center"
 "none")
#+end_src

*** Paragraph
#+begin_src emacs-lisp
(defun d/paragraphize ()
  "Remove newlines from region."
  (interactive)
  (if (region-active-p)
      (flush-lines "^$" (region-beginning) (region-end))
    (message "No region active.")))
#+end_src
*** Url
#+begin_src emacs-lisp
(defun d/shorten-url-at-point ()
  "Shorten the url at point using the github url shortener or the TinyURL api.

Source: http://tinyurl.com/l8z7vph"
  (interactive)
  (if (thing-at-point 'url)
      (let* ((long-url (thing-at-point 'url))
             (short-url
              (cond ((save-match-data
                       (string-match "https://\\(github.com\\|gist.github.com\\)" long-url))
                     (let ((info (shell-command-to-string
                                  (format "curl -i \"https://git.io\" -F \"url=%s\""
                                          long-url))))
                       (save-match-data
                         (and (string-match "Location: \\(.*?\\)" info)
                              (match-string 1 info)))))
                    (t
                     (shell-command-to-string
                      (format "curl -s \"http://tinyurl.com/api-create.php?url=%s\""
                              (url-hexify-string long-url))))))
             (bounds (bounds-of-thing-at-point 'url)))
        (kill-region (car bounds) (cdr bounds))
        (insert short-url))
    (error "No url at point.")))

(defun d/expand-url-at-point ()
  (interactive)
  (if (thing-at-point 'url)
      (let* ((short-url (thing-at-point 'url))
             (long-url (shell-command-to-string (format "curl -Ls -o /dev/null -w '%%{url_effective}' \"%s\""
                                                        short-url)))
             (bounds (bounds-of-thing-at-point 'url)))
        (kill-region (car bounds) (cdr bounds))
        (insert long-url))
    (error "No url at point.")))
#+end_src
** Hydras
*** Multiedit
#+begin_src emacs-lisp
(with-eval-after-load 'hydra
  (defhydra h/multiedit (:hint nil)
    "
multiedit:
_r_estore  _t_oggle/restrict  match _a_ll
_n_ext     match and _N_ext
_p_rev     match and _P_rev
"
    ("a"   evil-multiedit-match-all)
    ("n"   evil-multiedit-next)
    ("p"   evil-multiedit-prev)
    ("r"   evil-multiedit-restore)
    ("t"   evil-multiedit-toggle-or-restrict-region)
    ("N"   evil-multiedit-match-and-next)
    ("P"   evil-multiedit-match-and-prev)
    ("q"   evil-multiedit-abort :exit t)))
#+end_src
*** Transpose
#+begin_src emacs-lisp
(with-eval-after-load 'hydra
  (defhydra h/transpose ()
    "transpose"
    ("c" d/transpose-chars "char")
    ("C" d/backward-transpose-chars "backward char")
    ("j" d/move-line-or-region "line/region")
    ("k" d/backward-move-line-or-region "backward line/region")
    ("w" transpose-words "word")
    ("W" d/backward-transpose-words "backward word")
    ("s" transpose-sexps "sexp" :exit t)))
#+end_src
*** Justify
#+begin_src emacs-lisp
(with-eval-after-load 'hydra
  (defhydra h/justify (:exit t)
    "justify"
    ("r" d/justify-right "right")
    ("l" d/justify-left "left")
    ("c" d/justify-center "center")
    ("f" d/justify-full "full")
    ("n" d/justify-none "none")))
#+end_src
*** Smartparens
#+begin_src emacs-lisp
(with-eval-after-load 'hydra
  (defhydra h/smartparens (:hint nil)
    "
smartparens:
_r_ewrap  _s_lurp             _(_
_u_nwrap  _S_lurp (back)   _[_ wrap _{_
        _b_arf             _'_  _\"_
        _B_arf (back)
"
    ("r"  sp-rewrap-sexp)
    ("u"  sp-unwrap-sexp)
    ("b"  sp-forward-barf-sexp)
    ("B"  sp-backward-barf-sexp)
    ("s"  sp-forward-slurp-sexp)
    ("S"  sp-backward-slurp-sexp)
    ("("  d/sp-wrap-with-paren)
    ("["  d/sp-wrap-with-bracket)
    ("{"  d/sp-wrap-with-curly)
    ("\"" d/sp-wrap-with-quote2)
    ("'"  d/sp-wrap-with-quote)))
#+end_src
*** Evil-numbers
#+begin_src emacs-lisp
(with-eval-after-load 'hydra
  (defhydra h/numbers ()
    "evil-numbers"
    ("="  evil-numbers/inc-at-pt "inc")
    ("-" evil-numbers/dec-at-pt "dec")))
#+end_src
*** Spelling
#+begin_src emacs-lisp
(with-eval-after-load 'hydra
  (defhydra h/flyspell (:pre (require 'flyspell))
    "flyspell"
    ("b" flyspell-buffer "buffer")
    ("j" flyspell-goto-next-error "next")
    ("a" d/flyspell-add-to-dictionary "add to dict")
    ("n" flyspell-correct-next-word-generic "correct next generic")
    ("p" flyspell-correct-previous-word-generic "correct prev generic")
    ("N" d/flyspell-correct-next "correct next")
    ("P" flyspell-auto-correct-previous-word "correct pref")))
#+end_src
** Bindings
Make indent-rigidly more vimmy.
#+begin_src emacs-lisp
(general-define-key :keymaps 'indent-rigidly-map
  "h" 'indent-rigidly-left
  "l" 'indent-rigidly-right
  "H" 'indent-rigidly-left-to-tab-stop
  "L" 'indent-rigidly-right-to-tab-stop)
#+end_src
Leader keys
#+begin_src emacs-lisp
(d/leader-keys
 "n-"  'h/numbers/evil-numbers/dec-at-pt
 "n="  'h/numbers/evil-numbers/inc-at-pt

 "x"   '(:ignore t :wk "text")
 "xa"  '(:ignore t :wk "align")
 "xa&" 'd/align-repeat-ampersand
 "xa'" 'd/align-repeat-single-quote
 "xa(" 'd/align-repeat-left-paren
 "xa)" 'd/align-repeat-right-paren
 "xa," 'd/align-repeat-comma
 "xa." 'd/align-repeat-decimal
 "xa:" 'd/align-repeat-colon
 "xa;" 'd/align-repeat-semicolon
 "xa=" 'd/align-repeat-equal
 "xaa" 'align
 "xac" 'align-current
 "xam" 'd/align-repeat-math-oper
 "xar" 'align-regexp
 "xar" 'd/align-repeat
 "xa|" 'd/align-repeat-bar

 "xib" 'indent-buffer
 "xii" 'indent-rigidly
 "xir" 'indent-region
 "xj"  '(:command h/justify/body :wk "justify")
 "xls" 'sort-lines
 "xt"  '(:command h/transpose/body :wk "transpose")
 "xc" 'count-words

 "xm"  '(:command h/multiedit/body :wk "multiedit")

 "xp"  '(:command h/smartparens/body :wk "smartparens")

 "xs"  'd/shorten-url-at-point
 "xe"  'd/expand-url-at-point

 "im"  'insert-kbd-macro)
#+end_src
* Navigation
** Packages
*** [[https://github.com/abo-abo/ace-window][ace-window]]
#+begin_quote
  Quickly switch windows in Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package ace-window
  :general
  (d/leader-keys
   "\\" 'ace-window
   "wD" 'ace-delete-window
   "wS" 'ace-swap-window
   "wa" 'ace-window)
  :config
  (setq aw-keys (string-to-list "aoeuidhtns")))
#+end_src
*** [[https://github.com/abo-abo/avy][avy]]
#+begin_quote
  Jump to things in Emacs tree-style
#+end_quote
#+begin_src emacs-lisp
(use-package avy
  :general
  (d/leader-keys
   "jc" 'avy-goto-char-2
   "jl" 'avy-goto-line
   "jw" 'avy-goto-word-1)
  :config
  (setq avy-keys (string-to-list "aoeuidhtns")))
#+end_src
*** [[https://github.com/wasamasa/eyebrowse][eyebrowse]]
#+begin_src emacs-lisp
(use-package eyebrowse
  :commands (eyebrowse-switch-to-window-config
             eyebrowse-next-window-config
             eyebrowse-prev-window-config
             eyebrowse-rename-window-config
             eyebrowse-close-window-connfig
             eyebrowse-close-window-config
             eyebrowse-last-window-config
             eyebrowse-switch-to-window-config-0
             eyebrowse-switch-to-window-config-1
             eyebrowse-switch-to-window-config-2
             eyebrowse-switch-to-window-config-3
             eyebrowse-switch-to-window-config-4
             eyebrowse-switch-to-window-config-5
             eyebrowse-switch-to-window-config-6
             eyebrowse-switch-to-window-config-7
             eyebrowse-switch-to-window-config-8
             eyebrowse-switch-to-window-config-9)
  :general
  (d/leader-keys
   "e"  '(:ignore t :wk "eyebrowse")
   "es" 'eyebrowse-switch-to-window-config
   "el" 'eyebrowse-next-window-config
   "eh" 'eyebrowse-prev-window-config
   "er" 'eyebrowse-rename-window-config
   "ec" 'eyebrowse-close-window-config
   "e'" 'eyebrowse-last-window-config
   "e0" 'eyebrowse-switch-to-window-config-0
   "e1" 'eyebrowse-switch-to-window-config-1
   "e2" 'eyebrowse-switch-to-window-config-2
   "e3" 'eyebrowse-switch-to-window-config-3
   "e4" 'eyebrowse-switch-to-window-config-4
   "e5" 'eyebrowse-switch-to-window-config-5
   "e6" 'eyebrowse-switch-to-window-config-6
   "e7" 'eyebrowse-switch-to-window-config-7
   "e8" 'eyebrowse-switch-to-window-config-8
   "e9" 'eyebrowse-switch-to-window-config-9)
  :config
  (setq eyebrowse-wrap-around t)
  (setq eyebrowse-new-workspace t)
  (eyebrowse-mode))
#+end_src
*** [[https://github.com/jacktasia/dumb-jump][dumb-jump]]
#+begin_src emacs-lisp
(use-package dumb-jump
  :general
  (d/leader-keys
   "jE" 'dumb-jump-go-prefer-external-other-window
   "jG" 'dumb-jump-go-other-window
   "jb" 'dumb-jump-back
   "je" 'dumb-jump-go-prefer-external
   "jg" 'dumb-jump-go)
  :config
  (setq dumb-jump-selector 'ivy
        dumb-jump-prefer-searcher 'rg))
#+end_src

*** [[https://github.com/vspinu/imenu-anywhere][imenu-anywhere]]
#+begin_quote
  ido/ivy/helm imenu tag selection across buffers with the same mode/project
  etc
#+end_quote
imenu on steroids.
#+begin_src emacs-lisp
(use-package imenu-anywhere)
#+end_src

** Functions
#+begin_src emacs-lisp
(defun d/toggle-window-split ()
  "Switch between vertical and horizontal window split.

Source: http://tinyurl.com/k7s96fa"
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
             (next-win-buffer (window-buffer (next-window)))
             (this-win-edges (window-edges (selected-window)))
             (next-win-edges (window-edges (next-window)))
             (this-win-2nd (not (and (<= (car this-win-edges)
                                         (car next-win-edges))
                                     (<= (cadr this-win-edges)
                                         (cadr next-win-edges)))))
             (splitter
              (if (= (car this-win-edges)
                     (car (window-edges (next-window))))
                  #'split-window-horizontally
                #'split-window-vertically)))
        (delete-other-windows)
        (let ((first-win (selected-window)))
          (funcall splitter)
          (if this-win-2nd (other-window 1))
          (set-window-buffer (selected-window) this-win-buffer)
          (set-window-buffer (next-window) next-win-buffer)
          (select-window first-win)
          (if this-win-2nd (other-window 1))))))

(defun d/split-vert-focus ()
  "Split window vertically and move focus to other window."
  (interactive)
  (split-window-right)
  (other-window 1))

(defun d/split-horz-focus ()
  "Split window horizontally and move focus to other window."
  (interactive)
  (split-window-below)
  (other-window 1))

(defun d/move-splitter-left (arg)
  "Move window splitter left.

Source: https://git.io/vQKuS"
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'right))
      (shrink-window-horizontally arg)
    (enlarge-window-horizontally arg)))

(defun d/move-splitter-right (arg)
  "Move window splitter right.

Source: https://git.io/vQKu7"
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'right))
      (enlarge-window-horizontally arg)
    (shrink-window-horizontally arg)))

(defun d/move-splitter-up (arg)
  "Move window splitter up.

Source: https://git.io/vQKu5"
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'up))
      (enlarge-window arg)
    (shrink-window arg)))

(defun d/move-splitter-down (arg)
  "Move window splitter down.

Source: https://git.io/vQKuF"
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'up))
      (shrink-window arg)
    (enlarge-window arg)))
#+end_src
** Hydras
#+begin_src emacs-lisp
(with-eval-after-load 'hydra
  (defhydra h/splitter ()
    "splitter"
    ("h" d/move-splitter-left "←")
    ("j" d/move-splitter-down "↓")
    ("k" d/move-splitter-up "↑")
    ("l" d/move-splitter-right "→" )
    ("=" balance-windows "balance")))
#+end_src
** Bindings
#+begin_src emacs-lisp
(d/leader-keys
 "jI" 'imenu-anywhere
 "jf" 'find-function
 "ji" 'imenu
 "jv" 'find-variable

 "wd" 'delete-window
 "wf" 'make-frame
 "wh" 'd/split-horz-focus
 "wo" 'delete-other-windows
 "ws" 'h/splitter/body
 "wt" 'd/toggle-window-split
 "wv" 'd/split-vert-focus)
#+end_src
* Git and github
** Packages
*** [[https://github.com/magit/magit][magit]]
#+begin_quote
  It's Magit! A Git Porcelain inside Emacs.
#+end_quote
Like git, for emacs. But cooler.
#+begin_src emacs-lisp
(use-package magit
  :general
  (d/leader-keys
   "g"  '(:ignore t :wk "magit")
   "gB" 'd/magit-blame-toggle
   "gC" 'magit-clone
   "gL" 'magit-log-buffer-file
   "ga" 'magit-submodule-add
   "gb" 'magit-branch
   "gc" 'magit-checkout
   "gf" 'magit-find-file
   "gl" 'magit-log-all
   "gs" 'magit-status)
  :defines (magit-diff-use-overlays)
  :config
  (setq magit-diff-use-overlays nil
        auto-revert-check-vc-info t
        git-commit-summary-max-length 50
        git-commit-major-mode 'org-mode)
  (add-hook 'git-commit-mode-hook #'evil-insert-state)
  (d/setup-mode git-commit
    (setq-local fill-column 72)
    (setq-local org-hide-emphasis-markers nil)))
#+end_src
*** [[https://github.com/emacs-evil/evil-magit][evil-magit]]
#+begin_quote
  Black magic or evil keys for magit
#+end_quote
#+begin_src emacs-lisp
(use-package evil-magit
  :after magit)
#+end_src
*** [[https://github.com/vermiculus/magithub][magithub]]
#+begin_quote
   Magit interfaces for GitHub
#+end_quote
#+begin_src emacs-lisp
(use-package magithub
  :disabled t
  :after magit
  :config (magithub-feature-autoinject t)
  (setq ghub-username "therockmandolinist"
        ghub-token (password-store-get "tokens/github/master")))
#+end_src
*** [[https://github.com/syohex/emacs-git-gutter-fringe][git-gutter-fringe]]
#+begin_quote
  Fringe version of git-gutter.el
#+end_quote
#+begin_src emacs-lisp
(use-package git-gutter-fringe
  :demand t
  :commands fringe-helper-define
  :config
  (global-git-gutter-mode)
  (add-hook 'focus-in-hook #'git-gutter:update-all-windows)
  (fringe-helper-define 'git-gutter-fr:modified nil
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX")
  (fringe-helper-define 'git-gutter-fr:added nil
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX")
  (fringe-helper-define 'git-gutter-fr:deleted nil
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"))
#+end_src

*** [[https://github.com/defunkt/gist.el][gist]]
#+begin_src emacs-lisp
(use-package gist
  :config
  (let ((gh-vals (cdar gh-profile-alist)))
    (setf gh-vals (plist-put gh-vals :username "therockmandolinist")
          gh-vals (plist-put gh-vals :token (password-store-get "tokens/github/gist")))))
#+end_src

** Functions
#+begin_src emacs-lisp
(defun d/magit-blame-toggle ()
  "Toggle magit-blame-mode on and off interactively.

Source: https://git.io/vQKub"
  (interactive)
  (if (and (boundp 'magit-blame-mode) magit-blame-mode)
      (magit-blame-quit)
    (call-interactively 'magit-blame)))
#+end_src
* Appearance
** Defaults
*** Startup
Get right to your files or the scratch buffer. No B.S.
#+begin_src emacs-lisp
(setq inhibit-splash-screen t
      inhibit-startup-screen t
      inhibit-startup-echo-area-message t)
#+end_src
*** Time display
#+begin_src emacs-lisp :tangle no
(with-eval-after-load 'time
  (setq  display-time-24hr-format t
         display-time-default-load-average nil
         display-time-format "│ %Y-%d-%m %H:%M │"
         display-time-load-average nil))
#+end_src
*** Gui elements
Turn off gui elements that I never use. Gui emacs is great, but I still prefer
text-based interaction thank you very much.
#+begin_src emacs-lisp
(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode 0)
(setq custom-raised-buttons nil
      use-dialog-box nil)
(blink-cursor-mode 0)
#+end_src
*** Buffer display
I don't want line-wrapping madness, just tell me there's more to see and I'll
have a look. Additionally, show whitespace.
#+begin_src emacs-lisp
(setq-default truncate-lines t)
(setq whitespace-style '(face trailing tabs))
(global-whitespace-mode)
#+end_src
*** Font
Choose a font in order of preference, when available.
#+begin_src emacs-lisp
(when window-system
  (cond ((x-list-fonts "Iosevka Term")
         (add-to-list 'default-frame-alist '(font . "Iosevka Term-9.5"))
         (set-face-attribute 'default t :font "Iosevka Term-9.5"))
        ((x-list-fonts "Input")
         (add-to-list 'default-frame-alist '(font . "Input-10"))
         (set-face-attribute 'default t :font "Input-10"))
        ((x-list-fonts "Office Code Pro D")
         (add-to-list 'default-frame-alist '(font . "Office Code Pro D-11"))
         (set-face-attribute 'default t :font "Office Code Pro D-11"))
        ((x-list-fonts "Consolas")
         (add-to-list 'default-frame-alist '(font . "Consolas-11"))
         (set-face-attribute 'default t :font "Consolas-11"))
        ((x-list-fonts "Menlo")
         (add-to-list 'default-frame-alist '(font . "Menlo-11"))
         (set-face-attribute 'default t :font "Menlo-11")))
#+end_src
And use [[http://fontawesome.io/][Font Awesome]] for the unicode glyphs it supports.
#+begin_src emacs-lisp
(when (x-list-fonts "FontAwesome")
  (set-fontset-font t 'unicode "FontAwesome" nil 'prepend)))
#+end_src

:NOTES:
*Current:* Now I use [[https://be5invis.github.io/Iosevka/][Iosevka]], which is really great since it has all of the
wonderful customization abilities of Input, but is fully open source (and has
web variants!), sees active development, and the maintainer is incredibly
responsive. It /is/ quite narrow, but give it a chance - I wasn't able to go back
after a few weeks.

*2016-ish:* I'm using the wonderful [[http://input.fontbureau.com/][Input]] font. If, like me, you're
coming from something more like SauceCodePro, Consolas, or even just Menlo,
this font may at first seem a little "blocky," but it's so wonderfully
[[http://input.fontbureau.com/download/#customize][customizable]] that you should really give it a try. My current settings are:

 - Download a custom four-style family
| Regular     | Input Mono Light         |
| Italic      | Input Mono Light Italic  |
| Bold        | Input Mono Medium        |
| Bold Italic | Input Mono Medium Italic |
 - ~Source Code Pro style~
   * second option for ~a~ and ~g~
 - 1.4x Line spacing

*Note:* Check out [[http://mbauman.net/geek/2009/03/15/minor-truetype-font-editing-on-a-mac/][this post]] for advice on fixing the Consolas font on macOS. This
helps with the modeline text vertical alignments and makes it consistent with
other fonts. Post last updated in 2011, last successfully tested in 09/2016 (by
myself).
:END:
*** Minibuffer
Use a bar cursor in the minibuffer.
#+begin_src emacs-lisp
(add-hook 'minibuffer-setup-hook
          (lambda () (setq-local cursor-type '(bar . 1))))
#+end_src
*** Mode line
**** Helpers
#+begin_src emacs-lisp
(defun d/flycheck-lighter (state)
  "Return flycheck information for the given error type STATE.

Source: https://git.io/vQKzv"
  (let* ((counts (flycheck-count-errors flycheck-current-errors))
         (errorp (flycheck-has-current-errors-p state))
         (err (or (cdr (assq state counts)) "?"))
         (running (eq 'running flycheck-last-status-change)))
    (if (or errorp running) (format "•%s" err))))

(defmacro d/with-window-status (&rest body)
  (declare (indent defun))
  `(let ((window-active? (powerline-selected-window-active)))
     (cl-flet ((propertize-active
                (&rest arguments)
                (let ((str (car arguments)))
                  (cond  ((and window-active? (stringp str))
                          (apply #'propertize arguments) )
                         ((stringp str)
                          (car arguments))))))
       ,@body)))

(defmacro d/with-evil-tag-color (&rest body)
  (declare (indent defun))
  `(let ((evil-tag-color
          (pcase (substring-no-properties
                  evil-mode-line-tag)
            (" N " "#B8BB26")
            (" I " "#66999D")
            (" M " "#D3869B")
            (" V " "#FE8019")
            (" E " "#FABD2F" )
            (" R " "#FE8019")
            (" O " "#B8BB26"))))
     ,@body))

(defun d/make-xpm (color height width)
  "Create an XPM bitmap.

Source: https://git.io/vQKzL"
  (propertize
   " " 'display
   (let ((data (make-list height (make-list width 1)))
         (color (or color "None")))
     (create-image
      (concat
       (format "/* XPM */\nstatic char * percent[] = {\n\"%i %i 2 1\",\n\". c %s\",\n\"  c %s\","
               (length (car data))
               (length data)
               color
               color)
       (apply #'concat
              (cl-loop with idx = 0
                       with len = (length data)
                       for dl in data
                       do (cl-incf idx)
                       collect
                       (concat "\""
                               (cl-loop for d in dl
                                        if (= d 0) collect (string-to-char " ")
                                        else collect (string-to-char "."))
                               (if (eq idx len) "\"};" "\",\n")))))
      'xpm t :ascent 'center))))

(defun d/eyebrowse-relevant-p ()
  (and (featurep 'eyebrowse)
       (< 1 (length (eyebrowse--get 'window-configs)))))

(defun d/in-macro-p ()
  (or defining-kbd-macro executing-kbd-macro))

(defun d/in-evil-substitution-p ()
  (or (assq 'evil-ex-substitute evil-ex-active-highlights-alist)
      (assq 'evil-ex-global-match evil-ex-active-highlights-alist)
      (assq 'evil-ex-buffer-match evil-ex-active-highlights-alist)))

(defun d/evil-substitute-num-matches ()
  "Return the number of matches for the current evil substitution.

Source: https://git.io/vQKzq"
  (let ((range (if evil-ex-range
                   (cons (car evil-ex-range) (cadr evil-ex-range))
                 (cons (line-beginning-position) (line-end-position))))
        (pattern (car-safe (evil-delimited-arguments evil-ex-argument 2))))
    (if pattern
        (format "%s matches" (how-many pattern (car range) (cdr range)))
      " ... ")))
#+end_src
**** Mode-line
#+begin_src emacs-lisp
(defvar d/mode-line
  '((:eval
     (d/with-evil-tag-color
      (d/with-window-status
       (cond ((and window-active?
                   (not (or (d/eyebrowse-relevant-p)
                            (bound-and-true-p anzu--state)
                            (d/in-macro-p)
                            (d/in-evil-substitution-p))))
              (d/make-xpm evil-tag-color 56 8))
             ((not window-active?)
              (d/make-xpm "#1D2021" 56 8))))))
    ((:eval
      (d/with-window-status
       (d/with-evil-tag-color
        (when window-active?
          (propertize-active
           (cond ((d/in-evil-substitution-p)
                  (d/evil-substitute-num-matches))
                 ((d/in-macro-p)
                  (if (bound-and-true-p evil-this-macro)
                      (char-to-string evil-this-macro)
                    "Macro"))
                 ((bound-and-true-p anzu--state)
                  (anzu--update-mode-line))
                 ((d/eyebrowse-relevant-p)
                  (let* ((num (eyebrowse--get 'current-slot))
                         (tag (nth 2 (assoc num (eyebrowse--get 'window-configs)))))
                    (if (and tag (< 0 (length tag)))
                        tag
                      (int-to-string num)))))
           'face
           `(:foreground
             "#3E3D31"
             :weight bold
             :background ,evil-tag-color
             :box (:color ,evil-tag-color :line-width 14))))))))
    ;; File modified
    " %* "
    ;; Buffer name & recursive editing
    "%[" mode-line-buffer-identification "%] "
    ;; Remote
    (:eval (d/with-window-status
            (let ((host (file-remote-p default-directory 'host)))
              (propertize-active
               (cond ((and host
                           default-directory
                           (string= host (system-name)))
                      (concat "@"
                              (file-remote-p default-directory 'user)
                              " "))
                     ((and host default-directory)
                      (concat "@" host " ")))
               'face
               '(:foreground "#D3869B")))))
    ;; Line/column number
    (:eval (d/with-window-status
            (propertize-active "%4l:%2c  "
                                 'face '(:foreground "#A89984"))))
    ;; Major mode
    (:eval
     (d/with-window-status
      (propertize-active
       (concat mode-name "  ")
       'face '(:foreground "#83A598" :weight bold))))
    ;; Version control
    (:eval
     (d/with-window-status
      (when vc-mode
        (propertize-active
         (concat (replace-regexp-in-string "^ Git." " " vc-mode) "  ")
         'face '(:foreground "#FE8019" )))))
    ;; Flycheck
    (:eval
     (d/with-window-status
      (when (and (bound-and-true-p flycheck-mode)
                 (or flycheck-current-errors
                     (eq 'running flycheck-last-status-change)))
        (concat
         (cl-loop for state in '((error . "#FB4933")
                                 (warning . "#FABD2F")
                                 (info . "#83A598"))
                  as lighter = (d/flycheck-lighter (car state))
                  when lighter
                  concat (propertize-active
                          lighter
                          'face `(:foreground ,(cdr state))))
         " "))))
    ;; Input method
    (:eval
     (d/with-window-status
      (when (or current-input-method
                (and (bound-and-true-p evil-mode)
                     (bound-and-true-p evil-input-method)))
        (cond
         (current-input-method
          (propertize-active
           (concat current-input-method-title " ")
           'face
           'bold))
         ((and (featurep 'evil) (bound-and-true-p evil-input-method))
          (concat (nth 3 (assoc default-input-method input-method-alist))
                  " "))))))))

(setq-default mode-line-format d/mode-line)
(with-current-buffer "*Messages*"
  (setq-local mode-line-format d/mode-line))
#+end_src
** Packages
*** [[https://github.com/larstvei/Focus][focus]]
#+begin_quote
  Dim the font color of text in surrounding paragraphs
#+end_quote
#+begin_src emacs-lisp
(use-package focus)
#+end_src
*** [[http://git.savannah.gnu.org/cgit/emacs/elpa.git/tree/packages/rainbow-mode/rainbow-mode.el][rainbow-mode]]
#+begin_quote
  Colorize color names in buffers
#+end_quote
#+begin_src emacs-lisp
(use-package rainbow-mode
  :config
  (setq rainbow-x-colors-major-mode-list '(c-mode c++-mode java-mode))
  (add-hook 'help-mode-hook #'rainbow-mode))
#+end_src
*** [[https://github.com/therockmandolinist/emacs-theme-darktooth][darktooth-theme]]
#+begin_quote
  An Emacs 24 theme remixed from gruvbox
#+end_quote
(my fork)
#+begin_src emacs-lisp
(use-package darktooth-theme
  :demand t
  :quelpa (darktooth-theme
           :fetcher github
           :repo "therockmandolinist/emacs-theme-darktooth"))
#+end_src
*** [[https://github.com/hlissner/emacs-doom-theme][doom-theme]]
#+begin_src emacs-lisp :tangle no
(use-package doom-themes
  :disabled t
  :config
  (load-theme 'doom-molokai t))
#+end_src
*** [[https://github.com/greduan/emacs-theme-gruvbox][gruvbox-theme]]
#+begin_src emacs-lisp
(use-package gruvbox-theme
  :disabled t)
#+end_src
*** [[https://github.com/iqbalansari/emacs-emojify][emacs-emojify]]
#+begin_quote
  Display emojis in emacs.
#+end_quote
#+begin_src emacs-lisp
(use-package emojify)
#+end_src
*** [[https://github.com/lunaryorn/fancy-battery.el][fancy-battery]]
#+begin_quote
Display battery in Emacs Mode line
#+end_quote
#+begin_src emacs-lisp
(use-package fancy-battery
  :disabled t
  :defer 10
  :config
  (fancy-battery-mode)
  (setq fancy-battery-show-percentage t)
  (fancy-battery-update))
#+end_src
*** [[https://github.com/alpaker/Fill-Column-Indicator][fill-column-indicator]]
#+begin_quote
  An Emacs minor mode that graphically indicates the fill column.
#+end_quote
#+begin_src emacs-lisp
(use-package fill-column-indicator
  :init
  (setq-default fci-rule-column 79)
  (defvar-local company-fci-mode-on-p nil)

  (defun company-turn-off-fci (&rest _ignore)
    (when (boundp 'fci-mode)
      (setq company-fci-mode-on-p fci-mode)
      (when fci-mode (fci-mode -1))))

  (defun company-maybe-turn-on-fci (&rest _ignore)
    (when company-fci-mode-on-p (fci-mode 1)))

  (add-hook 'company-completion-started-hook 'company-turn-off-fci)
  (add-hook 'company-completion-finished-hook 'company-maybe-turn-on-fci)
  (add-hook 'company-completion-cancelled-hook 'company-maybe-turn-on-fci))
#+end_src

*** [[https://github.com/ankurdave/color-identifiers-mode][color-identifiers]]
#+begin_quote
  Emacs minor mode to highlight each source code identifier uniquely based on its name
#+end_quote
#+begin_src emacs-lisp
(use-package color-identifiers-mode)
#+end_src

*** [[https://github.com/Fanael/highlight-numbers][highlight-numbers]]
#+begin_quote
  Highlight numbers in source code
#+end_quote
Neat-o
#+begin_src emacs-lisp
(use-package highlight-numbers)
#+end_src

*** [[https://github.com/tsdh/highlight-parentheses.el][highlight-parentheses]]
#+begin_quote
  Emacs: highlight surrounding parentheses
#+end_quote
#+begin_src emacs-lisp
(use-package highlight-parentheses)
#+end_src

*** [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]
Better parentheses coloring
#+begin_src emacs-lisp
(use-package rainbow-delimiters)
#+end_src

** Hydras
#+begin_src emacs-lisp
(with-eval-after-load 'hydra
  (defhydra h/zoom ()
    "zoom"
    ("=" text-scale-increase "in")
    ("-" text-scale-decrease "out")
    ("0" (text-scale-adjust 0) "reset")))
#+end_src
** Bindings
#+begin_src emacs-lisp
(d/leader-keys
 "z" '(:command h/zoom/body :wk "zoom"))
#+end_src
* Modes
** Prog
*** Packages
**** [[https://github.com/Malabarba/aggressive-indent-mode/][aggressive-indent]]
#+begin_quote
  Emacs minor mode that keeps your code always indented. More reliable than electric-indent-mode.
#+end_quote
#+begin_src emacs-lisp
(use-package aggressive-indent)
#+end_src
**** [[https://github.com/flycheck/flycheck][flycheck]]
#+begin_quote
  On the fly syntax checking for GNU Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package flycheck
  :config
  (setq flycheck-completing-read-function 'ivy-completing-read)
  (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
    (vector #b00000000
            #b10000000
            #b11000000
            #b11100000
            #b11110000
            #b11111000
            #b11111100
            #b11111110
            #b11111111
            #b11111110
            #b11111100
            #b11111000
            #b11110000
            #b11100000
            #b11000000
            #b10000000
            #b00000000)))
#+end_src
*** Hydras
#+begin_src emacs-lisp
(with-eval-after-load 'hydra
  (defhydra h/flycheck
    (:pre (progn
            (flycheck-mode 1)
            (setq hydra-lv t)
            (flycheck-list-errors))
     :post (progn
             (setq hydra-lv nil)
             (quit-windows-on "*Flycheck errors*"))
     :hint nil)
    "Errors"
    ("f"  flycheck-error-list-set-filter                            "Filter")
    ("j"  flycheck-next-error                                       "Next")
    ("k"  flycheck-previous-error                                   "Previous")
    ("gg" flycheck-first-error                                      "First")
    ("G"  (progn (goto-char (point-max)) (flycheck-previous-error)) "Last")
    ("q"  nil)))
#+end_src
*** Bindings
#+begin_src emacs-lisp
(d/mode-leader-keys
 :keymaps 'prog-mode-map
 "f" '(:command h/flycheck/body :wk "flycheck"))
#+end_src
*** Setup
#+begin_src emacs-lisp
(d/setup-mode prog
  (subword-mode)
  (smartparens-strict-mode)
  (highlight-parentheses-mode 1)
  (rainbow-delimiters-mode)
  (goto-address-prog-mode)
  (fci-mode)
  (highlight-numbers-mode)
  (d/rlines-mode)
  (auto-fill-mode 1)
  (setq-local comment-auto-fill-only-comments t)
  (setq-local calc-embedded-open-mode (concat comment-start " "))
  (setq-local calc-embedded-close-mode (concat comment-end "\n"))
  (hl-line-mode 1))
#+end_src
** Python
*** Packages
**** [[https://github.com/proofit404/anaconda-mode][anaconda-mode]]
#+begin_quote
  Code navigation, documentation lookup and completion for Python.
#+end_quote
#+begin_src emacs-lisp
(use-package anaconda-mode)
#+end_src
**** [[https://github.com/proofit404/company-anaconda][company-anaconda]]
#+begin_quote
  Anaconda backend for company-mode.
#+end_quote
#+begin_src emacs-lisp
(use-package company-anaconda
  :after company)
#+end_src
**** [[https://github.com/proofit404/pyenv-mode][pyenv-mode]]
#+begin_quote
  Integrate pyenv with python-mode.
#+end_quote
#+begin_src emacs-lisp
(use-package pyenv-mode
  :config
  (pyenv-mode))
#+end_src
**** [[https://github.com/ssbb/pyenv-mode-auto][pyenv-mode-auto]]
#+begin_src emacs-lisp
(use-package pyenv-mode-auto
  :after pyenv-mode)
#+end_src

**** [[https://github.com/naiquevin/sphinx-doc.el][sphinx-doc]]
#+begin_quote
   Generate Sphinx friendly docstrings for Python functions in Emacs
#+end_quote
Pretty neat, though not entirely complete, IMO.
#+begin_src emacs-lisp
(use-package sphinx-doc)
#+end_src

**** [[https://github.com/JorisE/yapfify][yapfify]]
#+begin_quote
  Yapf for Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package yapfify)
#+end_src
*** Variables
#+begin_src emacs-lisp
(defvar d/python-prettify-alist
  '(("<=" . "≤")
    (">=" . "≥")
    ("!=" . "≠")
    ("is" . "≡")
    ("=" . "←")
    ("==" . "≣")
    ("not" . "¬")
    ("is not" . "≢")
    ("sum" . "∑")
    ("sqrt" . "√")
    ("pi" . "π")
    ("lambda" . "λ")
    ("and" . "⋏")
    ("or" . "⋎")
    ("self" . "↻")
    ("in" . "∈")
    ("def" . "ƒ")
    ("not in" . "∉")
    ("return" . "→")
    ("yield" . "⊢")
    ("None" . "∅")
    ("*" . "·")
    ("inf" . "∞")
    ("all" . "∀")
    ("^" . "⊻")
    ("**" . "^")))
#+end_src
*** Functions
#+begin_src emacs-lisp
(defun d/ipython-shell ()
  "Open an ipython shell using multi-term, respecting virtualenv."
  (interactive)
  (let ((sane-term-shell-command "ipython"))
    (sane-term-create)))
#+end_src
*** Setup
#+begin_src emacs-lisp
(d/setup-mode python
  (set (make-local-variable 'comment-inline-offset) 2)
  (flycheck-mode)
  (anaconda-mode)
  (anaconda-eldoc-mode)
  (require 'company)
  (add-to-list 'company-backends
               (company-mode/backend-with-yas 'company-anaconda))
  (setq-local prettify-symbols-alist
              d/python-prettify-alist))
#+end_src
** Lisps
*** Packages
**** [[https://github.com/slime/slime][slime]]
#+begin_quote
  The Superior Lisp Interaction Mode for Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package slime
  :general
  (imap :keymaps 'slime-repl-mode-map
    [up] 'slime-repl-previous-input
    [down] 'slime-repl-next-input)
  :config
  (setq inferior-lisp-program "/usr/local/bin/sbcl")
  (setq slime-contribs '(slime-fancy slime-company)))

(use-package slime-company
  :after slime)
#+end_src
**** [[https://github.com/tkf/emacs-request][request]]
#+begin_quote
  Easy HTTP request for Emacs Lisp
#+end_quote
#+begin_src emacs-lisp
(use-package request)

(use-package request-deferred)
#+end_src

**** [[https://github.com/magnars/s.el][s]]
#+begin_quote
  The long lost Emacs string manipulation library.
#+end_quote
#+begin_src emacs-lisp
(use-package s)
#+end_src

**** [[https://github.com/magnars/dash.el][dash]]
#+begin_quote
  A modern list library for Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package dash)
#+end_src
**** [[https://github.com/rejeep/f.el][f]]
#+begin_src emacs-lisp
(use-package f)
#+end_src
**** [[https://github.com/purcell/flycheck-package][flycheck-package]]
#+begin_src emacs-lisp
(use-package flycheck-package
  :after flycheck
  :config
  (flycheck-package-setup))
#+end_src
**** [[https://github.com/Wilfred/suggest.el][suggest]]
#+begin_src emacs-lisp
(use-package suggest)
#+end_src
*** Variables
#+begin_src emacs-lisp
(defvar d/lisp-prettify-alist
  (prettify-utils-generate
   ("<=" "≤")
   (">=" "≥")
   ("/=" "≠")
   ("eq" "≡")
   ("equal" "≣")
   ("sqrt" "√")
   ("float-pi" "π")
   ("lambda" "λ")
   ("and" "⋏")
   ("or" "⋎")
   ("defun" "ƒ")
   ("defmacro" "ƒₘ")
   ("not" "¬")
   ("nil" "∅")))
#+end_src
*** Functions
#+begin_src emacs-lisp
(defun d/eval-surrounding-sexp (levels)
  "Eval sexp around point, specifying depth with LEVELS.

Source: http://tinyurl.com/le6wxuo"
  (interactive "p")
  (save-excursion
    (sp-end-of-sexp (abs levels))
    (eval-last-sexp nil)))

(defun d/pp-eval-surrounding-sexp (levels)
  "Replace the preceding sexp with its value.

Source: http://tinyurl.com/mh5ev6x"
  (interactive "p")
  (let (pp-escape-newlines)
    (save-excursion
      (sp-end-of-sexp (abs levels))
      (pp-eval-last-sexp nil))))

(defun d/pp-macroexpand-surrounding-sexp (levels)
  (interactive "p")
  (let (pp-escape-newlines)
    (save-excursion
      (sp-end-of-sexp (abs levels))
      (pp-macroexpand-last-sexp nil))))

(defun d/eval-buffer ()
  (interactive)
  (if (eq major-mode 'org-mode)
      (org-babel-execute-src-block)
    (eval-buffer)))

(defun d/eval-defun ()
  (interactive)
  (if  (eq major-mode 'org-mode)
      (progn
        (when (org-in-src-block-p)
          (org-edit-special)
          (eval-defun nil)
          (org-edit-src-exit)))
    (eval-defun)))

(defun d/lisp-indent-function (indent-point state)
  "This function is the normal value of the variable `lisp-indent-function'.
The function `calculate-lisp-indent' calls this to determine
if the arguments of a Lisp function call should be indented specially.
INDENT-POINT is the position at which the line being indented begins.
Point is located at the point to indent under (for default indentation);
STATE is the `parse-partial-sexp' state for that position.
If the current line is in a call to a Lisp function that has a non-nil
property `lisp-indent-function' (or the deprecated `lisp-indent-hook'),
it specifies how to indent.  The property value can be:
,* `defun', meaning indent `defun'-style
  \(this is also the case if there is no property and the function
  has a name that begins with \"def\", and three or more arguments);
,* an integer N, meaning indent the first N arguments specially
  (like ordinary function arguments), and then indent any further
  arguments like a body;
,* a function to call that returns the indentation (or nil).
  `lisp-indent-function' calls this function with the same two arguments
  that it itself received.
This function returns either the indentation to use, or nil if the
Lisp function does not specify a special indentation.

Source: https://git.io/vQKz8"
  (let ((normal-indent (current-column))
        (orig-point (point)))
    (goto-char (1+ (elt state 1)))
    (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
    (cond
     ;; car of form doesn't seem to be a symbol, or is a keyword
     ((and (elt state 2)
           (or (not (looking-at "\\sw\\|\\s_"))
               (looking-at ":")))
      (if (not (> (save-excursion (forward-line 1) (point))
                  calculate-lisp-indent-last-sexp))
          (progn (goto-char calculate-lisp-indent-last-sexp)
                 (beginning-of-line)
                 (parse-partial-sexp (point)
                                     calculate-lisp-indent-last-sexp 0 t)))
      ;; Indent under the list or under the first sexp on the same
      ;; line as calculate-lisp-indent-last-sexp.  Note that first
      ;; thing on that line has to be complete sexp since we are
      ;; inside the innermost containing sexp.
      (backward-prefix-chars)
      (current-column))
     ((and (save-excursion
             (goto-char indent-point)
             (skip-syntax-forward " ")
             (not (looking-at ":")))
           (save-excursion
             (goto-char orig-point)
             (looking-at ":")))
      (save-excursion
        (goto-char (+ 2 (elt state 1)))
        (current-column)))
     (t
      (let ((function (buffer-substring (point)
                                        (progn (forward-sexp 1) (point))))
            method)
        (setq method (or (function-get (intern-soft function)
                                       'lisp-indent-function)
                         (get (intern-soft function) 'lisp-indent-hook)))
        (cond ((or (eq method 'defun)
                   (and (null method)
                        (> (length function) 3)
                        (string-match "\\`def" function)))
               (lisp-indent-defform state indent-point))
              ((integerp method)
               (lisp-indent-specform method state
                                     indent-point normal-indent))
              (method
               (funcall method indent-point state))))))))
#+end_src
*** Bindings
#+begin_src emacs-lisp
(d/mode-leader-keys
 :keymaps '(emacs-lisp-mode-map lisp-interaction-mode-map)
 "eb" 'd/eval-buffer
 "ef" 'eval-defun
 "er" 'eval-region
 "eR" 'd/eval-and-replace
 "es" 'd/eval-surrounding-sexp
 "el" 'eval-last-sexp
 "pm" 'd/pp-macroexpand-surrounding-sexp
 "ps" 'd/pp-eval-surrounding-sexp)
 #+end_src
*** Setup
#+begin_src emacs-lisp
(d/setup-mode (lisp lisp-interaction emacs-lisp)
  (hs-minor-mode)
  (aggressive-indent-mode)
  (push '(? . ("`" . "'")) evil-surround-pairs-alist)
  (general-define-key
   :keymaps 'local
   "C-c <up>" 'hs-hide-all
   "C-c <down>" 'hs-show-all
   "C-c <left>" 'hs-hide-block
   "C-c <right>" 'hs-show-block)
  (setq-local lisp-indent-function #'d/lisp-indent-function)
  (setq-local prettify-symbols-alist d/lisp-prettify-alist))
#+end_src
** C
*** Setup
#+begin_src emacs-lisp
(d/setup-mode c
  (aggressive-indent-mode))
#+end_src
** Haskell
*** Packages
**** [[https://github.com/haskell/haskell-mode][haskell-mode]]
#+begin_src emacs-lisp
(use-package haskell-mode
  :mode "\\.hs\\'"
  :config
  (setq haskell-indentation-layout-offset 4
        haskell-indentation-left-offset 4
        haskell-indentation-ifte-offset 4))

#+end_src
*** Variables
#+begin_src emacs-lisp
(defvar d/haskell-prettify-alist
  '(("=>" . "⇒")
    ("forall" . "∀")
    ("->" . "→")
    ("<-" . "←")
    ("not" . "¬")
    ("lambda" . "λ")))
#+end_src
*** Setup
#+begin_src emacs-lisp
(d/setup-mode haskell
  (setq-local prettify-symbols-alist d/haskell-prettify-alist))
#+end_src
** Scheme
*** Packages
**** [[https://github.com/jaor/geiser][geiser]]
#+begin_src emacs-lisp
(use-package geiser
  :config
  (setq geiser-active-implementations '(chicken)))
#+end_src
*** Variables
#+begin_src emacs-lisp
(defvar d/scheme-prettify-alist
  (prettify-utils-generate
   ("<=" "≤")
   (">=" "≥")
   ("/=" "≠")
   ("eqv?" "≡")
   ("equal?" "≣")
   ("sqrt" "√")
   ("float-pi" "π")
   ("lambda" "λ")
   ("and" "⋏")
   ("or" "⋎")
   ("define" "ƒ")
   ("define-syntax" "ƒₛ")
   ("not" "¬")
   ("->" "→")))
#+end_src
*** Setup
#+begin_src emacs-lisp
(d/setup-mode scheme
  (hs-minor-mode)
  (aggressive-indent-mode)
  (push '(? . ("`" . "'")) evil-surround-pairs-alist)
  (general-define-key
   :keymaps 'local
   "C-c <up>" 'hs-hide-all
   "C-c <down>" 'hs-show-all
   "C-c <left>" 'hs-hide-block
   "C-c <right>" 'hs-show-block)

  (setq-local prettify-symbols-alist d/scheme-prettify-alist))
#+end_src
** Conf
*** Setup
#+begin_src emacs-lisp
(d/setup-mode conf
  (d/setup-prog-mode))
(add-to-list 'auto-mode-alist '("\\.service\\'" . conf-mode))
#+end_src
** Calc
#+begin_src emacs-lisp
(use-package calc
  :ensure nil
  :general
  (d/leader-keys
   "ac" 'calc-dispatch)
  (emap :keymaps 'calc-mode-map
    "x" (lambda () (interactive) (counsel-M-x "^calc-")))
  :config
  (setq calc-multiplication-has-precedence nil)
  (setq calc-symbolic-mode t))
#+end_src
** Shell
*** Packages
**** egp
#+begin_src emacs-lisp
(use-package egp
  :ensure nil
  :after eshell
  :config
  (setq eshell-highlight-prompt nil
        eshell-prompt-function 'egp-theme))
#+end_src
**** [[https://github.com/xuchunyang/eshell-z][eshell-z]]
#+begin_quote
  cd to frequent directory in eshell, an Emacs port of https://github.com/rupa/z
#+end_quote
#+begin_src emacs-lisp
(use-package eshell-z
  :after eshell)
#+end_src
**** [[https://github.com/adamrt/sane-term][sane-term]]
#+begin_quote
  Cycle through terms in emacs
#+end_quote
I wanted a slightly better terminal in emacs. This seems to do the trick.
#+begin_src emacs-lisp
(use-package sane-term
  :general (d/leader-keys "at" 'sane-term-create))
#+end_src

*** Functions
#+begin_src emacs-lisp
(with-eval-after-load 'eshell
  (defun eshell/clear ()
    "Custom `eshell' clear function to clear to top."
    (interactive)
    (let ((inhibit-read-only t))
      (erase-buffer)))

  (defun eshell/cpg (&optional x)
    (let* ((ghq-dirs
            (split-string (shell-command-to-string "ghq list")
                          "\n"
                          t))
           (current (string-remove-prefix "/home/d/.ghq/" (eshell/pwd)))
           (current-pos (cl-position current ghq-dirs :test 'string=)))
      (cond ((string= x "next")
             (eshell/cd (concat "~/.ghq/" (nth (1+ current-pos) ghq-dirs))))
            ((string= x "prev")
             (eshell/cd (concat "~/.ghq/" (nth (1- current-pos) ghq-dirs))))
            (t
             (ivy-read "[cpg] "
                       ghq-dirs
                       :action (lambda (x)
                                 (eshell/cd (concat "~/.ghq/" x))))))))

  (defun eshell/cpwd ()
    (kill-new (eshell/pwd)))

  (defun eshell/csi ()
    (call-interactively #'geiser))

  (defun eshell/sbcl ()
    (call-interactively #'slime))

  (defun eshell/git (&rest args)
    (pcase args
      ('("status") (magit-status))
      ('("diff") (magit-status))
      ('("log") (call-interactively #'magit-log-current))
      (`("log" . ,ll) (magit-log ll))
      (`("checkout") (call-interactively #'magit-checkout))
      (`("checkout" ,rev) (magit-checkout rev))
      ('("pull") (call-interactively #'magit-pull-from-upstream))))

  ;; (defun eshell/pass (&rest args)
  ;;   (pcase args
  ;;     ('("rm") (call-interactively #'password-store-remove))
  ;;     ('("generate" (call-interactively #'password-store-generate)))))

  (defun eshell/rg (&rest args)
    (eshell-grep "rg" (push "--no-heading" args))
    (other-window 1))

  (defun eshell/cool-peco-ps ()
    (interactive)
    (let ((ps  (split-string
                (shell-command-to-string
                 "ps axco user,pid,%cpu,%mem,start,time,command")
                "\n"
                t)))
      (ivy-read "[ps] "
                ps
                :action (lambda (x)
                          (insert (cadr (split-string x " " t))))))))
#+end_src

*** Setup
#+begin_src emacs-lisp
(d/setup-mode term
  (setq-local yas-dont-activate-functions t)
  (local-set-key (kbd "<C-tab>") #'multi-term-next))
#+end_src
** Text
#+begin_src emacs-lisp
(d/mode-leader-keys
 :keymap 'text-mode-map
 "f" '(:command h/flyspell/body :wk "flyspell"))
#+end_src
** Misc Modes
*** [[http://elpa.gnu.org/packages/csv-mode.html][csv-mode]]
#+begin_quote
  Major mode for editing comma/char separated values
#+end_quote
Eh, wanted to try a simpler way of editing csv files. (Excel and Numbers both
kinda suck at this, LibreOffice was slightly better.) Haven't used this much.
#+begin_src emacs-lisp
(use-package csv-mode
  :mode "\\.csv\\'"
  :config
  (add-hook 'csv-mode-hook #'csv-align-fields))
#+end_src
*** [[https://github.com/Kitware/CMake][cmake-mode]]
#+begin_src emacs-lisp
(use-package cmake-mode)
#+end_src
*** [[http://jblevins.org/projects/markdown-mode/][markdown-mode]]
Syntax highlighting for markdown files.
#+begin_src emacs-lisp
(use-package markdown-mode
  :mode "\\.md\\'"
  :config)
#+end_src
*** [[https://github.com/yoshiki/yaml-mode][yaml-mode]]
#+begin_quote
  The emacs major mode for editing files in the YAML data serialization format.
#+end_quote
#+begin_src emacs-lisp
(use-package yaml-mode
  :mode "\\.yml\\'")
#+end_src
*** [[https://github.com/clojure-emacs/clojure-mode][clojure-mode]]
#+begin_quote
  Emacs support for the Clojure(Script) programming language
#+end_quote
#+begin_src emacs-lisp
(use-package clojure-mode)
#+end_src
*** [[https://github.com/joshwnj/json-mode][json-mode]]
#+begin_quote
  Major mode for editing JSON files with emacs
#+end_quote
#+begin_src emacs-lisp
(use-package json-mode
  :mode "\\.json\\'")
#+end_src
*** [[https://github.com/defunkt/coffee-mode][coffee-mode]]
#+begin_quote
  Emacs Major Mode for CoffeeScript
#+end_quote
#+begin_src emacs-lisp
(use-package coffee-mode
  :mode "\\.coffee\\'")
#+end_src
*** [[https://github.com/millejoh/emacs-ipython-notebook][EIN]]
#+begin_quote
  Jupyter and IPython 2.x/3.x notebook client in Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package ein)
#+end_src
*** [[https://github.com/immerrr/lua-mode][lua-mode]]
#+begin_quote
  Emacs major mode for editing Lua
#+end_quote
#+begin_src emacs-lisp
(use-package lua-mode)
#+end_src
*** [[https://github.com/mcandre/vimrc-mode][vimrc-mode]]
#+begin_quote
  Enables syntax highlighting for .vimrc/_vimrc files
#+end_quote
#+begin_src emacs-lisp
(use-package vimrc-mode)
#+end_src

*** [[https://github.com/politza/pdf-tools][pdf-tools]]
#+begin_quote
  Emacs support library for PDF files.
#+end_quote
#+begin_src emacs-lisp
(use-package pdf-tools
  :defer 10
  :general
  (nmap :keymaps 'pdf-view-mode-map
    "s" 'pdf-view-fit-width-to-window
    "a" 'pdf-view-fit-height-to-window
    "/" 'isearch-forward
    "J" 'pdf-view-next-page
    "K" 'pdf-view-previous-page
    "j" 'pdf-view-next-line-or-next-page
    "k" 'pdf-view-previou-line-or-previous-page
    "-" 'pdf-view-shrink
    "+" 'pdf-view-enlarg)
  :config
  (pdf-tools-install))
#+end_src
*** [[https://github.com/fxbois/web-mode][web-mode]]
#+begin_src emacs-lisp
(use-package web-mode
  :mode ("\\.html?\\'" "\\.xml\\'" "\\.launch\\'")
  :config
  (setq web-mode-markup-indent-offset 2))
#+end_src
*** [[https://github.com/therockmandolinist/turing-machine][turing-machine]]
#+begin_src emacs-lisp
(use-package turing-machine
  :quelpa (turing-machine
           :fetcher github
           :repo "therockmandolinist/turing-machine"))
#+end_src
*** json
#+begin_src emacs-lisp
(d/setup-mode json
  (highlight-numbers-mode -1))
#+end_src
* Enhancements
** Emacs
*** Packages
**** [[https://github.com/jwiegley/use-package/blob/master/bind-key.el][bind-key]]
#+begin_src emacs-lisp
(use-package bind-key
  :ensure t)
#+end_src
**** [[https://github.com/purcell/disable-mouse][disable-mouse]]
#+begin_quote
  Disable the mouse in Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package disable-mouse
  :demand  t
  :config
  (global-disable-mouse-mode)
  (dolist (key '([mouse-1]
                 [mouse-2]
                 [mouse-4]
                 [mouse-5]
                 [mouse-6]
                 [mouse-7]
                 [down-mouse-1]
                 [drag-mouse-1]
                 [wheel-right]
                 [double-wheel-right]
                 [triple-wheel-right]
                 [wheel-left]
                 [double-wheel-left]
                 [triple-wheel-left]
                 [wheel-down]
                 [double-wheel-down]
                 [triple-wheel-down]
                 [wheel-up]
                 [double-wheel-up]
                 [triple-wheel-up]))
    (define-key evil-motion-state-map key #'ignore)))
#+end_src

**** [[https://github.com/lewang/flx][flx]]
#+begin_quote
  Fuzzy matching for Emacs ... a la Sublime Text.
#+end_quote
#+begin_src emacs-lisp
(use-package flx)
#+end_src
**** [[https://github.com/nonsequitur/smex][smex]]
#+begin_quote
  A smart M-x enhancement for Emacs.
#+end_quote
Sorts ivy by most recently used, I think.
#+begin_src emacs-lisp
(use-package smex)
#+end_src
**** [[https://github.com/Fanael/persistent-scratch][persistent-scratch]]
#+begin_quote
  Preserve the scratch buffer across Emacs sessions
#+end_quote
#+begin_src emacs-lisp
(use-package persistent-scratch
  :defer 10
  :config
  (persistent-scratch-setup-default))
#+end_src
**** [[https://github.com/iqbalansari/restart-emacs][restart-emacs]]
#+begin_quote
  A simple emacs package to restart emacs from within emacs.
#+end_quote
SUPER nifty.
#+begin_src emacs-lisp
(use-package restart-emacs
  :general (d/leader-keys "qr" 'restart-emacs)
  :init
  (evil-ex-define-cmd "qr[estart]" 'restart-emacs))
#+end_src
**** [[https://github.com/Malabarba/paradox][paradox]]
#+begin_quote
  Project for modernizing Emacs' Package Menu. With package ratings, usage
  statistics, customizability, and more.
#+end_quote
#+begin_src emacs-lisp
(use-package paradox
  :general
  (d/leader-keys "ap" 'paradox-list-packages)
  (nmap :keymaps 'paradox-menu-mode-map
    "(" 'package-menu-toggle-hiding
    "?" 'package-menu-describe-package
    "F" 'package-menu-filter
    "RET" 'paradox-push-button
    "S*" 'paradox-sort-by-★
    "Sp" 'paradox-sort-by-package
    "Ss" 'paradox-sort-by-status
    "TAB" 'forward-button
    "U" 'package-menu-mark-upgrades
    "d" 'package-menu-mark-delete
    "f" 'hydra-paradox-filter/body
    "i" 'package-menu-mark-install
    "q" 'paradox-quit-and-close
    "r" 'package-menu-refresh
    "u" 'package-menu-mark-unmark
    "vh" 'paradox-menu-visit-homepage
    "vl" 'paradox-menu-view-commit-list
    "x" 'paradox-menu-execute
    "~" 'package-menu-mark-obsolete-for-deletion
    [backtab] 'backward-button)
  :config
  (setq paradox-execute-asynchronously t
        paradox-github-token (password-store-get "tokens/github/paradox")
        paradox-automatically-star nil))
#+end_src

**** [[https://git.zx2c4.com/password-store/tree/contrib/emacs][password-store]]
#+begin_src emacs-lisp
(use-package password-store
  :config
  (setq password-store-password-length 20))
#+end_src
**** [[https://github.com/jschaf/esup][esup]]
#+begin_quote
  ESUP - Emacs Start Up Profiler
#+end_quote
#+begin_src emacs-lisp
(use-package esup
  :config
  (setq esup-insignificant-time 0.001))
#+end_src
**** [[https://www.emacswiki.org/emacs/centered-cursor-mode.el][centered-cursor-mode]]
#+begin_quote
  Cursor stays vertically centered.
#+end_quote
I use this for reading, mostly.
#+begin_src emacs-lisp
(use-package centered-cursor-mode)
#+end_src
**** [[https://github.com/Silex/elmacro][elmacro]]
#+begin_quote
  Package to display keyboard macros or latest interactive commands as emacs lisp.
#+end_quote
#+begin_src emacs-lisp
(use-package elmacro
  :disabled t
  :defer 10
  :config
  (elmacro-mode))
#+end_src
*** Hydras
**** toggle
#+begin_src emacs-lisp
(with-eval-after-load 'hydra
  (defhydra h/toggle
    (:pre (progn
            (defvar flycheck-mode nil)
            (defvar focus-mode nil)
            (defvar d/show-async-tangle-results nil))
     :color pink
     :exit t
     :hint nil)
    "
_a_ abbrev:              %-3s`abbrev-mode   _d_ debug-on-error:      %-3s`debug-on-error   _P_ prettify-symbols:       %-3s`prettify-symbols-mode
_i_ aggressive-indent:   %-3s`aggressive-indent-mode   _l_ rlines:              %-3s`d/rlines-mode   _F_ focus:                  %-3s`focus-mode
_c_ column-indicator:    %-3s`fci-mode   _p_ smartparens:         %-3s`smartparens-mode   _z_ async-tangle-results:   %-3s`d/show-async-tangle-results
_f_ flycheck:            %-3s`flycheck-mode   _e_ evil-smartparens:    %-3s`evil-smartparens-mode
_s_ flyspell:            %-3s`flyspell-mode   _w_ global-whitespace:   %-3s`global-whitespace-mode
"
    ("a" abbrev-mode nil)
    ("i" aggressive-indent-mode nil)
    ("d" toggle-debug-on-error nil)
    ("c" fci-mode nil)
    ("l" d/rlines-mode nil)
    ("p" smartparens-mode nil)
    ("P" prettify-symbols-mode nil)
    ("e" evil-smartparens-mode nil)
    ("f" flycheck-mode nil)
    ("F" focus-mode nil)
    ("s" flyspell-mode nil)
    ("w" global-whitespace-mode nil)
    ("z" (if d/show-async-tangle-results
             (setq d/show-async-tangle-results nil)
           (setq d/show-async-tangle-results t)) nil)
    ("q" nil)))
#+end_src

*** Bindings
#+begin_src emacs-lisp
(d/leader-keys
 "t"   '(:command h/toggle/body :wk "toggle"))

(with-eval-after-load 'evil
  (evil-define-key 'normal custom-mode-map
    "q" #'Custom-buffer-done)

  (evil-add-hjkl-bindings occur-mode-map 'emacs
    (kbd "/")       'evil-search-forward
    (kbd "n")       'evil-search-next
    (kbd "N")       'evil-search-previous
    (kbd "C-d")     'evil-scroll-down
    (kbd "C-u")     'evil-scroll-up
    (kbd "C-w C-w") 'other-window))
#+end_src
** Evil
*** [[https://github.com/syohex/emacs-evil-anzu][evil-anzu]]
#+begin_src emacs-lisp
(use-package evil-anzu
  :after evil
  :config
  (setq anzu-cons-mode-line-p nil)
  (defun d/anzu-update-mode-line (here total)
    (when anzu--state
      (let ((status (cl-case anzu--state
                      (search (format "%s/%d%s"
                                      (anzu--format-here-position here total)
                                      total (if anzu--overflow-p "+" "")))
                      (replace-query (format "(%d replace)" total))
                      (replace (format "(%d/%d)" here total)))))
        status)))
  (setq anzu-mode-line-update-function #'d/anzu-update-mode-line))
#+end_src
*** [[https://github.com/TheBB/evil-indent-plus][evil-indent-plus]]
#+begin_quote
  Better indent textobjects for evil
#+end_quote
#+begin_src emacs-lisp
(use-package evil-indent-plus
  :after evil
  :config
  (evil-indent-plus-default-bindings))
#+end_src
*** [[https://github.com/redguardtoo/evil-matchit][evil-matchit]]
#+begin_src emacs-lisp
(use-package evil-matchit
  :after evil
  :config (global-evil-matchit-mode 1))
#+end_src
*** [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]]
#+begin_quote
  Comment/uncomment lines efficiently. Like Nerd Commenter in Vim
#+end_quote
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :commands (evilnc-comment-operator
             d/comment-or-uncomment-lines-inverse)
  :general
  (nmap
   "gc" 'evilnc-comment-operator
   "gy" 'evilnc-copy-and-comment-lines)
  (d/leader-keys
   ";"  'evilnc-comment-operator
   "c"  '(:ignore t :wk "comment")
   "ci" 'd/comment-or-uncomment-lines-inverse
   "cl" 'evilnc-comment-or-uncomment-lines
   "cp" 'evilnc-comment-or-uncomment-paragraphs
   "ct" 'evilnc-comment-or-uncomment-to-the-line
   "cy" 'evilnc-copy-and-comment-lines)
  :config
  (defun d/comment-or-uncomment-lines-inverse (&optional arg)
    "Source: https://git.io/vQKza"
    (interactive "p")
    (let ((evilnc-invert-comment-line-by-line t))
      (evilnc-comment-or-uncomment-lines arg))))
#+end_src
*** [[https://github.com/therockmandolinist/evil-numbers][evil-numbers]]
#+begin_quote
  Increment and decrement numbers in Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package evil-numbers
  :quelpa (evil-numbers
           :fetcher github
           :repo "therockmandolinist/evil-numbers"))
#+end_src
*** [[https://github.com/emacs-evil/evil-surround][evil-surround]]
#+begin_src emacs-lisp
(use-package evil-surround
  :after evil
  :config
  (global-evil-surround-mode 1))
#+end_src
*** [[https://github.com/cute-jumper/evil-embrace.el][evil-embrace]]
#+begin_src emacs-lisp
(use-package evil-embrace
  :after evil-surround
  :config
  (add-hook 'org-mode-hook 'embrace-org-mode-hook)
  (evil-embrace-enable-evil-surround-integration))
#+end_src
** Org
*** [[https://github.com/gregsexton/ob-ipython][ob-ipython]]
#+begin_quote
  org-babel integration with Jupyter for evaluation of (Python by default) code blocks
#+end_quote
#+begin_src emacs-lisp
(use-package ob-ipython
  :after org)
#+end_src
*** [[https://github.com/kawabata/ox-pandoc][ox-pandoc]]
#+begin_quote
  Another org-mode exporter via pandoc.
#+end_quote
Translates Org-mode file to various other formats via Pandoc. Pretty neat.
#+begin_src emacs-lisp
(use-package ox-pandoc
  :after ox
  :config
  ;; default options for all output formats
  (setq org-pandoc-options '((standalone . t)
                             (latex-engine . xelatex)
                             (mathjax . t)
                             (parse-raw . t)))
  ;; cancel above settings only for 'docx' format
  (setq org-pandoc-options-for-docx '((standalone . nil))))
#+end_src
*** [[https://github.com/marsmining/ox-twbs][ox-twbs]]
#+begin_quote
  Export org-mode docs as HTML compatible with Twitter Bootstrap.
#+end_quote
#+begin_src emacs-lisp
(use-package ox-twbs
  :after ox)
#+end_src
*** [[https://github.com/snosov1/toc-org][toc-org]]
#+begin_quote
  toc-org is an Emacs utility to have an up-to-date table of contents in the
  org files without exporting (useful primarily for readme files on GitHub)
#+end_quote
#+begin_src emacs-lisp
(use-package toc-org
  :after org
  :config
  (add-hook 'org-mode-hook #'toc-org-enable))
#+end_src
*** [[https://github.com/myuhe/org-gcal.el][org-gcal]]
#+begin_quote
  Org sync with Google Calendar
#+end_quote
#+begin_src emacs-lisp
(use-package org-gcal
  :commands org-gcal-sync
  :config
  (setq org-gcal-client-id (password-store-get "api/org-gcal-id")
        org-gcal-client-secret (password-store-get "api/org-gcal-secret")
        org-gcal-file-alist '(("diegoamundo@gmail.com" . "~/Dropbox/org/gcal.org"))))
#+end_src
*** [[https://github.com/larstvei/ox-gfm][ox-gfm]]
#+begin_src emacs-lisp
(use-package ox-gfm
  :after ox)
#+end_src
** Elfeed
*** [[https://github.com/remyhonig/elfeed-org][elfeed-org]]
#+begin_quote
  Configure the Elfeed RSS reader with an Orgmode file
#+end_quote
#+begin_src emacs-lisp
(use-package elfeed-org
  :after elfeed
  :config
  (elfeed-org))
#+end_src

*** [[https://github.com/algernon/elfeed-goodies][elfeed-goodies]]
#+begin_quote
  Various goodies for Elfeed
#+end_quote
#+begin_src emacs-lisp
(use-package elfeed-goodies
  :after elfeed
  :config
  (elfeed-goodies/setup)
  (setq elfeed-goodies/entry-pane-position 'bottom))
#+end_src
* Fun
** Packages
*** [[https://github.com/josuah/drawille][drawille]]
#+begin_quote
  Drawille library implementation in elisp.
#+end_quote
Draws stuff in ascii.
#+begin_src emacs-lisp
(use-package drawille)
#+end_src
*** [[https://github.com/johanvts/emacs-fireplace/][fireplace]]
#+begin_quote
  A cozy fireplace for emacs.
#+end_quote
For the cold winters.
#+begin_src emacs-lisp
(use-package fireplace
  :config
  :general
  (nmap :keymaps 'fireplace-mode-map
    "q" 'fireplace-off
    "Q" 'fireplace-off
    "-" 'fireplace-down
    "=" 'fireplace-up
    "*" 'fireplace-toggle-smoke))
#+end_src
*** [[https://github.com/therockmandolinist/emacs-hacker-typer][hacker-typer]]
#+begin_quote
  A customizable implementation of http://hackertyper.com in emacs.
#+end_quote
#+begin_src emacs-lisp
(use-package hacker-typer
  :quelpa (hacker-typer
           :fetcher github
           :repo "therockmandolinist/emacs-hacker-typer"
           :files (:defaults "hackerman.png"))
  :config
  (setq hacker-typer-show-hackerman t)
  (setq hacker-typer-remove-comments t))
#+end_src
*** [[https://www.emacswiki.org/emacs/highlight-tail.el][highlight-tail]]
#+begin_quote
  Draw a colourful "tail" while you write
#+end_quote
(pure awesome)
#+begin_src emacs-lisp
(use-package highlight-tail)
#+end_src
*** [[https://github.com/TeMPOraL/nyan-mode][nyan-mode]]
#+begin_quote
  Nyan Cat for Emacs! Nyanyanyanyanyanyanyanyanyan!
#+end_quote
For show.
#+begin_src emacs-lisp
(use-package nyan-mode
  :config
  (nyan-mode))
#+end_src
*** [[https://github.com/rbanffy/selectric-mode][selectric-mode]]
#+begin_quote
  Make your Emacs sound like a proper typewriter.
#+end_quote
Clackity-clack.
#+begin_src emacs-lisp
(use-package selectric-mode)
#+end_src
*** [[https://github.com/parkouss/speed-type][speed-type]]
#+begin_quote
  Practice touch/speed typing in emacs.
#+end_quote
#+begin_src emacs-lisp
(use-package speed-type
  :general (d/leader-keys "as" 'speed-type-text)
  :config
  (setq speed-type--gb-url-format
        "http://www.gutenberg.org/cache/epub/%d/pg%d.txt"))
#+end_src
*** [[https://gitlab.com/iankelling/spray][spray]]
#+begin_quote
A speed reading mode for Emacs.
#+end_quote
#+begin_src emacs-lisp
(use-package spray)
#+end_src
*** [[https://github.com/vibhavp/emacs-xkcd][xkcd]]
#+begin_quote
  Read xkcd from Emacs.
#+end_quote
#+begin_src emacs-lisp
(use-package xkcd
  :general (d/leader-keys "ax" 'xkcd)
  :general
  (nmap :keymaps 'xkcd-mode-map
    "j" 'xkcd-next
    "h" 'xkcd-prev
    "k" 'xkcd-prev
    "l" 'xkcd-next
    "t" 'xkcd-alt-text
    "q" 'xkcd-kill-buffer
    "c" 'xkcd-copy-link
    "g" 'xkcd-get
    "r" 'xkcd-rand
    "o" 'xkcd-open-browser
    "e" 'xkcd-open-explanation-browser
    "G" 'xkcd-get-latest)
  :config)
#+end_src
** Functions
#+begin_src emacs-lisp
(eval-when-compile
  (defvar zone-programs))

(defun d/zone-choose ()
  "Choose a PGM to run for `zone'.

Source: http://tinyurl.com/lo96nwc"
  (interactive)
  (require 'zone nil t)
  (let* ((pgm (completing-read
               "Program: "
               (mapcar #'symbol-name zone-programs)))
         (zone-programs (list (intern pgm))))
    (redisplay)
    (zone)))
#+end_src
** Bindings
#+begin_src emacs-lisp
(d/leader-keys
 "ag"  '(:ignore t :wk "games")
 "agd" 'dunnet
 "agg" 'gomoku
 "agt" 'tetris)
#+end_src

* Web?
** Packages
*** [[https://github.com/skeeto/elfeed][elfeed]]
#+begin_quote
  An Emacs web feeds client
#+end_quote
Configure the Elfeed RSS reader with an Orgmode file
#+begin_src emacs-lisp
(use-package elfeed
  :general
  (d/leader-keys "ae" 'elfeed)
  (nmap :keymaps 'elfeed-search-mode-map
    "RET" 'elfeed-search-show-entry
    "+" 'elfeed-search-tag-all
    "-" 'elfeed-search-untag-all
    "G" 'elfeed-search-fetch
    "S" 'elfeed-search-set-filter
    "b" 'elfeed-search-browse-url
    "g" 'elfeed-search-update--force
    "q" 'quit-window
    "r" 'elfeed-search-untag-all-unread
    "s" 'elfeed-search-live-filter
    "u" 'elfeed-search-tag-all-unread
    "y" 'elfeed-search-yank
    "U" 'elfeed-update)
  (nmap :keymaps 'elfeed-show-mode-map
    "+" 'elfeed-show-tag
    "-" 'elfeed-show-untag
    "P" 'elfeed-show-play-enclosure
    "b" 'elfeed-show-visit
    "d" 'elfeed-show-save-enclosure
    "g" 'elfeed-show-refresh
    "l" 'elfeed-goodies/split-show-next
    "h" 'elfeed-goodies/split-show-prev
    "q" 'elfeed-kill-buffer
    "s" 'elfeed-show-new-live-search
    "y" 'elfeed-show-yank)
  :config
  (add-hook 'elfeed-search-mode-hook (lambda () (evil-smartparens-mode -1))))
#+end_src
*** [[https://github.com/aaronbieber/sunshine.el][sunshine]]
#+begin_quote
  An Emacs package for displaying the forecast from OpenWeatherMap.
#+end_quote
#+begin_src emacs-lisp
(use-package sunshine
  :general
  (d/leader-keys
   "aW" 'sunshine-quick-forecast
   "aw" 'sunshine-forecast)
  :config
  (setq sunshine-location "02139,USA"
        sunshine-appid (password-store-get "api/openweathermap")))
#+end_src
* Local vars!
I'll probably remove that exclamation point at some point, but right now I'm
excited about file local vars.

#+begin_example
# Local Variables:
# after-save-hook: (git-gutter d/async-tangle-init)
# End:
#+end_example
