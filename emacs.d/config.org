#+TITLE: Emacs Init File!
#+PROPERTY: header-args :results silent :comments link :tangle ~/dotfiles/emacs.d/config.el

* Intro

This is the bulk of my emacs configuration, loaded by [[./init.el][init.el]]. It's pretty cool
that I can write it in org mode, because easy organization and rearrangement
are pretty sweet. Check out [[https://github.com/aaronbieber/dotfiles/tree/master/configs/emacs.d][@aaronbieber]], [[https://github.com/hrs/dotfiles/tree/master/emacs.d][@hrs]], and [[https://github.com/syl20bnr/spacemacs][spacemacs]] - a lot of the
inspiration (and erm, code) for this is taken from them.

:NOTE:
*Note:* The usual way to do this is to call ~(org-babel-load-file "config.org")~,
and I did that for a while, but for whatever reason I decided I wanted
=config.el= (and its compiled verison) to be produced as I changed the file
itself, hence the [[#dotfile-handling][dotfile handling]] functions and [[#local-vars][file local variables]]. Also,
the optional ~COMPILE~ argument of ~org-babel-load-file~ wasn't working for me, so
there's that.
:END:

First off, let's set lexical binding, in accordance with the
[[https://github.com/bbatsov/emacs-lisp-style-guide#source-code-layout--organization][emacs-lisp-style-guide]], and silence some compiler warnings. Now technically,
there's not really any point to byte-compiling your init.el, so erm, don't
follow my example there? Whatever.
#+begin_src emacs-lisp :comments no
;;; -*- lexical-binding: t; byte-compile-warnings: (not free-vars unresolved make-local); -*-
#+end_src

* Contents                                                            :toc_1:
- [[#intro][Intro]]
- [[#initial-setup][Initial Setup]]
- [[#package-management][Package management]]
- [[#core][Core]]
- [[#help][Help]]
- [[#files-and-buffers][Files and Buffers]]
- [[#editing][Editing]]
- [[#navigation][Navigation]]
- [[#git-and-github][Git and github]]
- [[#appearance][Appearance]]
- [[#modes][Modes]]
- [[#enhancements][Enhancements]]
- [[#fun][Fun]]
- [[#web][Web?]]
- [[#local-vars][Local vars!]]

* Initial Setup
** Personal Info

#+begin_src emacs-lisp
(setq user-full-name "Diego A. Mundo"
      user-mail-address "diegoamundo@gmail.com")
#+end_src
** Server
Start server if not already running. You can do this with ~emacs --daemon~ or
even automate it with ~brew services start emacs~ on macOS, but I usually just
run Emacs on login anyway, so this suffices.

This makes startup time irrelevant. Start emacs once, connect with emacsclient
every other time. See [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html#Emacs-Server][Using Emacs as a Server]].
#+begin_src emacs-lisp
(require 'server)
(unless (server-running-p)
  (server-start))
#+end_src
** Load Path
Add [[./lisp][lisp]] directory and subdirectories to ~load-path~ and ~custom-theme-load-path~.

This is where I put lisp that isn't necessarily central to my config or needs
to be in a standalone file such as a some auth settings, lisp practice,
really bad self-made themes, ~org-export-async-init-file~, etc.
#+begin_src emacs-lisp
(eval-and-compile
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
  (let ((default-directory  "~/.emacs.d/lisp/"))
    (normal-top-level-add-subdirs-to-load-path))

  (add-to-list 'custom-theme-load-path "~/.emacs.d/lisp/"))
#+end_src
* Package management
** Defaults
*** Package-archives
This is adds places to fetch external packages from, using ~package-install~ or
[[#use-package][use-package]]. [[https://melpa.org/#/][Melpa]] is probably the best of these, having the biggest variety
and most active development. It builds packages around every 4 hours or so
directly from source.
#+begin_src emacs-lisp
(add-to-list 'package-archives '("org"       . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("melpa"     . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/"))
#+end_src
*** package-initialize
Load and activate packages. I /think/ this tells Emacs about what features are
available and where to find them.

Note that this is usually in init.el, but I put it down here because it helped
install the latest org-version without much fuss (otherwise there was a
conflict where the built-in version was always loaded). See [[#org-mode][org-mode]] for a bit
more info.
#+begin_src emacs-lisp
(package-initialize)
#+end_src
*** async-bytecomp-mode
Byte compile installed packages asynchronously, which remedies errors on
upgrading loaded packages (or something).
#+begin_src emacs-lisp
(with-eval-after-load 'async-bytecomp
  (async-bytecomp-package-mode 1)
  ;; (setq async-bytecomp-allowed-packages 'all)
  )
#+end_src
** Packages
*** [[https://github.com/jwiegley/use-package][use-package]]
#+begin_quote
  A use-package declaration for simplifying your .emacs
#+end_quote
An excellent utility for managing packages and package configuration in a neat
and organized way, with advanced support for deferring, pre/post-loading
configuration, time reporting, and more.

Using use-package, you can use the same init file across computers without
keeping track of what's installed or not and it will ensure that any missing
packages are installed. It's pretty neat.
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+end_src
I also set some variables - in particular, tell me the load time when a package
takes more than .001 seconds, always tell me about package loading, and always
defer and ensure packages are installed unless otherwise stated.
#+begin_src emacs-lisp
(setq use-package-minimum-reported-time .001
      use-package-verbose t
      use-package-always-defer t
      use-package-always-ensure t)

(eval-when-compile
  (require 'use-package))
#+end_src
*** [[https://github.com/quelpa/quelpa/][quelpa]]
#+begin_quote
  Build and install your Emacs Lisp packages on-the-fly directly from source
#+end_quote
Quelpa allows you to install packages from /anywhere/, provided the right [[https://github.com/melpa/melpa#recipe-format][melpa
format recipe]]. It's a great way to keep up with the bleeding edge of a package
(if melpa just isn't enough for you), install packages that aren't on melpa,
try out a different development branch, install your fork as a package... you
get the point.
#+begin_src emacs-lisp
(setq quelpa-update-melpa-p nil)
(unless (require 'quelpa nil t)
  (with-temp-buffer
    (url-insert-file-contents "https://raw.github.com/quelpa/quelpa/master/bootstrap.el")
    (eval-buffer)))
#+end_src
*** [[https://github.com/quelpa/quelpa-use-package][quelpa-use-package]]
#+begin_quote
  Emacs quelpa handler for use-package
#+end_quote
Integrates use-package and quelpa for maximum fun.
#+begin_src emacs-lisp
(quelpa
 '(quelpa-use-package
   :fetcher github
   :repo "quelpa/quelpa-use-package"))
(require 'quelpa-use-package)
(quelpa-use-package-activate-advice)
#+end_src
** Functions
#+begin_src emacs-lisp
(defun updates ()
  "Run `paradox-upgrade-packages' and  `quelpa-upgrade'."
  (interactive)
  (quelpa-upgrade)
  (paradox-upgrade-packages))
#+end_src
* Core
** Defaults
#+begin_src emacs-lisp
(defalias 'yes-or-no-p #'y-or-n-p)
#+end_src
Allow more messages in ~*Messages*~ buffer so you can look at what happened waaay
back if you need to.
#+begin_src emacs-lisp
(setq message-log-max 10000)
#+end_src
Scroll one line at a time.
#+begin_src emacs-lisp
(setq scroll-step 1
      scroll-conservatively 10000)
#+end_src
Smoother mouse scrolling, which is now irrelevant to me since I've disabled the
mouse in emacs.
#+begin_src emacs-lisp :tangle no
(setq mouse-wheel-scroll-amount '(2 ((shift) . 1) ((control) . nil))
      mouse-wheel-progressive-speed nil)
#+end_src
Allow editing in the minibuffer... /with/ the minibuffer. Also resize minibuffer
windows to fit text.
#+begin_src emacs-lisp
(setq enable-recursive-minibuffers t
      resize-mini-windows t)
#+end_src
Show the column number in the modeline, because I'm not a savage. Also, only
scroll the current line horizontally (as opposed to the whole buffer) to see the
rest of a truncated line.
#+begin_src emacs-lisp
(setq column-number-mode t
      auto-hscroll-mode 'current-line)
#+end_src
Use tab for completion and cycling candidates (relevant for the minibuffer?).
#+begin_src emacs-lisp
(setq tab-stop-list (number-sequence 4 200 4)
      completion-cycle-threshold t
      tab-always-indent 'complete)
#+end_src
Use ssh by default and remember passwords for [[https://www.gnu.org/software/tramp/][tramp]]. Also make it quieter
except for warnings and errors.
#+begin_src emacs-lisp
(setq tramp-default-method "ssh"
      tramp-verbose 2
      password-cache-expiry nil)
#+end_src
Save stuff you've copied in other applications to the emacs kill-ring.
#+begin_src emacs-lisp
(setq save-interprogram-paste-before-kill t)
#+end_src
** Functions
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (defun diego/async-tangle-init ()
    "Asynchronously tangle config.org and and byte-compile."
    (interactive)
    (let ((init-tangle-start-time (current-time)))
      (async-start
       (lambda ()
         ;; make async emacs aware of packages (for byte-compilation)
         (package-initialize)
         (require 'org)

         ;; tangle
         (org-babel-tangle-file
          (expand-file-name (locate-user-emacs-file "config.org")))

         ;; byte-compile
         (byte-compile-file
          (expand-file-name  (locate-user-emacs-file "config.el"))))
       `(lambda (result)
          (if result
              (message "SUCCESS: config.org successfully tangled. (%.3fs)"
                       (float-time (time-subtract (current-time)
                                                  ',init-tangle-start-time)))
            (message "ERROR: config.org tangle failed."))))))

  (defun diego/async-babel-tangle ()
    "Tangle file asynchronously"
    (interactive)
    (let ((file (buffer-file-name)))
      (async-start
       `(lambda ()
          (require 'org)
          (org-babel-tangle-file ,file))
       (lambda (result)
         (if result
             (message "SUCCESS: successfully tangled file.")
           (message "ERROR: tangle file failed.")))))))

(defmacro diego/setup-mode (modes &rest body)
  (declare (indent defun))
  (let ((modes (if (listp modes) modes (list modes))))
    (let ((setup-func
           (intern (concat "diego/setup-"
                           (symbol-name (car modes))
                           "-mode"))))
      `(progn
         (defun ,setup-func ()
           ,@body)
         ,@(cl-loop for mode in modes collect
                    (let ((mode-hook (intern (concat (symbol-name mode)
                                                     "-mode-hook"))))
                      `(add-hook ',mode-hook #',setup-func)))))))

(defun diego/ret ()
  "Dwim return key binding.

If url at point, opens url with `goto-address-at-point'.
If in `org-mode', calls `org-open-at-point'.
Otherwise, executes `evil-ret'."
  (interactive)
  (cond ((thing-at-point 'url) (goto-address-at-point))
        ((eq major-mode 'org-mode)
         (unless (ignore-errors (or (org-open-at-point) t))
           (evil-ret)))
        (t (evil-ret))))

(defmacro diego/repeat-calls (name num-args &rest args)
  (declare (indent defun))
  (if (not (= (mod (length args) num-args) 0))
      (error "diego/repeat-calls: Not enough arguments.")
    `(progn
       ,@(cl-loop while args collect
                  `(,name ,@(cl-loop repeat num-args collect (pop args)))))))
#+end_src
** Packages
These are packages that I consider /absolutely essential/ to my emacs workflow,
or that enhance emacs at a deeper level than any regular mode. Or, I just had
to load them before other things.
*** [[https://github.com/tarsius/no-littering/][no-littering]]
#+begin_quote
  Help keeping ~/.emacs.d clean
#+end_quote
Usually, a bunch of crap is kept in your ~.emacs.d~ folder by both built-in emacs
features and external packages. This package sets up a convention to store
everything in either ~.emacs.d/var~ or ~.emacs.d/etc~.
#+begin_src emacs-lisp
(use-package no-littering
  :demand t
  :config
  (savehist-mode 1)
  (add-to-list 'savehist-additional-variables 'kill-ring)
  (save-place-mode 1)
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))
#+end_src
*** [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]]
#+begin_quote
  Make Emacs use the $PATH set up by the user's shell
#+end_quote
If you've ever had issues where emacs doesn't find your executables, this
package should fix them nicely.
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :defer 5
  :config
  (setq exec-path-from-shell-check-startup-files nil)
  (exec-path-from-shell-initialize))
#+end_src
*** [[https://github.com/emacs-evil/evil][evil]]
#+begin_quote
  The extensible vi layer for Emacs.
#+end_quote
I really like Vim bindings. I originally learned Emacs bindings but there was
something really appealing about the simplicity and power of Vim bindings/modal
editing. So I went for it. Now I'll never go back.
**** Setup
#+begin_src emacs-lisp
(use-package evil
  :demand t
  :if (not noninteractive)
  :bind (:map
         evil-normal-state-map
         ("RET" . diego/ret)
         ("S-SPC" . org-agenda-list)
         ("-" . negative-argument)
         ("\\" . evil-window-next)
         ("C-_" . keyboard-quit)
         ("C-/" . keyboard-quit)
         ([escape] . keyboard-quit)
         :map evil-insert-state-map
         ("C-_" . evil-normal-state)
         ("C-/" . evil-normal-state)
         :map evil-replace-state-map
         ("C-_" . evil-normal-state)
         ("C-/" . evil-normal-state)
         :map evil-visual-state-map
         ("C-_" . keyboard-quit)
         ("C-/" . keyboard-quit)
         ([escape] . keyboard-quit)
         :map evil-motion-state-map
         ("RET" . diego/ret))
  :init
  (setq evil-want-C-u-scroll t
        evil-want-fine-undo t
        evil-search-module 'evil-search
        evil-lookup-func (lambda () (man (thing-at-point 'word))))
  :config
  (setq evil-insert-state-cursor '(bar . 1)
        evil-emacs-state-cursor '(bar . 1)
        evil-normal-state-tag  " NORMAL "
        evil-insert-state-tag  " INSERT "
        evil-motion-state-tag  " MOTION "
        evil-visual-state-tag  " VISUAL "
        evil-emacs-state-tag   " EMACS "
        evil-replace-state-tag " REPLACE ")

  (evil-ex-define-cmd "dtw" #'delete-trailing-whitespace)
  (evil-ex-define-cmd "buffers" #'ibuffer)

  (evil-mode 1))
#+end_src
**** Modes
#+begin_src emacs-lisp
(with-eval-after-load 'evil
  ;; Use Emacs state in these additional modes.
  (dolist (mode '(ag-mode
                  flycheck-error-list-mode
                  git-rebase-mode
                  eshell-mode
                  calc-mode
                  calc-trail-mode
                  sunshine-mode
                  term-mode
                  notmuch-tree-mode
                  profiler-report-mode))
    (add-to-list 'evil-emacs-state-modes mode))

  (setq evil-emacs-state-modes (delq 'ibuffer-mode evil-emacs-state-modes))
  (setq evil-emacs-state-modes (delq 'Custom-mode evil-emacs-state-modes))
  (setq evil-insert-state-modes (delq 'term-mode evil-insert-state-modes))

  ;; Use insert state in these additional modes.
  (dolist (mode '(magit-log-edit-mode org-capture-mode))
    (add-to-list 'evil-insert-state-modes mode))

  (add-to-list 'evil-buffer-regexps '("\\*Flycheck")))
#+end_src
**** Use-package binding helper
This adds an ~:evil-bind~ keyword to use-package declarations, so I can niftily
set evil bindings in a more integrated way. Check out [[#org-mode][my org mode setup]] for an example.
#+begin_src emacs-lisp
(with-eval-after-load 'evil
  (eval-and-compile

    (defun diego/plist-get-chunk (plist keyword)
      (let* ((exists (cl-position keyword plist))
             (start (when exists (1+ exists)))
             (end (cl-position-if #'keywordp plist :start start)))
        (when start
          (list (1- start) end (cl-subseq plist start end)))))

    (defmacro diego/evil-bind-keys (&rest plist)
      (let* ((only-keys (cl-remove-if-not #'keywordp plist))
             (valid-keys
              (cl-remove-if-not (lambda (x)
                                  (fboundp
                                   (intern (concat
                                            "evil-"
                                            (substring (symbol-name x) 1)
                                            "-state"))))
                                only-keys)))
        `(progn
           ,@(cl-loop for state in valid-keys collect
                      (let* ((plist-chunk (diego/plist-get-chunk plist state))
                             (start (car plist-chunk ))
                             (end (cadr plist-chunk))
                             (bindings (nth 2 plist-chunk))
                             (map (pop bindings)))
                        (setq plist (append (cl-subseq plist 0 start)
                                            (cl-subseq plist
                                                       (if end end
                                                         (length plist))
                                                       (length plist))))
                        `(evil-define-key ',(intern (substring (symbol-name state) 1)) ,map
                           ,@(cl-loop while bindings append
                                      (let* ((pair (pop bindings))
                                             (key (if (vectorp (car pair))
                                                      (car pair)
                                                    (read-kbd-macro (car pair))))
                                             (func (cdr pair)))
                                        `(,key ',func)))))))))

    (defun evil-bind-use-package-set-keyword ()
      (unless (member :evil-bind use-package-keywords)
        (setq use-package-keywords
              (let* ((pos (cl-position :bind use-package-keywords))
                     (head (cl-subseq use-package-keywords 0 (+ 1 pos)))
                     (tail (nthcdr (+ 1 pos) use-package-keywords)))
                (append head (list :evil-bind) tail)))))

    (defun use-package-normalize/:evil-bind (name keyword args)
      (use-package-as-one (symbol-name keyword) args
        (lambda (label arg)
          (unless (consp arg)
            (use-package-error
             (concat label " a (<string or vector> . <symbol or string>)"
                     " or list of these")))
          (use-package-normalize-pairs (lambda (k)
                                         (or (stringp k) (vectorp k)))
                                       (lambda (b)
                                         (or (symbolp b) (stringp b)))
                                       name label arg))))

    (defun use-package-handler/:evil-bind (name-symbol keyword args rest state)
      (let ((body (use-package-process-keywords name-symbol rest state)))
        (if args
            (use-package-concat
             `((diego/evil-bind-keys ,@args))
             body)
          body)))

    (evil-bind-use-package-set-keyword)))
#+end_src
*** [[https://github.com/justbur/emacs-bind-map][evil-leader (emacs-bind-map)]]
#+begin_quote
  Bind personal keymaps in multiple locations
#+end_quote
A good chunk if not all of the bindings/functions in this section are either
based on or copied from spacemacs, so definitely check them out!
**** Setup
#+begin_src emacs-lisp
(use-package bind-map
  :after evil
  :bind (:map universal-argument-map
              ("SPC u" . universal-argument-more))
  :config)
#+end_src
**** Leader wrapper
#+begin_src emacs-lisp
(with-eval-after-load 'bind-map
  (defvar diego-evil-leader-key "SPC"
    "Evil leader key.")

  (defvar diego-alt-evil-leader-key (concat "C-" diego-evil-leader-key)
    "Evil leader key for insert and emacs modes.")

  (defvar diego-major-mode-leader-key ","
    "Major mode leader key.")

  (defvar diego-alt-major-mode-leader-key (concat "C-" diego-major-mode-leader-key)
    "Major mode leader key.")

  (defvar diego-default-map (make-sparse-keymap)
    "Base keymap for all spacemacs leader key commands.")

  (bind-map diego-default-map
    :evil-keys (diego-evil-leader-key)
    :evil-states (normal motion visual))

  (bind-map diego-default-map
    :evil-keys (diego-alt-evil-leader-key)
    :evil-states (insert emacs))

  (defun diego/set-leader-keys (key def &rest bindings)
    "Add KEY and DEF as key bindings under
`diego-evil-leader-key'.

KEY should be a string suitable for passing to `kbd', and it
should not include the leaders. DEF is most likely a quoted
command. See `define-key' for more information about the possible
choices for DEF. This function simply uses `define-key' to add
the bindings.

For convenience, this function will accept additional KEY DEF
pairs. For example,

\(diego/set-leader-keys
   \"a\" 'command1
   \"C-c\" 'command2
   \"bb\" 'command3\)

Source: http://tinyurl.com/lxkjxq9"
    (declare (indent defun))
    (while key
      (define-key diego-default-map (kbd key) def)
      (setq key (pop bindings) def (pop bindings))))

  (defun diego//init-leader-mode-map (mode map &optional minor)
    "Check for MAP-prefix. If it doesn't exist yet, use `bind-map'
to create it and bind it to `diego-major-mode-leader-key'.
If MODE is a minor-mode, the third argument should be non nil.

Source: http://tinyurl.com/kxf5oeh"
    (let* ((prefix (intern (format "%s-prefix" map)))
           (leader1 diego-major-mode-leader-key)
           (leader2 (concat diego-evil-leader-key " m"))
           (leaders (delq nil (list leader1 leader2)))
           (alt-leader1 diego-alt-major-mode-leader-key)
           (alt-leader2 (concat diego-alt-evil-leader-key " m"))
           (alt-leaders (delq nil (list alt-leader1 alt-leader2))))
      (or (boundp prefix)
         (progn
           (eval
            `(bind-map ,map
               :prefix-cmd ,prefix
               ,(if minor :minor-modes :major-modes) (,mode)
               :evil-keys ,leaders
               :evil-states (normal motion visual)))
           (eval
            `(bind-map ,map
               :prefix-cmd ,prefix
               ,(if minor :minor-modes :major-modes) (,mode)
               :evil-keys ,alt-leaders
               :evil-states (insert emacs)))
           (boundp prefix)))))

  (defun diego/set-leader-keys-for-major-mode (mode key def &rest bindings)
    "Add KEY and DEF as key bindings under
`diego-major-mode-leader-key' and
`diego-major-mode-emacs-leader-key' for the major-mode
MODE. MODE should be a quoted symbol corresponding to a valid
major mode. The rest of the arguments are treated exactly like
they are in `diego/set-leader-keys'.

Source: http://tinyurl.com/k7u2x8s"
    (declare (indent defun))
    (let* ((map (intern (format "diego-%s-map" mode))))
      (when (diego//init-leader-mode-map mode map)
        (while key
          (define-key (symbol-value map) (kbd key) def)
          (setq key (pop bindings) def (pop bindings))))))

  (defun diego/set-leader-keys-for-minor-mode (mode key def &rest bindings)
    "Add KEY and DEF as key bindings under
`dotspacemacs-major-mode-leader-key' and
`dotspacemacs-major-mode-emacs-leader-key' for the minor-mode
MODE. MODE should be a quoted symbol corresponding to a valid
minor mode. The rest of the arguments are treated exactly like
they are in `spacemacs/set-leader-keys'.

Source: http://tinyurl.com/l3oenrf"
    (declare (indent defun))
    (let* ((map (intern (format "diego-%s-map" mode))))
      (when (diego//init-leader-mode-map mode map t)
        (while key
          (define-key (symbol-value map) (kbd key) def)
          (setq key (pop bindings) def (pop bindings)))))))
#+end_src
**** Use-package leader helper
#+begin_src emacs-lisp
(with-eval-after-load 'bind-key
  (eval-and-compile

    (defmacro diego/leader-bind-keys (&rest plist)
      (let* ((global-bindings (cl-subseq plist 0 (cl-position-if #'keywordp plist)))
             (only-keys (cl-remove-if-not #'keywordp plist))
             (mode-keys (cl-remove-if-not (lambda (x)
                                            (member x '(:major :minor)))
                                          only-keys)))
        `(progn
           ,(when global-bindings
              `(diego/set-leader-keys
                 ,@(cl-loop while global-bindings append
                            (let* ((pair (pop global-bindings))
                                   (key (car pair))
                                   (func (cdr pair)))
                              `(,key ',func)))))
           ,@(cl-loop for mode-type in mode-keys collect
                      (let* ((plist-chunk (diego/plist-get-chunk plist mode-type))
                             (start (car plist-chunk))
                             (end (cadr plist-chunk))
                             (bindings (nth 2 plist-chunk))
                             (leader-func (intern (concat "diego/set-leader-keys-for-"
                                                          (substring (symbol-name mode-type) 1)
                                                          "-mode")))
                             (mode (pop bindings)))
                        (setq plist (append (cl-subseq plist 0 start)
                                            (cl-subseq plist
                                                       (if end end
                                                         (length plist))
                                                       (length plist))))
                        `(,leader-func ',mode
                                       ,@(cl-loop while bindings append
                                                  (let* ((pair (pop bindings))
                                                         (key (car pair))
                                                         (func (cdr pair)))
                                                    `(,key ',func)))))))))


    (defun leader-bind-use-package-set-keyword ()
      (unless (member :leader-bind use-package-keywords)
        (setq use-package-keywords
              (let* ((pos (cl-position :bind use-package-keywords))
                     (head (cl-subseq use-package-keywords 0 (+ 1 pos)))
                     (tail (nthcdr (+ 1 pos) use-package-keywords)))
                (append head (list :leader-bind) tail)))))


    (defun use-package-normalize/:leader-bind (name keyword args)
      (use-package-as-one (symbol-name keyword) args
        (lambda (label arg)
          (unless (consp arg)
            (use-package-error
             (concat label " a (<string or vector> . <symbol or string>)"
                     " or list of these")))
          (use-package-normalize-pairs (lambda (k)
                                         (or (stringp k) (vectorp k)))
                                       (lambda (b)
                                         (or (symbolp b) (stringp b)))
                                       name label arg))))

    (defun use-package-handler/:leader-bind (name-symbol keyword args rest state)
      (let ((body (use-package-process-keywords name-symbol rest state)))
        (if args
            (use-package-concat
             `((diego/leader-bind-keys ,@args))
             body)
          body)))

    (leader-bind-use-package-set-keyword)))
#+end_src
*** [[https://github.com/abo-abo/swiper][ivy]]
#+begin_quote
  Ivy - a generic completion frontend for Emacs, Swiper - isearch with an
  overview, and more. Oh, man!
#+end_quote
A really nice search/completion system for emacs.
**** ivy
#+begin_src emacs-lisp
(use-package ivy
  :bind (:map
         ivy-minibuffer-map
         ([escape] . keyboard-escape-quit)
         ("C-/" . keyboard-escape-quit)
         ("RET" . ivy-alt-done)
         ([S-return] . ivy-dispatching-done)
         ([C-return] . ivy-immediate-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         ([S-up] . ivy-previous-history-element)
         ([S-down] . ivy-next-history-element))
  :leader-bind (("-" . ivy-resume)
                ("bb" . ivy-switch-buffer)
                ("bB" . ivy-switch-buffer-other-window))
  :init
  (setq ivy-do-completion-in-region nil)
  :config
  (ivy-mode 1)

  (setq ivy-re-builders-alist '((swiper . ivy--regex-plus)
                                (t . ivy--regex-ignore-order)))
  (setq ivy-format-function 'ivy-format-function-arrow ; DAT NICE ARROW THOUGH aosenuth
        projectile-completion-system 'ivy
        ivy-use-virtual-buffers t ; Show recent files
        ivy-count-format ""
        ivy-extra-directories nil; '("../") ; ignore current folder and parent dir
        ivy-initial-inputs-alist '((man . "^"))
        ivy-switch-buffer-faces-alist '((dired-mode . ivy-subdir))
        recentf-max-saved-items 50
        ivy-ignore-buffers
        '("\\` "
          "\\`\\*LV\\*"
          "\\`\\*magit"
          "\\`\\*epc"
          "\\`\\*Calc"
          "\\`\\*Colors"
          "\\`\\*helm"
          "\\`\\*Help"
          "\\`\\*Packages"
          "\\`\\*Customize"
          "\\`\\*info"
          "\\`\\*Compile"
          "\\`\\*anaconda-mode"
          "\\`\\*scratch"
          "\\`\\*Messages"
          "\\`todo.org"
          "\\`gcal.org"
          "\\`notes.org"
          "\\`archive.org"
          "\\`\\.org-gcal-token"
          "\\`elfeed.org"
          "\\`\\*elfeed-log\\*"
          "\\`\\*Man"
          "\\`\\*Quail"
          "\\`\\*Paradox Report\\*"
          "\\`\\*Backtrace\\*")))

(use-package ivy-hydra)
#+end_src
**** swiper
#+begin_src emacs-lisp
(use-package swiper
  :leader-bind (("ss" . swiper)
                ("sm" . swiper-multi)
                ("sS" . swiper-all))
  :config (setq swiper-goto-start-of-match t))
#+end_src
**** counsel
#+begin_src emacs-lisp
(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file))
  :leader-bind (("SPC" . counsel-M-x)
                ("ff" . counsel-find-file)
                ("fj" . counsel-file-jump)
                ("fl" . counsel-locate)
                ("hdF" . counsel-describe-face)
                ("hdb" . counsel-descbinds)
                ("hdf" . counsel-describe-function)
                ("hdv" . counsel-describe-variable)
                ("iu" . counsel-unicode-char)
                ("sr" . counsel-rg)
                ("y" . counsel-yank-pop))
  :commands counsel-describe-face
  :config
  (when (eq system-type 'darwin)
    (setq counsel-locate-cmd 'counsel-locate-cmd-mdfind))

  (setq conusel-org-goto-display-style 'path
        counsel-org-goto-separator ": "
        counsel-org-goto-face-style 'org
        counsel-org-goto-display-tags t
        counsel-org-goto-display-todo t
        counsel-find-file-ignore-regexp (concat "\\(\\`\\.\\)"
                                                "\\|\\(\\.elc$\\)"
                                                "\\|\\(.pyc$\\)")
        counsel-yank-pop-separator "
  ─────────────────────────
")
  (counsel-mode 1)
  (defalias 'ag #'counsel-ag)
  (defalias 'locate #'counsel-locate)

  (defun diego/counsel-yank-pop-action (s)
    "Make consistent with evil-paste-after.

Source: http://tinyurl.com/kyjk8cf"
    (save-excursion
      (undo-boundary)
      (unless (eq (point) (point-max))
        (forward-char))
      (with-ivy-window
        (delete-region ivy-completion-beg
                       ivy-completion-end)
        (insert (substring-no-properties s))
        (setq ivy-completion-end (point))))
    (forward-char (length s)))

  (advice-add #'counsel-yank-pop-action
              :override #'diego/counsel-yank-pop-action)

  (defun diego/counsel-yank-pop-format-function (cand-pairs)
    "Make counsel-yank-pop look a little more like the rest of ivy.

Source: http://tinyurl.com/k9j3bhg"
    (ivy--format-function-generic
     (lambda (str)
       (let ((temp-list (split-string (counsel--yank-pop-truncate str) "\n" t)))
         (mapconcat 'identity
                    (append (list (concat "> " (car temp-list)))
                            (mapcar (lambda (s) (concat "  " s))
                                    (cdr temp-list)))
                    "\n")))
     (lambda (str)
       (mapconcat (lambda (s) (concat "  " s))
                  (split-string (counsel--yank-pop-truncate str) "\n" t)
                  "\n"))
     cand-pairs
     counsel-yank-pop-separator))

  (advice-add #'counsel--yank-pop-format-function
              :override
              #'diego/counsel-yank-pop-format-function))
#+end_src
*** [[https://github.com/Ilazki/prettify-utils.el][prettify-utils]]
  #+begin_src emacs-lisp
(use-package prettify-utils
  :quelpa (prettify-utils
           :fetcher github
           :repo "Ilazki/prettify-utils.el"))
  #+end_src
*** [[http://orgmode.org/][org-mode]]
#+begin_quote
  Org mode is for keeping notes, maintaining TODO lists, planning projects, and
  authoring documents with a fast and effective plain-text system.
#+end_quote
But really, it's life.

:NOTES:
*Note:* Getting emacs to run the latest version of org can be weird. Least I
didn't find a satisfactory solution for a while. Check out this [[http://sachachua.com/blog/2014/05/update-org-7-comes-emacs-org-8-configuration-better-exports/][blog post]] for
some advice on that (still relevant now-2016). In particular, make sure you
have something like:

#+begin_src emacs-lisp :tangle no
(package-initialize)
(setq package-enable-at-startup nil)
#+end_src

at the beginning of your init.el/emacs.d, or as in my case something like:

#+begin_src emacs-lisp :tangle no
;; (package-initialize)
(require 'package)
(setq package-enable-at-startup nil)
;; ---------------------------
;; my load-path settings here
;; ---------------------------
(package-initialize)
#+end_src

I actually don't think I tried the former option, but the latter simply worked
so I went with it.
:END:

**** Defaults
***** Files
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (setq org-agenda-text-search-extra-files '(agenda-archives)
        org-agenda-files '("~/Dropbox (MIT)/org/todo.org" "~/Dropbox (MIT)/org/gcal.org")
        org-default-notes-file "~/Dropbox (MIT)/org/todo.org"
        diego/todo-file "~/Dropbox (MIT)/org/todo.org"
        diego/notes-file "~Dropbox (MIT)/org/notes.org"
        org-directory "~/Dropbox (MIT)/org"
        org-archive-location "~/Dropbox (MIT)/org/archive.org::"
        org-export-async-init-file
        (locate-user-emacs-file "lisp/org-async-init.el")))
#+end_src
***** Todo/agenda
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (setq org-enforce-todo-dependencies t
        org-log-done (quote time)
        org-log-redeadline (quote time)
        org-log-reschedule (quote time)
        org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-hide-tags-regexp ".*"
        org-agenda-span 'week)

  (setq org-agenda-deadline-faces
        '((1.0 . org-warning)
          (0.5 . org-upcoming-deadline)
          (0.0 . '(:foreground "#A89984"))))

  (setq org-todo-keywords
        '((sequence "TODO(t)" "IN-PROGRESS(p)" "WAITING(w)" "|"
                    "DONE(d)" "CANCELED(c)")
          (sequence "READ(r)" "|"
                    "DONE(h)")))

  (setq org-capture-templates
        '(("t" "Todo")
          ("ts" "Todo: School")
          ("tsU" "UROP" entry
           (file+olp diego/todo-file "School" "School" "UROP")
           "* TODO %?\nDEADLINE: %^t")
          ("ts6" "622" entry
           (file+olp diego/todo-file "School" "School" "622")
           "* TODO %?\nDEADLINE: %^t")
          ("te" "Todo: Emacs" entry
           (file+olp diego/todo-file "Emacs")
           "* TODO %?")
          ("n" "Note")
          ("g" "Google calendar" entry
           (file "~/Dropbox (MIT)/org/gcal.org") "* %?\n\n%^T"))))
#+end_src

***** Behavior/appearance
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (setq org-insert-heading-respect-content t
        org-src-window-setup 'current-window
        org-list-demote-modify-bullet '(("-" . "*")
                                        ("*" . "+"))
        org-export-in-background t
        org-confirm-babel-evaluate nil
        org-src-tab-acts-natively t
        org-M-RET-may-split-line nil
        org-list-use-circular-motion t
        org-log-into-drawer t
        org-imenu-depth 5
        org-goto-interface 'outline-path-completion
        org-outline-path-complete-in-steps nil
        org-link-search-must-match-exact-headline nil
        org-confirm-elisp-link-function 'y-or-n-p
        org-edit-src-persistent-message nil
        org-confirm-elisp-link-not-regexp (concat "(\\(wiki-search"
                                                  "\\|describe-function"
                                                  "\\|describe-variable"
                                                  "\\).*?)"))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (emacs-lisp . t)
     (calc . t)
     (ipython . t)
     (shell . t)
     (lisp . t)
     (C . t)))

  ;; appearance
  (setq org-src-fontify-natively t
        org-src-preserve-indentation t
        org-fontify-quote-and-verse-blocks t
        org-hide-emphasis-markers t
        org-startup-with-inline-images t
        org-ellipsis " …"
        org-highlight-latex-and-related '(latex)
        org-pretty-entities t
        org-image-actual-width 500)

  (mapc (lambda (arg) (setcdr arg (list (downcase (nth 1 arg)))))
        org-structure-template-alist)

  (add-to-list 'org-structure-template-alist
               (list "sel" (concat "#+begin_src emacs-lisp\n"
                                   "?\n"
                                   "#+end_src")))
  (add-to-list 'org-structure-template-alist
               (list "sp" (concat "#+begin_src python"
                                  "?\n"
                                  "#+end_src")))

  ;; latex
  (setq org-latex-listings t)
  (add-to-list 'org-latex-packages-alist '("" "listings"))
  (add-to-list 'org-latex-packages-alist '("" "color"))
  (add-to-list 'org-latex-packages-alist '("" "tabularx")))
#+end_src
**** Package
#+begin_src emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :defines (org-habit-graph-column)
  :evil-bind (:normal
              org-mode-map
              ("RET" . diego/ret)
              ("<" . org-metaleft)
              (">" . org-metaright)
              ("gh" . outline-up-heading)
              ("gl" . outline-next-visible-heading)
              ("gj" . org-forward-heading-same-level)
              ("gk" . org-backward-heading-same-level)
              ("gt" . org-todo)
              ("ga" . org-archive-subtree)
              ("M-l" . org-metaright)
              ("M-h" . org-metaleft)
              ("M-k" . org-metaup)
              ("M-j" . org-metadown)
              ("M-L" . org-shiftmetaright)
              ("M-H" . org-shiftmetaleft)
              ("M-K" . org-shiftmetaup)
              ("M-J" . org-shiftmetadown))
  :leader-bind (("C" . org-capture)
                ("bo". org-iswitchb)
                ("ao#" . org-agenda-list-stuck-projects)
                ("ao/" . org-occur-in-agenda-files)
                ("aoO" . org-clock-out)
                ("aoa" . org-agenda-list)
                ("aoe" . org-store-agenda-views)
                ("aol" . org-store-link)
                ("aom" . org-store-tags-view)
                ("aoo" . org-agenda)
                ("aos" . org-search-view)
                ("aot" . org-todo-list))
  :init
  (setq org-list-allow-alphabetical t)
  :config
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines)))
#+end_src
**** Variables
#+begin_src emacs-lisp
(defvar diego/org-prettify-alist
  (prettify-utils-generate
   ("TODO" "❯❯❯")
   ("READ" "❙❙❙")
   ("IN-PROGRESS" "○○○")
   ("WAITING" "￭￭￭")
   ("CANCELED" "✗✗✗")
   ("DONE" "✓✓✓")))
#+end_src
**** Functions
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (defmacro diego|create-block-wrap (blocktype)
    (let ((newfunc (intern
                    (concat "diego/org-wrap-with-block-"
                            (replace-regexp-in-string " " "-" blocktype)))))
      `(defun ,newfunc ()
         (interactive)
         (backward-paragraph)
         (insert (format "\n#+begin_%s" ,blocktype))
         (forward-paragraph)
         (insert (format "#+end_%s\n" (car (split-string ,blocktype))))
         (backward-paragrap))))

  (diego/repeat-calls diego|create-block-wrap 1
    "src"
    "src python"
    "src emacs-lisp"
    "export latex")

  (defmacro diego|org-emphasize (fname char)
    "Make function for setting the emphasis in org mode"
    `(defun ,fname () (interactive)
        (org-emphasize ,char)))

  (defun diego/org-agenda-toggle-date (current-line)
    "Toggle `SCHEDULED' and `DEADLINE' tag in the capture buffer.

Source: http://tinyurl.com/kq24yph"
    (interactive "P")
    (save-excursion
      (let ((search-limit (if current-line
                              (line-end-position)
                            (point-max))))

        (if current-line (beginning-of-line)
          (goto-char (point-min)))
        (if (search-forward "DEADLINE:" search-limit t)
            (replace-match "SCHEDULED:")
          (and (search-forward "SCHEDULED:" search-limit t)
             (replace-match "DEADLINE:"))))))

  (defun diego/org-insert-list-leader-or-self (char)
    "If on column 0, insert space-padded CHAR; otherwise insert CHAR.

This has the effect of automatically creating a properly indented list
leader; like hyphen, asterisk, or plus sign; without having to use
list-specific key maps.

Source: http://tinyurl.com/lrfu2ww"
    (if (= (current-column) 0)
        (insert (concat " " char " "))
      (insert char)))

  (defun diego/org-swap-tags (tags)
    "Replace any tags on the current headline with TAGS.

The assumption is that TAGS will be a string conforming to Org Mode's
tag format specifications, or nil to remove all tags.

Source: http://tinyurl.com/nx9suzj"
    (let ((old-tags (org-get-tags-string))
          (tags (if tags
                    (concat " " tags)
                  "")))
      (save-excursion
        (beginning-of-line)
        (re-search-forward
         (concat "[ \t]*" (regexp-quote old-tags) "[ \t]*$")
         (line-end-position) t)
        (replace-match tags)
        (org-set-tags t))))

  (defun diego/org-set-tags (tag)
    "Add TAG if it is not in the list of tags, remove it otherwise.

TAG is chosen interactively from the global tags completion table.

Source: http://tinyurl.com/l3zpzse"
    (interactive
     (list (let ((org-last-tags-completion-table
                  (if (derived-mode-p 'org-mode)
                      (org-uniquify
                       (delq nil (append (org-get-buffer-tags)
                                         (org-global-tags-completion-table))))
                    (org-global-tags-completion-table))))
             (completing-read
              "Tag: " 'org-tags-completion-function nil nil nil
              'org-tags-history))))
    (let* ((cur-list (org-get-tags))
           (new-tags (mapconcat 'identity
                                (if (member tag cur-list)
                                    (delete tag cur-list)
                                  (append cur-list (list tag)))
                                ":"))
           (new (if (> (length new-tags) 1) (concat " :" new-tags ":")
                  nil)))
      (diego/org-swap-tags new)))

  (defun diego/org-choose-bullet-type ()
    "Change the bullet type for org lists with a prompt."
    (interactive)
    (let ((char (read-char-choice
                 "Bullet type? (-|*|+|1|2|a|b|A|B): "
                 '(?* ?- ?+ ?1 ?2 ?a ?b ?A ?B))))
      (cond ((eq char ?1)
             (org-cycle-list-bullet 3))
            ((eq char ?2)
             (org-cycle-list-bullet 4))
            ((eq char ?a)
             (org-cycle-list-bullet 5))
            ((eq char ?b)
             (org-cycle-list-bullet 7))
            ((eq char ?A)
             (org-cycle-list-bullet 6))
            ((eq char ?B)
             (org-cycle-list-bullet 8))
            (t (org-cycle-list-bullet (char-to-string char))))))

  (defun diego/org-hugo-export ()
    "Export current subheading to markdown using pandoc."
    (interactive)
    ;; Save cursor position
    (save-excursion
      ;; Go to top level heading for subtree
      (unless (eq (org-current-level) 1)
        (org-up-heading-all 10))
      ;; Set export format, pandoc options, post properties
      (let* ((org-pandoc-format 'markdown)
             (org-pandoc-options-for-markdown '((standalone . t)
                                                (atx-headers . t)
                                                (columns . 79)))
             (hl (org-element-at-point))
             (filename (org-element-property :EXPORT_FILE_NAME hl))
             (title (format "\"%s\"" (org-element-property :title hl)))
             (slug (format "\"%s\"" (org-element-property :SLUG hl)))
             (date (format "\"%s\"" (org-element-property :DATE hl)))
             (tags (org-get-tags-at))
             (categories
              (format "[\"%s\"]" (mapconcat 'identity tags "\",\""))))
        (if (string= (org-get-todo-state) "DRAFT")
            (message "Draft not exported")
          (progn
            ;; Make the export
            (org-export-to-file
                'pandoc
                (org-export-output-file-name
                 (concat (make-temp-name ".tmp") ".org") t)
              nil t nil nil nil
              (lambda (f)
                (org-pandoc-run-to-buffer-or-file f 'markdown t nil)))
            ;; Use advice-add to add advice to existing process sentinel
            ;; to modify file /after/ the export process has finished.
            (advice-add
             #'org-pandoc-sentinel
             :after
             `(lambda (process event)
                (with-temp-file ,filename
                  (insert-file-contents ,filename)
                  (goto-char (point-min))
                  ;; Remove default header
                  (re-search-forward "---\\(.\\|\n\\)+?---\n\n")
                  (replace-match "")
                  (goto-char (point-min))
                  ;; Insert new properties
                  (insert
                   (format
                    "---\ntitle: %s\nslug: %s\ndate: %s\ncategories: %s\n---\n\n"
                    ,title ,slug ,date ,categories))
                  ;; Demote headings and tweak code blocks
                  (dolist (reps '(("^#" . "##")
                                  ("``` {\\.\\(.+?\\)}" . "```\\1")))
                    (goto-char (point-min))
                    (while (re-search-forward (car reps) nil t)
                      (replace-match (cdr reps))))))
             '((name . "hugo-advice")))
            ;; We don't want our advice to stick around afterwards
            (advice-remove #'org-pandoc-sentinel 'hugo-advice)
            (when (string= (org-get-todo-state) "↑")
              (org-todo))))))))
#+end_src
**** Keyboard Macros
***** TODO Turn this into an elisp function
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (fset 'diego/org-wrap-with-quote
        [?\{ ?i return ?# ?+ ?b ?e ?g ?i ?n ?_ ?q ?u ?o ?t ?e ?\C-/ ?\} ?i return
             up ?# ?+ ?e ?n ?d ?_ ?q ?u ?o ?t ?e ?\C-/ ?\{ ?j ?i ?  ?  ?\M-q
             ?\M-q ?\M-q ?\C-/]))
#+end_src
**** Bindings
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (diego/set-leader-keys-for-major-mode 'org-mode
    "$"  'org-archive-subtree
    "'"  'org-edit-special
    "."  'org-time-stamp
    "/"  'org-sparse-tree
    ":"  'diego/org-set-tags
    "A"  'org-archive-subtree
    "N"  'widen
    "P"  'org-set-property
    "R"  'org-refile
    "^"  'org-sort
    "a"  'org-agenda
    "c"  'org-capture
    "d"  'org-deadline
    "g"  'counsel-org-goto
    "G"  'counsel-org-goto-all
    "l"  'diego/org-choose-bullet-type
    "n"  'org-narrow-to-subtree
    "s"  'org-schedule

    "ic" 'org-table-insert-column
    "ir" 'org-table-insert-row
    "il" 'org-insert-link
    "if" 'org-footnote-new
    "id" 'org-insert-drawer

    "ed" 'org-export-dispatch
    "eh" 'diego/org-hugo-export
    "es" 'diego/eval-surrounding-sexp
    "er" 'eval-region
    "eb" 'diego/eval-buffer

    "b"  'org-babel-tangle
    "xb" (diego|org-emphasize diego/org-bold ?*)
    "xi" (diego|org-emphasize diego/org-italic ?/)
    "xc" (diego|org-emphasize diego/org-code ?~)
    "xu" (diego|org-emphasize diego/org-underline ?_)
    "xv" (diego|org-emphasize diego/org-verbatim ?=)
    "xs" (diego|org-emphasize diego/org-strike-through ?+)
    "xr" (diego|org-emphasize diego/org-clear ? )
    "xq" 'diego/org-wrap-with-quote
    "xx" 'org-cut-special
    "xp" 'org-paste-special

    ;; tables
    "ta"  'org-table-align
    "tb"  'org-table-blank-field
    "tc"  'org-table-convert
    "tdc" 'org-table-delete-column
    "tdr" 'org-table-kill-row
    "te"  'org-table-eval-formula
    "tE"  'org-table-export
    "th"  'org-table-previous-field
    "tH"  'org-table-move-column-left
    "tic" 'org-table-insert-column
    "tih" 'org-table-insert-hline
    "tiH" 'org-table-hline-and-move
    "tir" 'org-table-insert-row
    "tI"  'org-table-import
    "tj"  'org-table-next-row
    "tJ"  'org-table-move-row-down
    "tK"  'org-table-move-row-up
    "tl"  'org-table-next-field
    "tL"  'org-table-move-column-right
    "tn"  'org-table-create
    "tN"  'org-table-create-with-table.el
    "tr"  'org-table-recalculate
    "ts"  'org-table-sort-lines
    "ttf" 'org-table-toggle-formula-debugger
    "tto" 'org-table-toggle-coordinate-overlays
    "tw"  'org-table-wrap-region)

  (diego/set-leader-keys-for-minor-mode 'org-src-mode
    "'" 'org-edit-src-exit))
#+end_src
**** Setup
***** Agenda
#+begin_src emacs-lisp
(with-eval-after-load 'org-agenda
  (bind-keys :map org-agenda-mode-map
             ("j" . org-agenda-next-line)
             ("k" . org-agenda-previous-line)
             ("n" . org-agenda-next-date-line)
             ("p" . org-agenda-previous-date-line)
             ("c" . org-agenda-capture)
             ("R" . org-revert-all-org-buffers)
             ("RET" . org-agenda-switch-to))
  (setq org-habit-graph-column 50)

  (diego/setup-mode org-agenda
    (setq-local prettify-symbols-alist diego/org-prettify-alist)
    (prettify-symbols-mode)))

#+end_src
***** Capture
#+begin_src emacs-lisp
(with-eval-after-load 'org-capture
  (diego/evil-bind-keys :insert org-capture-mode-mop
                        ("C-d" . diego/org-agenda-toggle-date)
                        :normal org-capture-mode-map
                        ("C-d" . diego/org-agenda-toggle-date)))
#+end_src
***** Org
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (dolist (char '("+" "-"))
    (define-key org-mode-map (kbd char)
      `(lambda ()
         (interactive)
         (diego/org-insert-list-leader-or-self ,char))))
  (setq org-bullets-bullet-list '("•")))

(diego/setup-mode org
  (setq-local prettify-symbols-alist diego/org-prettify-alist)
  (prettify-symbols-mode)
  (org-bullets-mode 1)
  (goto-address-mode)
  (org-indent-mode))
#+end_src
*** [[https://github.com/abo-abo/hydra][hydra]]
#+begin_quote
  make Emacs bindings that stick around
#+end_quote
#+begin_src emacs-lisp
(use-package hydra
  :config)
#+end_src
*** [[https://github.com/bbatsov/crux][crux]]
#+begin_quote
  A Collection of Ridiculously Useful eXtensions for Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package crux
  :defer 5
  :leader-bind (("TAB" . crux-switch-to-previous-buffer)
                ("fd" . crux-delete-file-and-buffer)
                ("fr" . crux-rename-file-and-buffer))
  :commands (crux-with-region-or-line
             crux-with-region-or-buffer
             crux-switch-to-previous-buffer)
  :config
  (crux-with-region-or-line eval-region)
  (crux-with-region-or-buffer indent-region)
  (crux-with-region-or-buffer untabify)
  (crux-with-region-or-buffer tabify)
  (crux-with-region-or-buffer fill-region))
#+end_src

*** [[https://github.com/company-mode/company-mode][company-mode]]
#+begin_quote
  Modular in-buffer completion framework for Emacs
#+end_quote
Supposedly better than autocomplete.
#+begin_src emacs-lisp
(use-package company
  :defer 5
  :bind (:map company-active-map
              ([tab] . company-complete-common-or-cycle))
  :init
  (setq company-idle-delay 0.3
        company-minimum-prefix-length 1
        company-selection-wrap-around t
        company-dabbrev-char-regexp "\\sw\\|\\s_\\|[-_]")
  :config
  (defun company-mode/backend-with-yas (backend)
    "Source: http://tinyurl.com/n63vfhw"
    (if (and (listp backend) (member 'company-yasnippet backend))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))
  (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
  (global-company-mode t))

(use-package company-anaconda
  :after company)
#+end_src

*** [[https://github.com/justbur/emacs-which-key][emacs-which-key]]
#+begin_quote
  Emacs package that displays available keybindings in popup
#+end_quote
#+begin_src emacs-lisp
(use-package which-key
  :defer 10
  :leader-bind ("hk" . which-key-show-top-level)
  :config
  (which-key-mode)
  ;; (setq which-key-show-operator-state-maps t)

  (defun diego/declare-prefix (prefix name &rest more)
    "Declare a prefix PREFIX. PREFIX is a string describing a key
sequence. NAME is a string used as the prefix command.
LONG-NAME if given is stored in `spacemacs/prefix-titles'.

Source: http://tinyurl.com/l6feofx"
    (declare (indent defun))
    (while prefix
      (which-key-add-key-based-replacements
        (concat diego-evil-leader-key " " prefix) name
        (concat diego-alt-evil-leader-key " " prefix) name)
      (setq prefix (pop more) name (pop more))))

  (defun diego/declare-prefix-for-major-mode (mode prefix name &rest more)
    "Declare a prefix PREFIX. PREFIX is a string describing a key
sequence. NAME is a string used as the prefix command.

Source-ish: http://tinyurl.com/lmzvfh3"
    (declare (indent defun))
    (while prefix
      (which-key-add-major-mode-key-based-replacements mode
        (concat diego-evil-leader-key " m" prefix) name
        (concat diego-major-mode-leader-key " " prefix) name
        (concat diego-alt-evil-leader-key " m" prefix) name
        (concat diego-alt-major-mode-leader-key " " prefix) name)
      (setq prefix (pop more) name (pop more))))

  (diego/declare-prefix
    "a"   "applications"
    "ao"  "org"
    "ag"  "games"
    "b"   "buffer"
    "c"   "comment"
    "f"   "file"
    "fp"  "pop-to-file"
    "g"   "magit"
    "h"   "help"
    "hd"  "describe"
    "hc"  "customize"
    "i"   "insert"
    "j"   "jump"
    "m"   "major-mode"
    "n"   "narrow/numbers"
    "p"   "project"
    "q"   "quit"
    "s"   "search"
    "t"   "toggle"
    "w"   "window"
    "x"   "text"
    "xi"  "indent"
    "xa"  "align"
    "xd"  "delete"
    "xl"  "lines"
    "xm"  "multiedit"
    "xt"  "transpose"
    "xp"  "parentheses"
    "xw"  "words"
    "S"   "spelling"
    "SPC"     "root")

  (diego/declare-prefix-for-major-mode 'org-mode
    "i" "insert"
    "x" "text"
    "t" "table"
    "e" "eval-export")

  (dolist (mode '(emacs-lisp-mode lisp-interaction-mode))
    (diego/declare-prefix-for-major-mode mode
      "e" "eval"))

  (setq which-key-sort-order 'which-key-key-order-alpha)
  (setq which-key-sort-uppercase-first nil)

  (dolist (pref '("ivy-\\(.+\\)"
                  "counsel-\\(.+\\)"
                  "projectile-\\(.+\\)"
                  "counsel-projectile-\\(.+\\)"
                  "crux-\\(.+\\)"
                  "headlong-\\(.+\\)"
                  "diego/\\(.+\\)"
                  "evilnc-\\(.+\\)"
                  "magit-\\(.+\\)"
                  "avy-\\(.+\\)"
                  "eyebrowse-\\(.+\\)"
                  ;; "hydra-[^/]+/\\(.+\\)"
                  ))
    (push `((nil . ,pref) . (nil . "\\1")) which-key-replacement-alist)))
#+end_src
** Bindings
A convenient full-screen binding I'm used to from iTerm.
#+begin_src emacs-lisp
(when (eq system-type 'darwin)
  (global-set-key (kbd "<s-return>") #'toggle-frame-fullscreen))
#+end_src
*** Minibuffer
I like to use ~C-/~ as Evil/Vim's ~C-[~ since I use a Dvorak keyboard, so I like to
also use these keys to quit out of the minibuffer. See more [[#bindings-1][here]].
#+begin_src emacs-lisp
(dolist (map (list minibuffer-local-map
                   minibuffer-local-ns-map
                   minibuffer-local-completion-map
                   minibuffer-local-must-match-map
                   minibuffer-local-isearch-map))
  (dolist (key '([?\C-/] [?\C-_] [escape]))
    (define-key map key #'minibuffer-keyboard-quit)))
#+end_src
*** Leader
#+begin_src emacs-lisp
(with-eval-after-load 'bind-map
  (diego/set-leader-keys
    "qf" 'delete-frame
    "qq" 'save-buffers-kill-emacs

    "&"   'async-shell-command
    ":"   'eval-expression
    "r"   'repeat
    "u"   'universal-argument))
#+end_src
* Help
** Defaults
#+begin_src emacs-lisp
(add-hook 'help-mode-hook #'goto-address-mode)
#+end_src
** Packages
*** [[https://github.com/abo-abo/define-word][define-word]]        :search:
#+begin_quote
  Display the definition of word at point in Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package define-word
  :commands diego/define-word
  :leader-bind ("sw" . diego/define-word)
  :config
  (defun diego/define-word ()
    (interactive)
    (let ((word (read-string
                 (concat "Define word ["
                         (if (region-active-p)
                             (buffer-substring (region-beginning) (region-end))
                           (thing-at-point 'word)) "]: ")
                 nil nil
                 (thing-at-point 'word))))
      (define-word word))))
#+end_src
*** [[https://github.com/xuchunyang/devdocs.el][devdocs]]          :search:
#+begin_quote
  Emacs package allowing you to easily search the DevDocs documentation
#+end_quote
#+begin_src emacs-lisp
(use-package devdocs
  :leader-bind ("hdd"  . devdocs-search))
#+end_src
*** [[https://github.com/Malabarba/emacs-google-this][emacs-google-this]] :search:
#+begin_quote
  A set of emacs functions and bindings to google under point.
#+end_quote
#+begin_src emacs-lisp
(use-package google-this
  :commands ddg-this-search
  :leader-bind (("sd" . ddg-this-search)
                ("sg" . google-this-search))
  :config
  (defun ddg-this-parse-and-search-string (text prefix &optional search-url)
    "Convert illegal characters in TEXT to their %XX versions, and then duckduckgo.
PREFIX determines quoting.

Don't call this function directly, it could change depending on
version. Use `ddg-this-string' instead."
    (let* (;; Create the url
           (query-string (google-this--maybe-wrap-in-quotes text prefix))
           ;; Perform the actual search.
           (browse-result (funcall google-this-browse-url-function
                                   (format (or search-url "https://duckduckgo.com/?q=%s")
                                           (url-hexify-string query-string)))))
      ;; Maybe suspend emacs.
      (when google-this-suspend-after-search (suspend-frame))
      ;; Return what browse-url returned (very usefull for tests).
      browse-result))

  (defun ddg-this-pick-term (prefix)
    "Decide what \"this\" and return it.
PREFIX determines quoting."
    (let* ((term (if (region-active-p)
                     (buffer-substring (region-beginning) (region-end))
                   (or (thing-at-point 'symbol)
                      (thing-at-point 'word)
                      (buffer-substring (line-beginning-position)
                                        (line-end-position)))))
           (term (read-string (concat "DuckDuckGo [" term "]: ") nil nil term)))
      term))

  (defun ddg-this-search (prefix &optional search-string)
    "Write and do a DuckDuckGo search.
Interactively PREFIX determines quoting.
Non-interactively SEARCH-STRING is the string to search."
    (interactive "P")
    (let* ((term (ddg-this-pick-term prefix)))
      (if (stringp term)
          (ddg-this-parse-and-search-string term prefix search-string)
        (message "[google-this-string] Empty query.")))))
#+end_src
*** [[https://github.com/atykhonov/google-translate][google-translate]]
#+begin_quote
  Emacs interface to Google Translate
#+end_quote
#+begin_src emacs-lisp
(use-package google-translate)
#+end_src
*** [[https://www.emacswiki.org/emacs/info+.el][info+]]
#+begin_quote
  Extensions to info.el.
#+end_quote
#+begin_src emacs-lisp
(use-package info+)
#+end_src
*** [[https://github.com/laynor/melpa-upstream-visit][melpa-upstream-visit]]
#+begin_quote
  A set of kludges to visit the homepage of a package hosted on elpa.
#+end_quote
#+begin_src emacs-lisp
(use-package melpa-upstream-visit
  :config
  (setq muv:completing-read-function 'ivy-completing-read))
#+end_src
*** [[https://github.com/vermiculus/sx.el/][sx]]
#+begin_quote
  Stack Exchange for Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package sx)
#+end_src

** Bindings
Leader bindings
#+begin_src emacs-lisp
(with-eval-after-load 'bind-map
  (diego/set-leader-keys
    "hca" 'customize-apropos
    "hcf" 'customize-face-other-window
    "hcg" 'customize-group-other-window
    "hcm" 'customize-mode
    "hcv" 'customize-variable-other-window
    "hdV" 'apropos-value
    "hdc" 'describe-char
    "hdk" 'describe-key
    "hdm" 'describe-mode
    "hdp" 'describe-package
    "hds" 'describe-symbol
    "hdt" 'describe-theme
    "hm"  'man
    "hn"  'view-emacs-news
    "hs"  'system-name
    "hv"  'version))
#+end_src
* Files and Buffers
** Defaults
If a frame is already open, use it to open files.
#+begin_src emacs-lisp
(setq ns-pop-up-frames nil)
#+end_src
Follow symlinks to files under version control because why would I not.
#+begin_src emacs-lisp
(setq vc-follow-symlinks t)
#+end_src
Select the help window when opening it (I like this so I can quickly ~q~ out).
#+begin_src emacs-lisp
(setq help-window-select t)
#+end_src
Clean up whitespace before saving files.
#+begin_src emacs-lisp
(add-hook 'before-save-hook #'whitespace-cleanup)
#+end_src
Do dired actions (meaning file copying/deleting and the like) asynchronously.
Which means it's less likely to block up emacs. Or something.
#+begin_src emacs-lisp
(with-eval-after-load 'dired-async
  (autoload 'dired-async-mode "dired-async.el" nil t)
  (dired-async-mode 1))
#+end_src
** Packages
*** [[https://github.com/lunaryorn/osx-trash.el][osx-trash]]
#+begin_quote
  Make Emacs' delete-by-moving-to-trash do what you expect it to do on OS X.
#+end_quote
#+begin_src emacs-lisp
(use-package osx-trash
  :defer 5
  :if (eq system-type 'darwin)
  :config
  (osx-trash-setup)
  (setq delete-by-moving-to-trash t))
#+end_src

*** [[https://www.emacswiki.org/emacs/dired%252b.el][dired+]]
#+begin_src emacs-lisp
(use-package dired+
  :after ranger)
#+end_src

*** [[https://github.com/ralesi/ranger.el][ranger]]
#+begin_quote
  Bringing the goodness of ranger to dired!
#+end_quote
#+begin_src emacs-lisp
(use-package ranger
  :commands diego/deer
  :leader-bind (("ad" . diego/deer)
                ("ar" . ranger))
  :init
  (require 'bookmark)
  :config
  (ranger-override-dired-mode t)
  (setq ranger-show-literal nil
        ranger-show-hidden nil
        ranger-cleanup-eagerly t
        ranger-parent-depth 0)

  (defun diego/ranger-travel ()
    "Use ivy for ranger-travel instead."
    (interactive)
    (cond
     ((featurep 'ivy)
      (counsel-find-file default-directory))
     (t (call-interactively #'ido-find-file))))

  (advice-add #'ranger-travel
              :override #'diego/ranger-travel)

  (defun diego/deer (arg)
    (interactive "P")
    (if arg
        (deer)
      (deer-jump-other-window))))
#+end_src

*** [[https://github.com/bbatsov/projectile][projectile]]         :project:
#+begin_quote
  Project Interaction Library for Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package projectile
  :leader-bind (("pg" . projectile-vc)
                ("pk" . projectile-kill-buffers)
                ("po" . projectile-multi-occur)
                ("pr" . projectil-recentf))
  :config
  (setq projectile-globally-ignored-files '("TAGS" ".DS_Store")
        projectile-ignored-projects '("/usr/local"))
  (projectile-mode))
#+end_src

*** [[https://github.com/ericdanan/counsel-projectile][counsel-projectile]] :project:
#+begin_src emacs-lisp
(use-package counsel-projectile
  :commands diego/project-find-file
  :leader-bind (("pb" . counsel-projectile-switch-to-buffer)
                ("pd" . counsel-projectile-find-dir)
                ("pf" . counsel-projectile-find-file)
                ("pp" . counsel-projectile)
                ("ps" . counsel-projectile-switch-project))
  :config
  (defun diego/project-find-file ()
    (interactive)
    (condition-case nil
        (counsel-git)
      (error (counsel-projectile-find-file)))))
#+end_src

*** [[https://github.com/abo-abo/headlong][headlong]]            :bookmark:
#+begin_src emacs-lisp
(use-package headlong
  :leader-bind (("fB" . headlong-bookmark-jump-other)
                ("fb" . headlong-bookmark-jump)))
#+end_src

** Functions
*** File Manipulation
#+begin_src emacs-lisp
(defun diego/save-buffer ()
  "Save current buffer, or original buffer if in org-src-mode."
  (interactive)
  (if (and (boundp 'org-src-mode) org-src-mode)
      (org-edit-src-save)
    (save-buffer)))

(defun diego/copy-file ()
  "Copy file to another location.

Source: http://tinyurl.com/mqunewc"
  (interactive)
  (call-interactively #'write-file))

(defun diego/safe-erase-buffer ()
  "Prompt before erasing buffer.

Source: http://tinyurl.com/msu4l2k"
  (interactive)
  (if (y-or-n-p (format "Erase content of buffer %s ? " (current-buffer)))
      (progn
        (erase-buffer)
        (message "Buffer erased."))
    (message "erase-buffer cancelled")))

(defun download-file ()
  "Download a file from url to specified path."
  (interactive)
  (let* ((file-url (read-from-minibuffer "URL: "))
         (file-name
          (read-from-minibuffer "File : "
                                (concat default-directory
                                        (file-name-nondirectory file-url)))))
    (url-copy-file file-url file-name)))
#+end_src
*** Switching
#+begin_src emacs-lisp
(defun diego/switch-to-scratch ()
  "Switch to scratch buffer."
  (interactive)
  (switch-to-buffer (get-buffer-create "*scratch*")))

(defun diego/switch-to-star ()
  "Switch to '*' buffers."
  (interactive)
  (let ((ivy-initial-inputs-alist '((ivy-switch-buffer . "^*"))))
    (ivy-switch-buffer)))

(defun diego/switch-to-customize ()
  "Switch to \"Customize\" buffers."
  (interactive)
  (let ((ivy-initial-inputs-alist '((ivy-switch-buffer . "^*customize "))))
    (ivy-switch-buffer)))

(defun diego/switch-to-messages ()
  "Switch to *Messages* buffer."
  (interactive)
  (switch-to-buffer (get-buffer "*Messages*")))
#+end_src
*** Narrowing
#+begin_src emacs-lisp
(defun narrow-and-set-normal ()
  "Narrow to the region and, if in a visual mode, set normal mode.

Source: http://tinyurl.com/llzbxh7"
  (interactive)
  (narrow-to-region (region-beginning) (region-end))
  (if (string= evil-state "visual")
      (progn (evil-normal-state nil)
             (evil-goto-first-line))))

(defun narrow-to-region-or-subtree ()
  "Narrow to a region, if set, otherwise to an Org subtree, if present.

Source: http://tinyurl.com/kdbewhk"
  (interactive)
  (if (and mark-active
         (not (= (region-beginning) (region-end))))
      (narrow-and-set-normal)
    (if (derived-mode-p 'org-mode)
        (org-narrow-to-subtree))))

(defun diego/narrow-dwim ()
  "Narrow to a thing or widen based on context.
Attempts to follow the Do What I Mean philosophy.

Source: http://tinyurl.com/m3k84u8"
  (interactive)
  (if (buffer-narrowed-p)
      (widen)
    (narrow-to-region-or-subtree)))
#+end_src
** Bindings
#+begin_src emacs-lisp
(with-eval-after-load 'bind-map
  (diego/set-leader-keys
    "b*"  'diego/switch-to-star
    "bC"  'diego/switch-to-customize
    "bK"  'kill-buffer
    "bM"  'diego/switch-to-messages
    "bR"  'revert-buffer
    "bS"  'diego/switch-to-scratch
    "bc"  'clone-indirect-buffer-other-window
    "be"  'diego/safe-erase-buffer
    "bi"  'ibuffer
    "bk"  'kill-this-buffer
    "bm"  'kill-matching-buffers
    "bv"  'view-mode

    "fc"  'diego/copy-file
    "fs"  'diego/save-buffer

    "nf"  'narrow-to-defun
    "nn"  'diego/narrow-dwim
    "np"  'narrow-to-page
    "nr"  'narrow-to-region))
#+end_src
* Editing
** Defaults
Text-mode is nicer than fundamental-mode, or so I hear.
#+begin_src emacs-lisp
(setq-default major-mode 'text-mode)
#+end_src
Fill column default, and use auto-fill for text-mode (and derived modes, such
as org-mode, markdown, etc.).
#+begin_src emacs-lisp
(setq-default fill-column 79)
(add-hook 'text-mode-hook 'auto-fill-mode)
#+end_src
TeX input is /really/ useful for inputing special characters. Setting it as
default makes it quickly available with ~C-\~, or ~toggle-input-method~.

This way, when you need to input a greek letter or an em-dash or something,
type ~C-\~, use latex input, and see the automagic replacement happen in all its
glory.
#+begin_src emacs-lisp
(setq default-input-method "TeX")
#+end_src
Who uses double spaces between sentences?
#+begin_src emacs-lisp
(setq sentence-end-double-space nil)
#+end_src
Dear god I hate tabs. Also, four spaces is a good indentation default.
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil
              tab-width 4)
#+end_src
** Packages
*** [[https://github.com/alpha22jp/atomic-chrome][atomic-chrome]]
#+begin_quote
  Edit text area on Chrome with Emacs using Atomic Chrome
#+end_quote
#+begin_src emacs-lisp
(use-package atomic-chrome
  :defer 10
  :config
  (unless atomic-chrome-server-atomic-chrome
    (atomic-chrome-start-server))
  (setq atomic-chrome-buffer-open-style 'frame))
#+end_src
*** [[https://github.com/abo-abo/auto-yasnippet][auto-yasnippet]]
#+begin_src emacs-lisp
(use-package auto-yasnippet)
#+end_src
*** [[https://github.com/hlissner/evil-multiedit][evil-multiedit]]
#+begin_quote
  Multiple cursors for evil-mode, based on iedit
#+end_quote
#+begin_src emacs-lisp
(use-package evil-multiedit
  :if (not noninteractive)
  :config
  (evil-ex-define-cmd "ie[dit]" 'evil-multiedit-ex-match))
#+end_src
*** [[https://github.com/Fuco1/smartparens][smartparens]]
#+begin_quote
  Minor mode for Emacs that deals with parens pairs and tries to be smart about
  it.
#+end_quote
#+begin_src emacs-lisp
(use-package smartparens
  :defer 5
  :config
  (require 'smartparens-config)
  (smartparens-global-mode)
  (show-smartparens-global-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'smartparens-strict-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'show-smartparens-mode)
  (let ((modes '(text-mode
                 org-mode
                 markdown-mode
                 minibuffer-inactive-mode
                 html-mode)))
    (sp-local-pair modes "'" nil :actions nil)
    (sp-local-pair modes "`" nil :actions nil))

  (defmacro diego|sp-wrap-with (char-name char &rest other)
    "Make function(s) for wrapping with character using `sp-wrap-with-pair'"
    (declare (indent defun))
    `(progn
       ,@(cl-loop while char-name collect
                  (let* ((current-char-name char-name)
                         (current-char char)
                         (fname (intern (concat "diego/sp-wrap-with-" current-char-name))))
                    (setq char-name (pop other)
                          char (pop other))
                    `(defun ,fname (&optional arg)
                       (interactive "P")
                       (sp-wrap-with-pair ,current-char))))))

  (diego|sp-wrap-with
    "paren" "("
    "curly" "{"
    "double-quote" "\""
    "single-quote" "'"))

(use-package evil-smartparens
  :after smartparens
  :config
  (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))
#+end_src
*** [[https://www.emacswiki.org/emacs/UndoTree][undo-tree]]
Kind of makes undo's like git. Or Vim, apparently, if you're into that.
#+begin_src emacs-lisp
(use-package undo-tree
  :bind (:map undo-tree-map
              ("C-/" . nil)
              ("C-_" . nil))
  :leader-bind ("au" . undo-tree-visualize)
  :config
  (setq undo-tree-visualizer-timestamps t))
#+end_src
*** [[https://github.com/purcell/unfill][unfill]]
#+begin_src emacs-lisp
(use-package unfill
  :bind (([remap fill-paragraph] . unfill-toggle))
  :leader-bind ("xq" . unfill-toggle))
#+end_src
*** [[https://github.com/joaotavora/yasnippet][yasnippet]]
#+begin_quote
  A template system for Emacs
#+end_quote
Freakin yasnippet. It's the best.
#+begin_src emacs-lisp
(use-package yasnippet
  :defer 5
  :leader-bind ("iy" . yas-insert-snippet)
  :config
  (yas-global-mode 1))
#+end_src
**** [[https://github.com/haskell/haskell-snippets][haskell-snippets]]
#+begin_src emacs-lisp
(use-package haskell-snippets)
#+end_src
*** [[https://github.com/syohex/emacs-fontawesome][fontawesome]]
#+begin_src emacs-lisp
(use-package fontawesome)
#+end_src
*** [[https://www.emacswiki.org/emacs/FlySpell][flyspell]]
Flyspell spell-checking and ivy integration with [[https://github.com/d12frosted/flyspell-correct][d12frosted/flyspell-correct]]
#+begin_src emacs-lisp
(use-package flyspell
  :config
  (defun diego/flyspell-correct-next ()
    (interactive "p")
    (flyspell-goto-next-error)
    (flyspell-auto-correct-word))

  (defun diego/flyspell-add-to-dictionary ()
    "Add word at point to flyspell dictionary at `/Users/diego/.ispell_english'.

Source: http://tinyurl.com/k8g9sex"
    (interactive)
    (let ((current-location (point))
          (word (flyspell-get-word)))
      (when (consp word)
        (flyspell-do-correct 'save
                             nil
                             (car word)
                             current-location
                             (cl-caddr word)
                             (cl-caddr word)
                             current-location)))))

(use-package flyspell-correct-ivy
  :after flyspell)
#+end_src
** Functions
*** Move text
#+begin_src emacs-lisp
(defun diego/transpose-chars (arg)
  "Move character at point forward one character.
With prefix arg ARG, effect is to take character at point
and drag it forward past ARG other characters (backward if ARG negative)."
  (interactive "P")
  (forward-char)
  (if arg
      (transpose-chars arg)
    (transpose-chars 1))
  (backward-char))

(defun diego/backward-transpose-chars (arg)
  "Move character at point backward one character.
With prefix arg ARG, effect is to take character at point
and drag it backward past ARG other characters (backward if ARG negative)."
  (interactive "P")
  (forward-char)
  (if arg
      (transpose-chars (- arg))
    (transpose-chars -1))
  (backward-char))

(defun diego/backward-transpose-words (arg)
  "Interchange words around point, leaving point at end of them.
With prefix arg ARG, effect is to take word before or around point
and drag it forward past ARG other words (backward if ARG negative).
If ARG is zero, the words around or after point and around or after mark
are interchanged."
  (interactive "P")
  (if arg
      (transpose-words (- arg))
    (transpose-words -1)))

(defun diego/move-line-or-region (arg)
"Move line or region down one one line.
With prefix arg ARG, effect is to take line at point and
drag it down past ARG other lines (up if ARG negative)."
  (interactive "P")
  (if (or (not arg) (>= arg 0))
      (let ((reg-or-lin (if (region-active-p) "'>" "."))
            (reactivate-region (if (region-active-p) "gv=gv" ""))
            (num (if arg arg 1)))
        (execute-kbd-macro
         (concat ":m" reg-or-lin "+" (number-to-string num) (kbd "RET") reactivate-region)))
    (diego/backward-move-line-or-region (- arg))))

(defun diego/backward-move-line-or-region (arg)
"Move line or region up one one line.
With prefix arg ARG, effect is to take line at point and
drag it up past ARG other lines (down if ARG negative)."
  (interactive "P")
  (if (or (not arg) (>= arg 0))
      (let ((reg-or-lin (if (region-active-p) "'<" "."))
            (reactivate-region (if (region-active-p) "gv=gv" ""))
            (num (if arg (+ arg 1) 2)))
        (execute-kbd-macro
         (concat ":m" reg-or-lin "-" (number-to-string num) (kbd "RET") reactivate-region)))
    (diego/move-line-or-region (- arg))))

#+end_src
*** Align
#+begin_src emacs-lisp
(defun diego/align-repeat (start end regexp &optional justify-right after)
  "Repeat alignment with respect to the given regular expression.

If JUSTIFY-RIGHT is non nil justify to the right instead of the
left. If AFTER is non-nil, add whitespace to the left instead of
the right.

Source: http://tinyurl.com/l5vxsfr"
  (interactive "r\nsAlign regexp: ")
  (let* ((ws-regexp (if (string-empty-p regexp)
                        "\\(\\s-+\\)"
                      "\\(\\s-*\\)"))
         (complete-regexp (if after
                              (concat regexp ws-regexp)
                            (concat ws-regexp regexp)))
         (group (if justify-right -1 1)))
    (message "%S" complete-regexp)
    (align-regexp start end complete-regexp group 1 t)))

(defmacro diego|create-align-repeat-x (name regexp &optional justify-right default-after)
  "Create an alignment function given name and alignment regexp.

Source: http://tinyurl.com/kgrqr83"
  (let ((new-func (intern (concat "diego/align-repeat-" name))))
    `(defun ,new-func (start end switch)
       (interactive "r\nP")
       (let ((after (not (eq (if switch t nil) (if ,default-after t nil)))))
         (diego/align-repeat start end ,regexp ,justify-right after)))))

(diego/repeat-calls diego|create-align-repeat-x 4
  "comma" "," nil t
  "semicolon" ";" nil t
  "colon" ":" nil t
  "equal" "=" nil nil
  "math-oper" "[+\\-*/]" nil nil
  "ampersand" "&" nil nil
  "bar" "|" nil nil
  "left-paren" "(" nil nil
  "right-paren" ")" t nil
  "backslash" "\\\\" nil nil
  "single-quote" "'" nil nil)

(eval-when-compile
  (declare-function align-region "align"))
(defun diego/align-repeat-decimal (start end)
  "Align a table of numbers on decimal points and dollar signs (both optional).

Source: http://tinyurl.com/lzy5wg2"
  (interactive "r")
  (require 'align)
  (align-region start end nil
                '((nil (regexp . "\\([\t ]*\\)\\$?\\([\t ]+[0-9]+\\)\\.?")
                     (repeat . t)
                     (group 1 2)
                     (spacing 1 1)
                     (justify nil t)))
                nil))


#+end_src
*** Justify
#+begin_src emacs-lisp
(defmacro diego|justify (type &rest types)
  "Create justification function(s), one per given TYPE."
  `(progn
     ,@(cl-loop
        while type collect
        (let ((func-name (intern (concat "diego/justify-" type)))
              (current-type type))
          (setq type (pop types))
          `(defun ,func-name ()
             (interactive)
             (if (region-active-p)
                 (set-justification (region-beginning)
                                    (region-end)
                                    (intern ,current-type))
               (set-justification (line-beginning-position)
                                  (line-end-position)
                                  (intern ,current-type))))))))

(diego|justify "left"
               "right"
               "full"
               "center"
               "none")
#+end_src

*** Paragraph
#+begin_src emacs-lisp
(defun diego/paragraphize ()
"Remove newlines from region."
  (interactive)
  (if (region-active-p)
      (flush-lines "^$" (region-beginning) (region-end))
    (message "No region active.")))
#+end_src
*** Url
#+begin_src emacs-lisp
(defun diego/shorten-url-at-point ()
  "Shorten the url at point using the TinyURL api.

Source: http://tinyurl.com/l8z7vph"
  (interactive)
  (if (thing-at-point 'url)
      (let* ((long-url (thing-at-point 'url))
             (short-url (with-temp-buffer
                          (mm-url-insert
                           (concat "http://tinyurl.com/api-create.php?url="
                                   (url-hexify-string long-url)))
                          (buffer-string)))
             (bounds (bounds-of-thing-at-point 'url)))
        (kill-region (car bounds) (cdr bounds))
        (insert short-url))
    (error "No url at point.")))
#+end_src
** Hydras
*** Multiedit
#+begin_src emacs-lisp
(with-eval-after-load 'hydra
  (defhydra hydra-multiedit (:hint nil)
    "
multiedit:
_r_estore  _t_oggle/restrict  match _a_ll
_n_ext     match and _N_ext   _q_: abort
_p_rev     match and _P_rev
"
    ("a"   evil-multiedit-match-all)
    ("n"   evil-multiedit-next)
    ("p"   evil-multiedit-prev)
    ("r"   evil-multiedit-restore)
    ("t"   evil-multiedit-toggle-or-restrict-region)
    ("N"   evil-multiedit-match-and-next)
    ("P"   evil-multiedit-match-and-prev)
    ("q"   evil-multiedit-abort :exit t)))
#+end_src
*** Transpose
#+begin_src emacs-lisp
(with-eval-after-load 'hydra
  (defhydra hydra-transpose ()
    "transpose"
    ("c" diego/transpose-chars "char")
    ("C" diego/backward-transpose-chars "backward char")
    ("j" diego/move-line-or-region "line/region")
    ("k" diego/backward-move-line-or-region "backward line/region")
    ("w" transpose-words "word")
    ("W" diego/backward-transpose-words "backward word")
    ("s" transpose-sexps "sexp" :exit t)))
#+end_src
*** Justify
#+begin_src emacs-lisp
(with-eval-after-load 'hydra
  (defhydra hydra-justify (:exit t)
    "justify"
    ("r" diego/justify-right "right")
    ("l" diego/justify-left "left")
    ("c" diego/justify-center "center")
    ("f" diego/justify-full "full")
    ("n" diego/justify-none "none")))
#+end_src
*** Smartparens
#+begin_src emacs-lisp
(with-eval-after-load 'hydra
  (defhydra hydra-smartparens (:hint nil)
    "
smartparens:
_r_ewrap  _s_lurp             _(_
_u_nwrap  _S_lurp (back)   _[_ wrap _{_
        _b_arf             _'_  _\"_
        _B_arf (back)
"
    ("r"  sp-rewrap-sexp)
    ("u"  sp-unwrap-sexp)
    ("b"  sp-forward-barf-sexp)
    ("B"  sp-backward-barf-sexp)
    ("s"  sp-forward-slurp-sexp)
    ("S"  sp-backward-slurp-sexp)
    ("("  diego/sp-wrap-with-paren)
    ("["  diego/sp-wrap-with-bracket)
    ("{"  diego/sp-wrap-with-curly)
    ("\"" diego/sp-wrap-with-quote2)
    ("'"  diego/sp-wrap-with-quote)))
#+end_src
*** Evil-numbers
#+begin_src emacs-lisp
(with-eval-after-load 'hydra
  (defhydra hydra-numbers ()
    "evil-numbers"
    ("="  evil-numbers/inc-at-pt "inc")
    ("-" evil-numbers/dec-at-pt "dec")))
#+end_src
*** Spelling
#+begin_src emacs-lisp
(with-eval-after-load 'hydra
  (defhydra hydra-spelling ()
    "flyspell"
    ("b" flyspell-buffer "buffer")
    ("g" flyspell-goto-next-error "go to next")
    ("a" diego/flyspell-add-to-dictionary "add to dict")
    ("n" flyspell-correct-next-word-generic "correct next generic")
    ("p" flyspell-correct-previous-word-generic "correct prev generic")
    ("N" diego/flyspell-correct-next "correct next")
    ("P" flyspell-auto-correct-previous-word "correct pref")))
#+end_src
** Bindings
Make indent-rigidly more vimmy.
#+begin_src emacs-lisp
(bind-keys :map indent-rigidly-map
           ("h" . indent-rigidly-left)
           ("l" . indent-rigidly-right)
           ("H" . indent-rigidly-left-to-tab-stop)
           ("L" . indent-rigidly-right-to-tab-stop))
#+end_src
Leader keys
#+begin_src emacs-lisp
(with-eval-after-load 'bind-map
  (diego/set-leader-keys
    "n-"  'hydra-numbers/evil-numbers/dec-at-pt
    "n="  'hydra-numbers/evil-numbers/inc-at-pt

    "S"   'hydra-spelling/body

    "xa&" 'diego/align-repeat-ampersand
    "xa'" 'diego/align-repeat-single-quote
    "xa(" 'diego/align-repeat-left-paren
    "xa)" 'diego/align-repeat-right-paren
    "xa," 'diego/align-repeat-comma
    "xa." 'diego/align-repeat-decimal
    "xa:" 'diego/align-repeat-colon
    "xa;" 'diego/align-repeat-semicolon
    "xa=" 'diego/align-repeat-equal
    "xaa" 'align
    "xac" 'align-current
    "xam" 'diego/align-repeat-math-oper
    "xar" 'align-regexp
    "xar" 'diego/align-repeat
    "xa|" 'diego/align-repeat-bar

    "xdw" 'delete-trailing-whitespace
    "xib" 'indent-buffer
    "xii" 'indent-rigidly
    "xir" 'indent-region
    "xj"  'hydra-justify/body
    "xls" 'sort-lines
    "xt"  'hydra-transpose/body
    "xwc" 'count-words

    "xm"  'hydra-multiedit/body

    "xp"  'hydra-smartparens/body

    "xs"  'diego/shorten-url-at-point

    "im"  'insert-kbd-macro))
#+end_src
* Navigation
** Packages
*** [[https://github.com/abo-abo/ace-window][ace-window]]          :window:
#+begin_quote
  Quickly switch windows in Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package ace-window
  :bind ("M-p" . ace-window)
  :leader-bind (("\\" . ace-window)
                ("wD" . ace-delete-window)
                ("wS" . ace-swap-window)
                ("wa" . ace-window))
  :config
  (setq aw-keys (string-to-list "aoeuidhtns")))
#+end_src
*** [[https://github.com/abo-abo/avy][avy]]
#+begin_quote
  Jump to things in Emacs tree-style
#+end_quote
#+begin_src emacs-lisp
(use-package avy
  :leader-bind (("jc" . avy-goto-char-2)
                ("jl" . avy-goto-line)
                ("jw" . avy-goto-word-1))
  :config
  (setq avy-keys (string-to-list "aoeuidhtns")))
#+end_src
*** [[https://github.com/wasamasa/eyebrowse][eyebrowse]]
#+begin_src emacs-lisp
(use-package eyebrowse
  :defer 10
  :leader-bind (("es" . eyebrowse-switch-to-window-config)
                ("el" . eyebrowse-next-window-config)
                ("eh" . eyebrowse-prev-window-config)
                ("er" . eyebrowse-rename-window-config)
                ("ec" . eyebrowse-close-window-connfig)
                ("e'" . eyebrowse-last-window-config)
                ("e0" . eyebrowse-switch-to-window-config-0)
                ("e1" . eyebrowse-switch-to-window-config-1)
                ("e2" . eyebrowse-switch-to-window-config-2)
                ("e3" . eyebrowse-switch-to-window-config-3)
                ("e4" . eyebrowse-switch-to-window-config-4)
                ("e5" . eyebrowse-switch-to-window-config-5)
                ("e6" . eyebrowse-switch-to-window-config-6)
                ("e7" . eyebrowse-switch-to-window-config-7)
                ("e8" . eyebrowse-switch-to-window-config-8)
                ("e9" . eyebrowse-switch-to-window-config-9))
  :config
  (setq eyebrowse-wrap-around t)
  (setq eyebrowse-new-workspace t)
  (eyebrowse-mode))
#+end_src
*** [[https://github.com/jacktasia/dumb-jump][dumb-jump]]
#+begin_src emacs-lisp
(use-package dumb-jump
  :leader-bind (("jE" . dumb-jump-go-prefer-external-other-window)
                ("jG" . dumb-jump-go-other-window)
                ("jb" . dumb-jump-back)
                ("je" . dumb-jump-go-prefer-external)
                ("jg" . dumb-jump-go))
  :config
  (setq dumb-jump-selector 'ivy
        dumb-jump-prefer-searcher 'rg))
#+end_src

*** [[https://github.com/vspinu/imenu-anywhere][imenu-anywhere]]
#+begin_quote
  ido/ivy/helm imenu tag selection across buffers with the same mode/project
  etc
#+end_quote
imenu on steroids.
#+begin_src emacs-lisp
(use-package imenu-anywhere)
#+end_src

** Functions                                                        :window:
#+begin_src emacs-lisp
(defun diego/toggle-window-split ()
  "Switch between vertical and horizontal window split.

Source: http://tinyurl.com/k7s96fa"
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
             (next-win-buffer (window-buffer (next-window)))
             (this-win-edges (window-edges (selected-window)))
             (next-win-edges (window-edges (next-window)))
             (this-win-2nd (not (and (<= (car this-win-edges)
                                    (car next-win-edges))
                                 (<= (cadr this-win-edges)
                                    (cadr next-win-edges)))))
             (splitter
              (if (= (car this-win-edges)
                     (car (window-edges (next-window))))
                  #'split-window-horizontally
                #'split-window-vertically)))
        (delete-other-windows)
        (let ((first-win (selected-window)))
          (funcall splitter)
          (if this-win-2nd (other-window 1))
          (set-window-buffer (selected-window) this-win-buffer)
          (set-window-buffer (next-window) next-win-buffer)
          (select-window first-win)
          (if this-win-2nd (other-window 1))))))

(defun diego/split-vert-focus ()
  "Split window vertically and move focus to other window."
  (interactive)
  (split-window-right)
  (other-window 1))

(defun diego/split-horz-focus ()
  "Split window horizontally and move focus to other window."
  (interactive)
  (split-window-below)
  (other-window 1))

(defun diego/move-splitter-left (arg)
  "Move window splitter left.

Source: http://tinyurl.com/lroxxrs"
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'right))
      (shrink-window-horizontally arg)
    (enlarge-window-horizontally arg)))

(defun diego/move-splitter-right (arg)
  "Move window splitter right.

Source: http://tinyurl.com/lvfpwx3"
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'right))
      (enlarge-window-horizontally arg)
    (shrink-window-horizontally arg)))

(defun diego/move-splitter-up (arg)
  "Move window splitter up.

Source: http://tinyurl.com/m3xlm3o"
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'up))
      (enlarge-window arg)
    (shrink-window arg)))

(defun diego/move-splitter-down (arg)
  "Move window splitter down.

Source: http://tinyurl.com/koowarm"
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'up))
      (shrink-window arg)
    (enlarge-window arg)))
#+end_src
** Hydras                                                           :window:
#+begin_src emacs-lisp
(with-eval-after-load 'hydra
  (defhydra hydra-splitter ()
    "splitter"
    ("h" diego/move-splitter-left "←")
    ("j" diego/move-splitter-down "↓")
    ("k" diego/move-splitter-up "↑")
    ("l" diego/move-splitter-right "→" )
    ("=" balance-windows "balance")))
#+end_src
** Bindings
#+begin_src emacs-lisp
(with-eval-after-load 'bind-map
  (diego/set-leader-keys
    "jI" 'imenu-anywhere
    "jf" 'find-function
    "ji" 'imenu
    "jv" 'find-variable

    "wd" 'delete-window
    "wf" 'make-frame
    "wh" 'diego/split-horz-focus
    "wo" 'delete-other-windows
    "ws" 'hydra-splitter/body
    "wt" 'diego/toggle-window-split
    "wv" 'diego/split-vert-focus))
#+end_src
* Git and github
** Packages
*** [[https://github.com/magit/magit][magit]]
#+begin_quote
  It's Magit! A Git Porcelain inside Emacs.
#+end_quote
Like git, for emacs. But cooler.
#+begin_src emacs-lisp
(use-package magit
  :if (not noninteractive)
  :bind (:map magit-mode-map
              ("SPC" . nil))
  :leader-bind (("gB" . magit-blame-toggle)
                ("gC" . magit-clone)
                ("gL" . magit-log-buffer-file)
                ("ga" . magit-submodule-add)
                ("gb" . magit-branch)
                ("gc" . magit-checkout)
                ("gf" . magit-find-file)
                ("gl" . magit-log-all)
                ("gs" . magit-status))
  :defines (magit-diff-use-overlays)
  :config
  (setq magit-diff-use-overlays nil
        auto-revert-check-vc-info t
        git-commit-summary-max-length 50)

  (add-hook 'git-commit-mode-hook (lambda () (setq-local fill-column 72))))
#+end_src
*** [[https://github.com/emacs-evil/evil-magit][evil-magit]]
#+begin_quote
  Black magic or evil keys for magit
#+end_quote
#+begin_src emacs-lisp
(use-package evil-magit
  :after magit
  :if (not noninteractive))
#+end_src
*** [[https://github.com/vermiculus/magithub][magithub]]
#+begin_quote
   Magit interfaces for GitHub
#+end_quote
#+begin_src emacs-lisp
(use-package magithub
  :disabled t
  :after magit
  :config (magithub-feature-autoinject t)
  (setq ghub-username "therockmandolinist"
        ghub-token (password-store-get "tokens/github/master")))
#+end_src
*** [[https://github.com/syohex/emacs-git-gutter-fringe][git-gutter-fringe]]
#+begin_quote
  Fringe version of git-gutter.el
#+end_quote
#+begin_src emacs-lisp
(use-package git-gutter-fringe
  :demand t
  :commands fringe-helper-define
  :config
  (global-git-gutter-mode)
  (add-hook 'focus-in-hook #'git-gutter:update-all-windows)
  (fringe-helper-define 'git-gutter-fr:modified nil
    ".....X.."
    ".....X.."
    ".....X.."
    ".....X.."
    ".....X.."
    ".....X.."
    ".....X.."
    ".....x.."
    ".....X.."
    ".....X.."
    ".....X.."
    ".....X.."
    ".....x.."
    ".....X..")
  (fringe-helper-define 'git-gutter-fr:added nil
    ".....X.."
    ".....X.."
    ".....X.."
    ".....X.."
    ".....X.."
    ".....X.."
    ".....X.."
    ".....x.."
    ".....X.."
    ".....X.."
    ".....X.."
    ".....X.."
    ".....x.."
    ".....X..")
  (fringe-helper-define 'git-gutter-fr:deleted nil
    ".....X.."
    ".....X.."
    ".....X.."
    ".....X.."
    ".....X.."
    ".....X.."
    ".....X.."
    ".....x.."
    ".....X.."
    ".....X.."
    ".....X.."
    ".....X.."
    ".....x.."
    ".....X.."))
#+end_src

*** [[https://github.com/defunkt/gist.el][gist]]
#+begin_src emacs-lisp
(use-package gist
  :config
  (let ((gh-vals (cdar gh-profile-alist)))
    (diego/repeat-calls setf 2
      gh-vals (plist-put gh-vals
                         :username "therockmandolinist")
      gh-vals (plist-put gh-vals
                         :token (password-store-get "tokens/github/gist")))))
#+end_src

** Functions
#+begin_src emacs-lisp
(defun magit-blame-toggle ()
    "Toggle magit-blame-mode on and off interactively.

Source: http://tinyurl.com/lty44qa"
    (interactive)
    (if (and (boundp 'magit-blame-mode) magit-blame-mode)
        (magit-blame-quit)
      (call-interactively 'magit-blame)))
#+end_src

* Appearance
** Defaults
*** Startup
Get right to your files or the scratch buffer. No B.S.
#+begin_src emacs-lisp
(setq inhibit-splash-screen t
      inhibit-startup-message t
      inhibit-startup-echo-area-message t)
#+end_src
*** Time display
#+begin_src emacs-lisp :tangle no
(with-eval-after-load 'time
  (setq  display-time-24hr-format t
         display-time-default-load-average nil
         display-time-format "│ %Y-%d-%m %H:%M │"
         display-time-load-average nil))
#+end_src
*** Gui elements
Turn off gui elements that I never use. Gui emacs is great, but I still prefer
text-based interaction thank you very much.
#+begin_src emacs-lisp
(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode 0)
(setq custom-raised-buttons nil
      use-dialog-box nil)
(blink-cursor-mode 0)
#+end_src
*** Buffer display
I don't want line-wrapping madness, just tell me there's more to see and I'll
have a look. Additionally, show whitespace.
#+begin_src emacs-lisp
(setq-default truncate-lines t)
(setq whitespace-style '(face trailing tabs))
(global-whitespace-mode)
#+end_src
*** Font
Choose a font in order of preference, when available.
#+begin_src emacs-lisp
(when window-system
  (cond ((x-list-fonts "Iosevka Term")
         (add-to-list 'default-frame-alist '(font . "Iosevka Term-9.5"))
         (set-face-attribute 'default t :font "Iosevka Term-9.5"))
        ((x-list-fonts "Input")
         (add-to-list 'default-frame-alist '(font . "Input-10"))
         (set-face-attribute 'default t :font "Input-10"))
        ((x-list-fonts "Office Code Pro D")
         (add-to-list 'default-frame-alist '(font . "Office Code Pro D-11"))
         (set-face-attribute 'default t :font "Office Code Pro D-11"))
        ((x-list-fonts "Consolas")
         (add-to-list 'default-frame-alist '(font . "Consolas-11"))
         (set-face-attribute 'default t :font "Consolas-11"))
        ((x-list-fonts "Menlo")
         (add-to-list 'default-frame-alist '(font . "Menlo-11"))
         (set-face-attribute 'default t :font "Menlo-11")))
#+end_src
And use [[http://fontawesome.io/][Font Awesome]] for the unicode glyphs it supports.
#+begin_src emacs-lisp
  (when (x-list-fonts "FontAwesome")
    (set-fontset-font t 'unicode "FontAwesome" nil 'prepend)))
#+end_src

:NOTES:
*Current:* Now I use [[https://be5invis.github.io/Iosevka/][Iosevka]], which is really great since it has all of the
wonderful customization abilities of Input, but is fully open source (and has
web variants!), sees active development, and the maintainer is incredibly
responsive. It /is/ quite narrow, but give it a chance - I wasn't able to go back
after a few weeks.

*2016-ish:* I'm using the wonderful [[http://input.fontbureau.com/][Input]] font. If, like me, you're
coming from something more like SauceCodePro, Consolas, or even just Menlo,
this font may at first seem a little "blocky," but it's so wonderfully
[[http://input.fontbureau.com/download/#customize][customizable]] that you should really give it a try. My current settings are:

 - Download a custom four-style family
| Regular     | Input Mono Light         |
| Italic      | Input Mono Light Italic  |
| Bold        | Input Mono Medium        |
| Bold Italic | Input Mono Medium Italic |
 - ~Source Code Pro style~
   * second option for ~a~ and ~g~
 - 1.4x Line spacing

*Note:* Check out [[http://mbauman.net/geek/2009/03/15/minor-truetype-font-editing-on-a-mac/][this post]] for advice on fixing the Consolas font on macOS. This
helps with the modeline text vertical alignments and makes it consistent with
other fonts. Post last updated in 2011, last successfully tested in 09/2016 (by
myself).
:END:
*** Minibuffer
Use a bar cursor in the minibuffer.
#+begin_src emacs-lisp
(add-hook 'minibuffer-setup-hook
          (lambda () (setq-local cursor-type '(bar . 1))))
#+end_src
** Packages
*** [[https://github.com/larstvei/Focus][focus]]
#+begin_quote
  Dim the font color of text in surrounding paragraphs
#+end_quote
#+begin_src emacs-lisp
(use-package focus)
#+end_src
*** [[http://git.savannah.gnu.org/cgit/emacs/elpa.git/tree/packages/rainbow-mode/rainbow-mode.el][rainbow-mode]]                                                    :color:
#+begin_quote
  Colorize color names in buffers
#+end_quote
#+begin_src emacs-lisp
(use-package rainbow-mode
  :config
  (setq rainbow-x-colors-major-mode-list '(c-mode c++-mode java-mode))
  (add-hook 'help-mode-hook #'rainbow-mode))
#+end_src
*** [[https://github.com/therockmandolinist/emacs-theme-darktooth][darktooth-theme]]                                                 :theme:
#+begin_quote
  An Emacs 24 theme remixed from gruvbox
#+end_quote
(my fork)
#+begin_src emacs-lisp
(use-package darktooth-theme
  :demand t
  :quelpa (darktooth-theme
           :fetcher github
           :repo "therockmandolinist/emacs-theme-darktooth"))
#+end_src
*** [[https://github.com/hlissner/emacs-doom-theme][doom-theme]]                                                      :theme:
#+begin_src emacs-lisp
(use-package doom-themes
  :disabled t
  :config
  (load-theme 'doom-molokai t))
#+end_src
*** [[https://github.com/iqbalansari/emacs-emojify][emacs-emojify]]
#+begin_quote
  Display emojis in emacs.
#+end_quote
#+begin_src emacs-lisp
(use-package emojify)
#+end_src
*** [[https://github.com/lunaryorn/fancy-battery.el][fancy-battery]]
#+begin_quote
Display battery in Emacs Mode line
#+end_quote
#+begin_src emacs-lisp
(use-package fancy-battery
  :disabled t
  :defer 10
  :config
  (fancy-battery-mode)
  (setq fancy-battery-show-percentage t)
  (fancy-battery-update))
#+end_src
*** [[https://github.com/TheBB/spaceline][spaceline]]                                                    :modeline:
#+begin_quote
  Powerline theme from Spacemacs
#+end_quote
I was looking for something with the nice look and simplicity of
[[https://github.com/itchyny/lightline.vim][this]].
#+begin_src emacs-lisp
(use-package spaceline
  :demand t
  :config
  (require 'spaceline-config)
  (spaceline-spacemacs-theme)
  (spaceline-toggle-minor-modes-off)
  (spaceline-toggle-battery-on)
  (spaceline-toggle-hud-off)
  (spaceline-toggle-buffer-size-off)
  (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)

  ;; darktooth
  (set-face-background 'spaceline-evil-normal "#B8BB26")
  (set-face-background 'spaceline-evil-insert "#66999D")
  (set-face-background 'spaceline-evil-visual "#FE8019")
  (set-face-background 'spaceline-evil-emacs "#83A598")

  (setq powerline-default-separator nil)

  ;; some tweaks
  (defadvice vc-mode-line (after strip-backend () activate)
    (when (stringp vc-mode)
      (let ((gitlogo (replace-regexp-in-string "^ Git." "  " vc-mode)))
        (setq vc-mode gitlogo))))

  (spaceline-compile))
#+end_src
*** [[https://github.com/alpaker/Fill-Column-Indicator][fill-column-indicator]]
#+begin_quote
  An Emacs minor mode that graphically indicates the fill column.
#+end_quote
#+begin_src emacs-lisp
(use-package fill-column-indicator
  :init
  (setq-default fci-rule-column 79)
  (defvar-local company-fci-mode-on-p nil)

  (defun company-turn-off-fci (&rest _ignore)
    (when (boundp 'fci-mode)
      (setq company-fci-mode-on-p fci-mode)
      (when fci-mode (fci-mode -1))))

  (defun company-maybe-turn-on-fci (&rest _ignore)
    (when company-fci-mode-on-p (fci-mode 1)))

  (add-hook 'company-completion-started-hook 'company-turn-off-fci)
  (add-hook 'company-completion-finished-hook 'company-maybe-turn-on-fci)
  (add-hook 'company-completion-cancelled-hook 'company-maybe-turn-on-fci))
#+end_src

*** [[https://github.com/ankurdave/color-identifiers-mode][color-identifiers]]                                               :color:
#+begin_quote
  Emacs minor mode to highlight each source code identifier uniquely based on its name
#+end_quote
#+begin_src emacs-lisp
(use-package color-identifiers-mode)
#+end_src

*** [[https://github.com/Fanael/highlight-numbers][highlight-numbers]]                                               :color:
#+begin_quote
  Highlight numbers in source code
#+end_quote
Neat-o
#+begin_src emacs-lisp
(use-package highlight-numbers)
#+end_src

*** [[https://github.com/tsdh/highlight-parentheses.el][highlight-parentheses]]
#+begin_quote
  Emacs: highlight surrounding parentheses
#+end_quote
#+begin_src emacs-lisp
(use-package highlight-parentheses)
#+end_src

*** [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]                                              :color:
Better parentheses coloring
#+begin_src emacs-lisp
(use-package rainbow-delimiters)
#+end_src

** Hydras
#+begin_src emacs-lisp
(with-eval-after-load 'hydra
  (defhydra hydra-zoom ()
    "zoom"
    ("=" text-scale-increase "in")
    ("-" text-scale-decrease "out")
    ("0" (text-scale-adjust 0) "reset")))
#+end_src
** Bindings
#+begin_src emacs-lisp
(diego/set-leader-keys
  "z" 'hydra-zoom/body)
#+end_src
* Modes
** Prog
*** Packages
**** [[https://github.com/CodeFalling/nlinum-relative][nlinum-relative]]
#+begin_quote
  Emacs relative line number besed on nlinum-mode
#+end_quote
#+begin_src emacs-lisp :tangle no
(use-package nlinum-relative)
#+end_src
**** [[https://github.com/Malabarba/aggressive-indent-mode/][aggressive-indent]]
#+begin_quote
  Emacs minor mode that keeps your code always indented. More reliable than electric-indent-mode.
#+end_quote
#+begin_src emacs-lisp
(use-package aggressive-indent)
#+end_src
**** [[https://github.com/flycheck/flycheck][flycheck]]
#+begin_quote
  On the fly syntax checking for GNU Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package flycheck
  :config
  (setq flycheck-completing-read-function 'ivy-completing-read))
#+end_src

*** Setup
#+begin_src emacs-lisp
(diego/setup-mode prog
  (subword-mode)
  (smartparens-strict-mode)
  (highlight-parentheses-mode 1)
  (rainbow-delimiters-mode)
  (goto-address-prog-mode)
  (fci-mode)
  (highlight-numbers-mode)
  (nlinum-relative-mode 1)
  (auto-fill-mode 1)
  (setq-local comment-auto-fill-only-comments t)
  (setq-local calc-embedded-open-mode (concat comment-start " "))
  (setq-local calc-embedded-close-mode (concat comment-end "\n"))
  (hl-line-mode 1))
#+end_src
** Python                                                             :lang:
*** Packages
**** [[https://github.com/proofit404/anaconda-mode][anaconda-mode]]
#+begin_quote
  Code navigation, documentation lookup and completion for Python.
#+end_quote
#+begin_src emacs-lisp
(use-package anaconda-mode)
#+end_src
**** [[https://github.com/proofit404/pyenv-mode][pyenv-mode]]
#+begin_quote
  Integrate pyenv with python-mode.
#+end_quote
#+begin_src emacs-lisp
(use-package pyenv-mode
  :config
  (pyenv-mode))
#+end_src
**** [[https://github.com/ssbb/pyenv-mode-auto][pyenv-mode-auto]]
#+begin_src emacs-lisp
(use-package pyenv-mode-auto
  :after pyenv-mode)
#+end_src

**** [[https://github.com/naiquevin/sphinx-doc.el][sphinx-doc]]
#+begin_quote
   Generate Sphinx friendly docstrings for Python functions in Emacs
#+end_quote
Pretty neat, though not entirely complete, IMO.
#+begin_src emacs-lisp
(use-package sphinx-doc)
#+end_src

**** [[https://github.com/JorisE/yapfify][yapfify]]
#+begin_quote
  Yapf for Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package yapfify)
#+end_src
*** Variables
#+begin_src emacs-lisp
(defvar diego/python-prettify-alist
  '(("<=" . "≤")
    (">=" . "≥")
    ("!=" . "≠")
    ("is" . "≡")
    ("=" . "←")
    ("==" . "≣")
    ("not" . "¬")
    ("is not" . "≢")
    ("sum" . "∑")
    ("sqrt" . "√")
    ("pi" . "π")
    ("lambda" . "λ")
    ("and" . "⋏")
    ("or" . "⋎")
    ("self" . "↻")
    ("in" . "∈")
    ("def" . "ƒ")
    ("not in" . "∉")
    ("return" . "→")
    ("yield" . "⊢")
    ("None" . "∅")
    ("*" . "·")
    ("inf" . "∞")
    ("all" . "∀")
    ("^" . "⊻")
    ("**" . "^")))
#+end_src
*** Functions
#+begin_src emacs-lisp
(defun diego/ipython-shell ()
  "Open an ipython shell using multi-term, respecting virtualenv."
  (interactive)
  (let ((sane-term-shell-command "ipython"))
    (sane-term-create)))
#+end_src
*** Setup
#+begin_src emacs-lisp
(diego/setup-mode python
  (set (make-local-variable 'comment-inline-offset) 2)
  (anaconda-mode)
  (anaconda-eldoc-mode)
  (require 'company)
  (add-to-list 'company-backends
               (company-mode/backend-with-yas 'company-anaconda))
  (setq-local prettify-symbols-alist
              diego/python-prettify-alist)
  (prettify-symbols-mode))
#+end_src
** Lisps                                                              :lang:
*** Packages
**** [[https://github.com/slime/slime][slime]]
#+begin_quote
  The Superior Lisp Interaction Mode for Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package slime
  :evil-bind (:insert
              slime-repl-mode-map
              ([up] . slime-repl-previous-input)
              ([down] . slime-repl-next-input))
  :config
  (setq inferior-lisp-program "/usr/local/bin/sbcl")
  (setq slime-contribs '(slime-fancy slime-company)))

(use-package slime-company
  :after slime)
#+end_src
**** [[https://github.com/tkf/emacs-request][request]]
#+begin_quote
  Easy HTTP request for Emacs Lisp
#+end_quote
#+begin_src emacs-lisp
(use-package request)

(use-package request-deferred)
#+end_src

**** [[https://github.com/magnars/s.el][s]]
#+begin_quote
  The long lost Emacs string manipulation library.
#+end_quote
#+begin_src emacs-lisp
(use-package s)
#+end_src

**** [[https://github.com/magnars/dash.el][dash]]
#+begin_quote
  A modern list library for Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package dash)
#+end_src

**** [[https://github.com/purcell/flycheck-package][flycheck-package]]
#+begin_src emacs-lisp
(use-package flycheck-package
  :after flycheck
  :config
  (flycheck-package-setup))
#+end_src

**** [[https://github.com/Silex/elmacro][elmacro]]
#+begin_quote
  Package to display keyboard macros or latest interactive commands as emacs lisp.
#+end_quote
#+begin_src emacs-lisp
(use-package elmacro
  :disabled t
  :defer 10
  :config
  (elmacro-mode))
#+end_src

*** Variables
#+begin_src emacs-lisp
(defvar diego/lisp-prettify-alist
  (prettify-utils-generate
   ("<=" "≤")
   (">=" "≥")
   ("/=" "≠")
   ("eq" "≡")
   ("equal" "≣")
   ("sqrt" "√")
   ("float-pi" "π")
   ("lambda" "λ")
   ("and" "⋏")
   ("or" "⋎")
   ("defun" "ƒ")
   ("defmacro" "ƒₘ")
   ("not" "¬")
   ("nil" "∅")))
#+end_src
*** Functions
#+begin_src emacs-lisp
(defun diego/eval-surrounding-sexp (levels)
  "Eval sexp around point, specifying depth with LEVELS.

Source: http://tinyurl.com/le6wxuo"
  (interactive "p")
  (save-excursion
    (up-list (abs levels))
    (eval-last-sexp nil)))

(defun diego/eval-next-sexp ()
  "Eval next sexp (after point).

Source: http://tinyurl.com/le6wxuo"
  (interactive)
  (save-excursion
    (forward-sexp)
    (eval-last-sexp nil)))

(defun diego/eval-and-replace ()
  "Replace the preceding sexp with its value.

Source: http://tinyurl.com/mh5ev6x"
  (interactive)
  (forward-sexp)
  (forward-char)
  (backward-kill-sexp)
  (condition-case nil
      (prin1 (eval (read (current-kill 0)))
             (current-buffer))
    (error (message "Invalid expression")
           (insert (current-kill 0)))))

(defun diego/eval-buffer ()
  (if (eq major-mode 'org-mode)
      (org-babel-execute-src-block)
    (eval-buffer)))
#+end_src
*** Bindings
#+begin_src emacs-lisp
(dolist (mode '(emacs-lisp-mode lisp-interaction-mode))
  (diego/set-leader-keys-for-major-mode mode
    "eb" 'diego/eval-buffer
    "ef" 'eval-defun
    "er" 'eval-region
    "eR" 'diego/eval-and-replace
    "es" 'diego/eval-surrounding-sexp
    "el" 'eval-last-sexp
    "m"  'emacs-lisp-macroexpand))
#+end_src
*** Setup
#+begin_src emacs-lisp
(diego/setup-mode (lisp lisp-interaction emacs-lisp)
  (hs-minor-mode)
  (aggressive-indent-mode)
  (bind-keys :map (current-local-map)
             ("C-c <up>" . hs-hide-all)
             ("C-c <down>" . hs-show-all)
             ("C-c <left>" . hs-hide-block)
             ("C-c <right>" . hs-show-block))

  (setq-local prettify-symbols-alist diego/lisp-prettify-alist)
  (prettify-symbols-mode))
#+end_src
** C                                                                  :lang:
*** Setup
#+begin_src emacs-lisp
(diego/setup-mode c
  (aggressive-indent-mode))
#+end_src
** Conf
*** Setup
#+begin_src emacs-lisp
(diego/setup-mode conf
  (highlight-numbers-mode)
  (nlinum-relative-mode)
  (rainbow-mode))
#+end_src
** Calc
*** Defaults
#+begin_src emacs-lisp
(setq calc-multiplication-has-precedence nil)
#+end_src
*** Variables
#+begin_src emacs-lisp
(defvar var-G '(float 667408 -16)
  "Universal gravitational constant.")

(defvar var-c '299792458
  "Speed of light in a vaccum.")
#+end_src
*** Bindings
#+begin_src emacs-lisp
(diego/set-leader-keys
  "ac" 'calc-dispatch)
#+end_src
*** Setup
#+begin_src emacs-lisp
(diego/setup-mode calc
  (local-set-key (kbd "x") (lambda () (interactive) (counsel-M-x "^calc-")))
  (setq calc-symbolic-mode 1))
#+end_src
** Shell
*** Packages
**** egp
#+begin_src emacs-lisp
(use-package egp
  :ensure nil
  :after eshell
  :config
  (setq eshell-highlight-prompt nil
        eshell-prompt-function 'egp-theme))
#+end_src
**** [[https://github.com/xuchunyang/eshell-z][eshell-z]]
#+begin_quote
  cd to frequent directory in eshell, an Emacs port of https://github.com/rupa/z
#+end_quote
#+begin_src emacs-lisp
(use-package eshell-z
  :after eshell)
#+end_src
**** [[https://github.com/adamrt/sane-term][sane-term]]
#+begin_quote
  Cycle through terms in emacs
#+end_quote
I wanted a slightly better terminal in emacs. This seems to do the trick.
#+begin_src emacs-lisp
(use-package sane-term
  :leader-bind ("at" . sane-term-create))
#+end_src

*** Functions
#+begin_src emacs-lisp
(with-eval-after-load 'eshell
  (defun eshell/clear ()
    "Custom `eshell' clear function to clear to top."
    (interactive)
    (let ((inhibit-read-only t))
      (erase-buffer))))
#+end_src

*** Setup
#+begin_src emacs-lisp
(diego/setup-mode term
  (setq-local yas-dont-activate-functions t)
  (local-set-key (kbd "<C-tab>") #'multi-term-next))
#+end_src
** Misc Modes
*** [[http://elpa.gnu.org/packages/csv-mode.html][csv-mode]]
#+begin_quote
  Major mode for editing comma/char separated values
#+end_quote
Eh, wanted to try a simpler way of editing csv files. (Excel and Numbers both
kinda suck at this, LibreOffice was slightly better.) Haven't used this much.
#+begin_src emacs-lisp
(use-package csv-mode
  :mode "\\.csv\\'"
  :config
  (add-hook 'csv-mode-hook #'csv-align-fields))
#+end_src
*** [[https://github.com/Kitware/CMake][cmake-mode]]
#+begin_src emacs-lisp
(use-package cmake-mode)
#+end_src
*** [[http://jblevins.org/projects/markdown-mode/][markdown-mode]]
Syntax highlighting for markdown files.
#+begin_src emacs-lisp
(use-package markdown-mode
  :mode "\\.md\\'"
  :config)
#+end_src
*** [[https://github.com/haskell/haskell-mode][haskell-mode]]
#+begin_src emacs-lisp
(use-package haskell-mode
  :mode "\\.hs\\'"
  :config
  (setq haskell-indentation-layout-offset 4
        haskell-indentation-left-offset 4
        haskell-indentation-ifte-offset 4))

#+end_src
*** [[https://github.com/yoshiki/yaml-mode][yaml-mode]]
#+begin_quote
  The emacs major mode for editing files in the YAML data serialization format.
#+end_quote
#+begin_src emacs-lisp
(use-package yaml-mode
  :mode "\\.yml\\'")
#+end_src
*** [[https://github.com/clojure-emacs/clojure-mode][clojure-mode]]
#+begin_quote
  Emacs support for the Clojure(Script) programming language
#+end_quote
#+begin_src emacs-lisp
(use-package clojure-mode)
#+end_src
*** [[https://github.com/joshwnj/json-mode][json-mode]]
#+begin_quote
  Major mode for editing JSON files with emacs
#+end_quote
#+begin_src emacs-lisp
(use-package json-mode
  :mode "\\.json\\'")
#+end_src
*** [[https://github.com/defunkt/coffee-mode][coffee-mode]]
#+begin_quote
  Emacs Major Mode for CoffeeScript
#+end_quote
#+begin_src emacs-lisp
(use-package coffee-mode
  :mode "\\.coffee\\'")
#+end_src
*** [[https://github.com/millejoh/emacs-ipython-notebook][EIN]]
#+begin_quote
  Jupyter and IPython 2.x/3.x notebook client in Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package ein)
#+end_src
*** [[https://github.com/immerrr/lua-mode][lua-mode]]
#+begin_quote
  Emacs major mode for editing Lua
#+end_quote
#+begin_src emacs-lisp
(use-package lua-mode)
#+end_src
*** [[https://github.com/mcandre/vimrc-mode][vimrc-mode]]
#+begin_quote
  Enables syntax highlighting for .vimrc/_vimrc files
#+end_quote
#+begin_src emacs-lisp
(use-package vimrc-mode)
#+end_src

*** [[https://github.com/politza/pdf-tools][pdf-tools]]
#+begin_quote
  Emacs support library for PDF files.
#+end_quote
#+begin_src emacs-lisp
(use-package pdf-tools
  :defer 10
  :evil-bind (:normal
              pdf-view-mode-map
              ("s" . pdf-view-fit-width-to-window)
              ("a" . pdf-view-fit-height-to-window)
              ("/" . isearch-forward)
              ("J" . pdf-view-next-page)
              ("K" . pdf-view-previous-page)
              ("j" . pdf-view-next-line-or-next-page)
              ("k" . pdf-view-previou-line-or-previous-page)
              ("-" . pdf-view-shrink)
              ("+" . pdf-view-enlarg))
  :config
  (pdf-tools-install))
#+end_src
*** [[https://github.com/fxbois/web-mode][web-mode]]
#+begin_src emacs-lisp
(use-package web-mode
  :mode ("\\.html?\\'" "\\.xml\\'" "\\.launch\\'")
  :config
  (setq web-mode-markup-indent-offset 2))
#+end_src
*** [[https://github.com/therockmandolinist/turing-machine][turing-machine]]
#+begin_src emacs-lisp
(use-package turing-machine
  :quelpa (turing-machine
           :fetcher github
           :repo "therockmandolinist/turing-machine"))
#+end_src
* Enhancements
** Emacs
*** Packages
**** [[https://github.com/jwiegley/use-package/blob/master/bind-key.el][bind-key]]
#+begin_src emacs-lisp
(use-package bind-key
  :ensure t)
#+end_src
**** [[https://github.com/purcell/disable-mouse][disable-mouse]]
#+begin_quote
  Disable the mouse in Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package disable-mouse
  :defer 5
  :config
  (global-disable-mouse-mode)
  (dolist (key '([mouse-1]
                 [mouse-4]
                 [mouse-5]
                 [mouse-6]
                 [mouse-7]
                 [down-mouse-1]
                 [drag-mouse-1]
                 [wheel-right]
                 [double-wheel-right]
                 [triple-wheel-right]
                 [wheel-left]
                 [double-wheel-left]
                 [triple-wheel-left]
                 [wheel-down]
                 [double-wheel-down]
                 [triple-wheel-down]
                 [wheel-up]
                 [double-wheel-up]
                 [triple-wheel-up]))
    (define-key evil-motion-state-map key #'ignore)))
#+end_src

**** [[https://github.com/lewang/flx][flx]]
#+begin_quote
  Fuzzy matching for Emacs ... a la Sublime Text.
#+end_quote
#+begin_src emacs-lisp
(use-package flx)
#+end_src

**** [[https://github.com/nonsequitur/smex][smex]]
#+begin_quote
  A smart M-x enhancement for Emacs.
#+end_quote
Sorts ivy by most recently used, I think.
#+begin_src emacs-lisp
(use-package smex)
#+end_src

**** [[https://github.com/Fanael/persistent-scratch][persistent-scratch]]
#+begin_quote
  Preserve the scratch buffer across Emacs sessions
#+end_quote
#+begin_src emacs-lisp
(use-package persistent-scratch
  :defer 10
  :config
  (persistent-scratch-setup-default))
#+end_src
**** [[https://github.com/iqbalansari/restart-emacs][restart-emacs]]
#+begin_quote
  A simple emacs package to restart emacs from within emacs.
#+end_quote
SUPER nifty.
#+begin_src emacs-lisp
(use-package restart-emacs
  :leader-bind ("qr" . restart-emacs)
  :init
  (evil-ex-define-cmd "qr[estart]" 'restart-emacs))
#+end_src
**** [[https://github.com/Malabarba/paradox][paradox]]
#+begin_quote
  Project for modernizing Emacs' Package Menu. With package ratings, usage
  statistics, customizability, and more.
#+end_quote
#+begin_src emacs-lisp
(use-package paradox
  :leader-bind ("ap" . paradox-list-packages)
  :evil-bind (:normal
              paradox-menu-mode-map
              ("(" . package-menu-toggle-hiding)
              ("?" . package-menu-describe-package)
              ("F" . package-menu-filter)
              ("RET" . paradox-push-button)
              ("S*" . paradox-sort-by-★)
              ("Sp" . paradox-sort-by-package)
              ("Ss" . paradox-sort-by-status)
              ("TAB" . forward-button)
              ("U" . package-menu-mark-upgrades)
              ("d" . package-menu-mark-delete)
              ("f" . hydra-paradox-filter/body)
              ("i" . package-menu-mark-install)
              ("q" . paradox-quit-and-close)
              ("r" . package-menu-refresh)
              ("u" . package-menu-mark-unmark)
              ("vh" . paradox-menu-visit-homepage)
              ("vl" . paradox-menu-view-commit-list)
              ("x" . paradox-menu-execute)
              ("~" . package-menu-mark-obsolete-for-deletion)
              ([backtab] . backward-button))
  :config
  (setq paradox-execute-asynchronously t
        paradox-github-token (password-store-get "tokens/github/paradox")
        paradox-automatically-star nil))
#+end_src

**** [[https://git.zx2c4.com/password-store/tree/contrib/emacs][password-store]]
#+begin_src emacs-lisp
(use-package password-store)
#+end_src

**** [[https://github.com/jschaf/esup][esup]]
#+begin_quote
  ESUP - Emacs Start Up Profiler
#+end_quote
#+begin_src emacs-lisp
(use-package esup
  :config
  (setq esup-insignificant-time 0.001))
#+end_src

**** [[https://www.emacswiki.org/emacs/centered-cursor-mode.el][centered-cursor-mode]]
#+begin_quote
  Cursor stays vertically centered.
#+end_quote
I use this for reading, mostly.
#+begin_src emacs-lisp
(use-package centered-cursor-mode)
#+end_src
*** Hydras
**** toggle
#+begin_src emacs-lisp
(with-eval-after-load 'hydra
  (defvar flycheck-mode nil)
  (defvar focus-mode nil)
  (defhydra hydra-toggle (:color pink)
    "
_a_ abbrev:              %-3s`abbrev-mode   _d_ debug-on-error:      %-3s`debug-on-error   _P_ prettify-symbols:   %-3s`prettify-symbols-mode
_i_ aggressive-indent:   %-3s`aggressive-indent-mode   _l_ nlinum:              %-3s`nlinum-mode   _F_ focus:              %-3s`focus-mode
_c_ column-indicator:    %-3s`fci-mode   _p_ smartparens:         %-3s`smartparens-mode
_f_ flycheck:            %-3s`flycheck-mode   _e_ evil-smartparens:    %-3s`evil-smartparens-mode
_s_ flyspell:            %-3s`flyspell-mode   _w_ global-whitespace:   %-3s`global-whitespace-mode
"
    ("a" abbrev-mode nil)
    ("i" aggressive-indent-mode nil)
    ("d" toggle-debug-on-error nil)
    ("c" fci-mode nil)
    ("l" nlinum-mode nil)
    ("p" smartparens-mode nil)
    ("P" prettify-symbols-mode nil)
    ("e" evil-smartparens-mode nil)
    ("f" flycheck-mode nil)
    ("F" focus-mode nil)
    ("s" flyspell-mode nil)
    ("w" global-whitespace-mode nil)
    ("q" nil "quit")))
#+end_src

*** Bindings
#+begin_src emacs-lisp
(diego/set-leader-keys
  "t"   'hydra-toggle/body)

(with-eval-after-load 'evil
  (evil-define-key 'normal custom-mode-map
    "q" #'Custom-buffer-done)

  (evil-add-hjkl-bindings occur-mode-map 'emacs
    (kbd "/")       'evil-search-forward
    (kbd "n")       'evil-search-next
    (kbd "N")       'evil-search-previous
    (kbd "C-d")     'evil-scroll-down
    (kbd "C-u")     'evil-scroll-up
    (kbd "C-w C-w") 'other-window))
#+end_src
** Evil
*** [[https://github.com/TheBB/evil-indent-plus][evil-indent-plus]]
#+begin_quote
  Better indent textobjects for evil
#+end_quote
#+begin_src emacs-lisp
(use-package evil-indent-plus
  :after evil
  :config
  (evil-indent-plus-default-bindings))
#+end_src
*** [[https://github.com/therockmandolinist/evil-numbers][evil-numbers]]
#+begin_quote
  Increment and decrement numbers in Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package evil-numbers
  :quelpa (evil-numbers
           :fetcher github
           :repo "therockmandolinist/evil-numbers"))
#+end_src
*** [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]]
#+begin_quote
  Comment/uncomment lines efficiently. Like Nerd Commenter in Vim
#+end_quote
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :commands (evilnc-comment-operator
             diego/comment-or-uncomment-lines-inverse)
  :bind (:map evil-normal-state-map
              ("gc" . evilnc-comment-operator)
              ("gy" . evilnc-copy-and-comment-lines))
  :leader-bind ((";" . evilnc-comment-operator)
                ("ci" . diego/comment-or-uncomment-lines-inverse)
                ("cl" . evilnc-comment-or-uncomment-lines)
                ("cp" . evilnc-comment-or-uncomment-paragraphs)
                ("ct" . evilnc-comment-or-uncomment-to-the-line)
                ("cy" . evilnc-copy-and-comment-lines))
  :config
  (defun diego/comment-or-uncomment-lines-inverse (&optional arg)
    "Source: http://tinyurl.com/kwjd3fp"
    (interactive "p")
    (let ((evilnc-invert-comment-line-by-line t))
      (evilnc-comment-or-uncomment-lines arg))))
#+end_src
*** [[https://github.com/redguardtoo/evil-matchit][evil-matchit]]
#+begin_src emacs-lisp
(use-package evil-matchit
  :after evil
  :config (global-evil-matchit-mode 1))
#+end_src
*** [[https://github.com/syohex/emacs-evil-anzu][evil-anzu]]
#+begin_src emacs-lisp
(use-package evil-anzu
  :after evil
  :config
  (setq anzu-cons-mode-line-p nil))
#+end_src
** Org
*** [[https://github.com/gregsexton/ob-ipython][ob-ipython]]
#+begin_quote
  org-babel integration with Jupyter for evaluation of (Python by default) code blocks
#+end_quote
#+begin_src emacs-lisp
(use-package ob-ipython
  :after org)
#+end_src
*** [[https://github.com/kawabata/ox-pandoc][ox-pandoc]]
#+begin_quote
  Another org-mode exporter via pandoc.
#+end_quote
Translates Org-mode file to various other formats via Pandoc. Pretty neat.
#+begin_src emacs-lisp
(use-package ox-pandoc
  :after org
  :config
  ;; default options for all output formats
  (setq org-pandoc-options '((standalone . t)
                             (latex-engine . xelatex)
                             (mathjax . t)
                             (parse-raw . t)))
  ;; cancel above settings only for 'docx' format
  (setq org-pandoc-options-for-docx '((standalone . nil))))
#+end_src
*** [[https://github.com/marsmining/ox-twbs][ox-twbs]]
#+begin_quote
  Export org-mode docs as HTML compatible with Twitter Bootstrap.
#+end_quote
#+begin_src emacs-lisp
(use-package ox-twbs
  :after org)
#+end_src
*** [[https://github.com/snosov1/toc-org][toc-org]]
#+begin_quote
  toc-org is an Emacs utility to have an up-to-date table of contents in the
  org files without exporting (useful primarily for readme files on GitHub)
#+end_quote
#+begin_src emacs-lisp
(use-package toc-org
  :after org
  :config
  (add-hook 'org-mode-hook #'toc-org-enable))
#+end_src
*** [[https://github.com/myuhe/org-gcal.el][org-gcal]]
#+begin_quote
  Org sync with Google Calendar
#+end_quote
#+begin_src emacs-lisp
(use-package org-gcal
  :after org-agenda
  :config
  (setq  org-gcal-file-alist '(("diegoamundo@gmail.com" . "~/Dropbox (MIT)/org/gcal.org"))))
#+end_src
*** [[https://github.com/larstvei/ox-gfm][ox-gfm]]
#+begin_src emacs-lisp
(use-package ox-gfm
  :after org)
#+end_src
** Elfeed
*** [[https://github.com/remyhonig/elfeed-org][elfeed-org]]
#+begin_quote
  Configure the Elfeed RSS reader with an Orgmode file
#+end_quote
#+begin_src emacs-lisp
(use-package elfeed-org
  :after elfeed
  :if (not noninteractive)
  :config
  (elfeed-org))
#+end_src

*** [[https://github.com/algernon/elfeed-goodies][elfeed-goodies]]
#+begin_quote
  Various goodies for Elfeed
#+end_quote
#+begin_src emacs-lisp
(use-package elfeed-goodies
  :after elfeed
  :config
  (elfeed-goodies/setup)
  (setq elfeed-goodies/entry-pane-position 'bottom))
#+end_src
* Fun
** Packages
*** [[https://github.com/josuah/drawille][drawille]]
#+begin_quote
  Drawille library implementation in elisp.
#+end_quote
Draws stuff in ascii.
#+begin_src emacs-lisp
(use-package drawille)
#+end_src
*** [[https://github.com/johanvts/emacs-fireplace/][fireplace]]
#+begin_quote
  A cozy fireplace for emacs.
#+end_quote
For the cold winters.
#+begin_src emacs-lisp
(use-package fireplace
  :config
  :evil-bind (:normal
              fireplace-mode-map
              ("q" . fireplace-off)
              ("Q" . fireplace-off)
              ("-" . fireplace-down)
              ("=" . fireplace-up)
              ("*" . fireplace-toggle-smoke)))
#+end_src
*** [[https://github.com/therockmandolinist/emacs-hacker-typer][hacker-typer]]
#+begin_quote
  A customizable implementation of http://hackertyper.com in emacs.
#+end_quote
#+begin_src emacs-lisp
(use-package hacker-typer
  :quelpa (hacker-typer
           :fetcher github
           :repo "therockmandolinist/emacs-hacker-typer"
           :files (:defaults "hackerman.png"))
  :config
  (setq hacker-typer-show-hackerman t)
  (setq hacker-typer-remove-comments t))
#+end_src
*** [[https://www.emacswiki.org/emacs/highlight-tail.el][highlight-tail]]
#+begin_quote
  Draw a colourful "tail" while you write
#+end_quote
(pure awesome)
#+begin_src emacs-lisp
(use-package highlight-tail)
#+end_src
*** [[https://github.com/TeMPOraL/nyan-mode][nyan-mode]]
#+begin_quote
  Nyan Cat for Emacs! Nyanyanyanyanyanyanyanyanyan!
#+end_quote
For show.
#+begin_src emacs-lisp
(use-package nyan-mode
  :config
  (nyan-mode))
#+end_src
*** [[https://github.com/rbanffy/selectric-mode][selectric-mode]]
#+begin_quote
  Make your Emacs sound like a proper typewriter.
#+end_quote
Clackity-clack.
#+begin_src emacs-lisp
(use-package selectric-mode)
#+end_src
*** [[https://github.com/parkouss/speed-type][speed-type]]
#+begin_quote
  Practice touch/speed typing in emacs.
#+end_quote
#+begin_src emacs-lisp
(use-package speed-type
  :leader-bind ("as" . speed-type-text)
  :config
  (setq speed-type--gb-url-format
        "http://www.gutenberg.org/cache/epub/%d/pg%d.txt"))
#+end_src
*** [[https://gitlab.com/iankelling/spray][spray]]
#+begin_quote
A speed reading mode for Emacs.
#+end_quote
#+begin_src emacs-lisp
(use-package spray)
#+end_src
*** [[https://github.com/vibhavp/emacs-xkcd][xkcd]]
#+begin_quote
  Read xkcd from Emacs.
#+end_quote
#+begin_src emacs-lisp
(use-package xkcd
  :leader-bind ("ax" . xkcd)
  :evil-bind (:normal
              xkcd-mode-map
              ("j" . xkcd-next)
              ("h" . xkcd-prev)
              ("k" . xkcd-prev)
              ("l" . xkcd-next)
              ("t" . xkcd-alt-text)
              ("q" . xkcd-kill-buffer)
              ("c" . xkcd-copy-link)
              ("g" . xkcd-get)
              ("r" . xkcd-rand)
              ("o" . xkcd-open-browser)
              ("e" . xkcd-open-explanation-browser)
              ("G" . xkcd-get-latest))
  :config)
#+end_src
** Functions
#+begin_src emacs-lisp
(eval-when-compile
  (defvar zone-programs))

(defun diego/zone-choose ()
  "Choose a PGM to run for `zone'.

Source: http://tinyurl.com/lo96nwc"
  (interactive)
  (require 'zone nil t)
  (let* ((pgm (completing-read
               "Program: "
               (mapcar #'symbol-name zone-programs)))
         (zone-programs (list (intern pgm))))
    (redisplay)
    (zone)))
#+end_src
** Bindings
#+begin_src emacs-lisp
(with-eval-after-load 'bind-map
  (diego/set-leader-keys
    "agd" 'dunnet
    "agg" 'gomoku
    "agt" 'tetris))
#+end_src

* Web?
** Packages
*** [[https://github.com/skeeto/elfeed][elfeed]]
#+begin_quote
  An Emacs web feeds client
#+end_quote
Configure the Elfeed RSS reader with an Orgmode file
#+begin_src emacs-lisp
(use-package elfeed
  :if (not noninteractive)
  :leader-bind ("ae" . elfeed)
  :evil-bind (:normal
              elfeed-search-mode-map
              ("RET" . elfeed-search-show-entry)
              ("+" . elfeed-search-tag-all)
              ("-" . elfeed-search-untag-all)
              ("G" . elfeed-search-fetch)
              ("S" . elfeed-search-set-filter)
              ("b" . elfeed-search-browse-url)
              ("g" . elfeed-search-update--force)
              ("q" . quit-window)
              ("r" . elfeed-search-untag-all-unread)
              ("s" . elfeed-search-live-filter)
              ("u" . elfeed-search-tag-all-unread)
              ("y" . elfeed-search-yank)
              ("U" . elfeed-update)
              :normal elfeed-show-mode-map
              ("+" . elfeed-show-tag)
              ("-" . elfeed-show-untag)
              ("P" . elfeed-show-play-enclosure)
              ("b" . elfeed-show-visit)
              ("d" . elfeed-show-save-enclosure)
              ("g" . elfeed-show-refresh)
              ("l" . elfeed-goodies/split-show-next)
              ("h" . elfeed-goodies/split-show-prev)
              ("q" . elfeed-kill-buffer)
              ("s" . elfeed-show-new-live-search)
              ("y" . elfeed-show-yank))
  :config
  (add-hook 'elfeed-search-mode-hook (lambda () (evil-smartparens-mode -1))))
#+end_src
*** [[https://github.com/aaronbieber/sunshine.el][sunshine]]
#+begin_quote
  An Emacs package for displaying the forecast from OpenWeatherMap.
#+end_quote
#+begin_src emacs-lisp
(use-package sunshine
  :leader-bind (("aW" . sunshine-quick-forecast)
                ("aw" . sunshine-forecast))
  :config
  (setq sunshine-location "02139,USA"
        sunshine-appid (password-store-get "api/openweathermap")))
#+end_src
* Local vars!
I'll probably remove that exclamation point at some point, but right now I'm
excited about file local vars.

For org config.org
#+begin_example
# Local Variables:
# after-save-hook: (git-gutter diego/async-tangle-init)
# org-src-fontify-natively: nil
# org-tags-match-list-sublevels: nil
# End:
#+end_example
