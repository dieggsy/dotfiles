#+TITLE: Emacs Init File!
#+PROPERTY: header-args :results silent :comments link :tangle ~/dotfiles/emacs.d/init.el

* Intro

This is the bulk of my emacs configuration, loaded by [[./init.el][init.el]]. It's pretty cool
that I can write it in org mode, because easy organization and rearrangement
are sweet. Check out [[https://github.com/aaronbieber/dotfiles/tree/master/configs/emacs.d][@aaronbieber]], [[https://github.com/hrs/dotfiles/tree/master/emacs.d][@hrs]], and [[https://github.com/syl20bnr/spacemacs][spacemacs]] - a lot of the
inspiration (and erm, code) for this is taken from them.

:NOTE:
*Note:* The usual way to do this is to call ~(org-babel-load-file "config.org")~,
and I did that for a while, but for whatever reason I decided I wanted
=config.el= (and its compiled verison) to be produced as I changed the file
itself, hence the [[#dotfile-handling][dotfile handling]] functions and [[#local-vars][file local variables]]. Also,
the optional ~COMPILE~ argument of ~org-babel-load-file~ wasn't working for me, so
there's that.
:END:

* Contents                                                            :toc_1:
- [[#intro][Intro]]
- [[#initial-setup][Initial Setup]]
- [[#core][Core]]
- [[#help][Help]]
- [[#filesbuffers][Files/Buffers]]
- [[#editing][Editing]]
- [[#navigation][Navigation]]
- [[#appearance][Appearance]]
- [[#dev][Dev]]
- [[#tools][Tools]]
- [[#emacs-enhancements][Emacs Enhancements]]
- [[#fun][Fun]]
- [[#web-services][Web services]]
- [[#exwm][EXWM]]
- [[#finalize][Finalize]]

* Initial Setup
** Details
*** Lexical bindinga
In accordance with the [[https://github.com/bbatsov/emacs-lisp-style-guide#source-code-layout--organization][emacs-lisp-style-guide]].
#+begin_src emacs-lisp :comments no :cond-case no :padline no
;;; -*- lexical-binding: t -*-
#+end_src
*** package-initialize
~package.el~ is annoying like that.
#+begin_src emacs-lisp :comments no :cond-case no :padline no
;;(package-initialize)
#+end_src
** Startup time
Next we define a variable for timing startup, and change ~gc-cons-threshhold~
temporarily (only during startup). This saves me like .3 s of startup time.
#+begin_src emacs-lisp
(defconst d/emacs-start-time (current-time))
(setq gc-cons-threshold 64000000)
(add-hook 'after-init-hook (lambda ()
                             (setq gc-cons-threshold 800000)))
#+end_src
** Server
Start server if not already running. You can do this with ~emacs --daemon~ or
even automate it with ~brew services start emacs~ on macOS, but I usually just
run Emacs on login anyway, so this suffices.

This makes startup time irrelevant. Start emacs once, connect with emacsclient
every other time. See [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html#Emacs-Server][Using Emacs as a Server]].
#+begin_src emacs-lisp
(require 'server)
(unless (server-running-p)
  (server-start))
#+end_src
** Load Path
Add [[./lisp][lisp]] directory and subdirectories to ~load-path~ and ~custom-theme-load-path~.

This is where I put lisp that isn't necessarily central to my config or needs
to be in a standalone file such as a some auth settings, lisp practice,
really bad self-made themes, ~org-export-async-init-file~, etc.
#+begin_src emacs-lisp
(eval-and-compile
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
  (let ((default-directory  "~/.emacs.d/lisp/"))
    (normal-top-level-add-subdirs-to-load-path))

  (add-to-list 'custom-theme-load-path "~/.emacs.d/lisp/"))
#+end_src
** Libraries
I'm sure this will be required by some package somewhere along the way, but I
use this a fair bit so let's explicitly require it.
#+begin_src emacs-lisp
(require 'cl-lib)
(require 'subr-x)
#+end_src
** Init utilities
#+begin_src emacs-lisp
(defmacro d/time (name &rest body)
  (declare (indent defun))
  `(let ((s-time (current-time)))
     (prog1
         (progn
           ,@body)
       (message "`%s' execution took %.5f seconds."
                ,name
                (float-time (time-subtract (current-time) s-time))))))

(defmacro d/setup-hook (hooks &rest body)
  "Create a setup function for HOOKS and add it to relevant hook(s)."
  (declare (indent defun))
  (let ((hooks (if (listp hooks) hooks (list hooks))))
    (let ((setup-func (intern (concat "d/setup-" (symbol-name (car hooks))))))
      `(progn
         (defun ,setup-func ()
           ,@body)
         ,@(cl-loop for hook in hooks collect
                    (let ((hook-name (intern (concat (symbol-name hook)
                                                     "-hook"))))
                      `(add-hook ',hook-name #',setup-func)))))))

(defmacro d/with-eval-after-load (feature &rest body)
  (declare (indent defun))
  `(with-eval-after-load ,feature
     (condition-case-unless-debug err
         (progn
           ,@body)
       (error
        (display-warning
         'init
         (format "%s eval-after-load: %s "
                 (symbol-name ,feature)
                 (error-message-string err))
         :error)))))
#+end_src
** Package management
*** [[https://github.com/raxod502/straight.el#getting-started][straight]]
#+begin_quote
Next-generation, purely functional package manager for the Emacs hacker.
#+end_quote

#+begin_src emacs-lisp
(defvar straight-recipe-overrides '((nil (straight :host github
                                                 :repo "raxod502/straight.el"
                                                 :files ("straight.el")
                                                 :branch "develop"))))
(let ((bootstrap-file (concat user-emacs-directory "straight/bootstrap.el"))
      (bootstrap-version 2))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(straight-register-package
  '(seq :repo "https://git.savannah.gnu.org/git/emacs/elpa.git" :files ("packages/seq/*.el")))
#+end_src
*** [[https://github.com/jwiegley/use-package][use-package]]
#+begin_quote
A use-package declaration for simplifying your .emacs
#+end_quote
An excellent utility for managing packages and package configuration in a neat
and organized way, with advanced support for deferring, pre/post-loading
configuration, time reporting, and more.

Using use-package, you can use the same init file across computers without
keeping track of what's installed or not and it will ensure that any missing
packages are installed. It's pretty neat.
#+begin_src emacs-lisp
(straight-use-package 'use-package)
#+end_src
I also set some variables - in particular, tell me the load time when a package
takes more than .001 seconds, always tell me about package loading, and always
defer and ensure packages are installed unless otherwise stated.
#+begin_src emacs-lisp
(setq use-package-minimum-reported-time .001
      use-package-verbose t
      use-package-always-defer t
      use-package-always-ensure t)

(eval-when-compile
  (require 'use-package))
#+end_src
** Packages
*** [[https://github.com/tarsius/no-littering/][no-littering]]
#+begin_quote
Help keeping ~/.emacs.d clean
#+end_quote
Usually, a bunch of crap is kept in your ~.emacs.d~ folder by both built-in emacs
features and external packages. This package sets up a convention to store
everything in either ~.emacs.d/var~ or ~.emacs.d/etc~.
#+begin_src emacs-lisp
(use-package no-littering
  :demand t
  :config
  (savehist-mode 1)
  (add-to-list 'savehist-additional-variables 'kill-ring)
  (save-place-mode 1)
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))
#+end_src
*** [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]]
#+begin_quote
Make Emacs use the $PATH set up by the user's shell
#+end_quote
If you've ever had issues where emacs doesn't find your executables, this
package should fix them nicely.
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :defer 5
  :config
  (setq exec-path-from-shell-check-startup-files nil)
  (exec-path-from-shell-initialize))
#+end_src
*** [[https://github.com/Ilazki/prettify-utils.el][prettify-utils]]
#+begin_quote
Helper functions for emacs' prettify-symbols-mode
#+end_quote
#+begin_src emacs-lisp
(use-package prettify-utils
  :recipe (:host github
           :repo "Ilazki/prettify-utils.el"))
#+end_src
*** [[https://github.com/abo-abo/hydra][hydra]]
#+begin_quote
make Emacs bindings that stick around
#+end_quote
#+begin_src emacs-lisp
(use-package hydra
  :config)
#+end_src
* Core
** Defaults
*** Custom
#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+end_src
*** Column
Show the column number in the modeline, because I'm not a savage.
#+begin_src emacs-lisp
(setq column-number-mode t)
#+end_src
*** Disabled Commands
#+begin_src emacs-lisp
(setq disabled-command-function nil)
#+end_src
*** Kill-ring
Save stuff you've copied in other applications to the emacs kill-ring.
#+begin_src emacs-lisp
(setq save-interprogram-paste-before-kill t)
#+end_src
*** Messages
Allow more messages in ~*Messages*~ buffer so you can look at what happened waaay
back if you need to.
#+begin_src emacs-lisp
(setq message-log-max 10000)
#+end_src
*** Minibuffer
Allow editing in the minibuffer... /with/ the minibuffer. Also resize minibuffer
windows to fit text.
#+begin_src emacs-lisp
(setq enable-recursive-minibuffers t
      resize-mini-windows t)
#+end_src
*** Prompts
Having to type "yes" can be annoying.
#+begin_src emacs-lisp
(defalias 'yes-or-no-p #'y-or-n-p)
#+end_src
*** Scratch
#+begin_src emacs-lisp
(setq initial-scratch-message ""
      initial-major-mode 'emacs-lisp-mode)
#+end_src
*** Tab
Use tab for completion and cycling candidates (relevant for the minibuffer?).
#+begin_src emacs-lisp
(setq tab-stop-list (number-sequence 4 200 4)
      completion-cycle-threshold t
      tab-always-indent 'complete)
#+end_src
*** Time Display
#+begin_src emacs-lisp
(with-eval-after-load 'time
  (setq  display-time-24hr-format t
         display-time-default-load-average nil
         display-time-format "%Y-%d-%m %H:%M "
         display-time-load-average nil))
#+end_src
*** Battery
#+begin_src emacs-lisp
(with-eval-after-load 'battery
  (setq battery-mode-line-format "%p"))
#+end_src
*** Tramp
Use ssh by default and remember passwords for [[https://www.gnu.org/software/tramp/][tramp]]. Also make tramp quieter
except for warnings and errors.
#+begin_src emacs-lisp
(setq tramp-default-method "ssh"
      tramp-verbose 2
      password-cache t
      password-cache-expiry 86400)
#+end_src
*** EPA
#+begin_src emacs-lisp
(setq epa-pinentry-mode 'loopback)
#+end_src
** Functions
*** Dotfiles
#+begin_src emacs-lisp
(d/with-eval-after-load 'org
  (defvar d/show-async-tangle-results nil)

  (defvar d/async-babel-tangle-decrypt nil)

  (defun d/async-babel-tangle (&optional decrypt)
    "Tangle org file asynchronously."
    (interactive)
    (let ((init-tangle-start-time (current-time))
          (file (buffer-file-name))
          (async-quiet-switch "-q"))
      (async-start
       `(lambda ()
          (require 'org)
          (when ,d/async-babel-tangle-decrypt
            (require 'org-crypt)
            (org-crypt-use-before-save-magic)
            (add-hook 'org-babel-pre-tangle-hook 'org-decrypt-entries)
            (remove-hook 'org-babel-pre-tangle-hook 'save-buffer))
          (org-babel-tangle-file ,file))
       (unless d/show-async-tangle-results
         `(lambda (result)
            (if result
                (message "SUCCESS: init.org successfully tangled. (%.3fs)"
                         (float-time (time-subtract (current-time)
                                                    ',init-tangle-start-time)))
              (message "ERROR: init.org tangle failed."))))))))
#+end_src
*** Other
#+begin_src emacs-lisp
(defmacro d/fbound-and-true? (name &optional args)
  `(and (fboundp #',name)
        (apply #',name ,args)))

(defun pinentry-emacs (desc prompt ok error)
  (read-passwd
   (concat (replace-regexp-in-string
            "%22"
            "\""
            (replace-regexp-in-string
             "%0A"
             "\n"
             desc))
           prompt
           " ")))
#+end_src
** Packages
These are packages that I consider /absolutely essential/ to my emacs workflow,
or that enhance emacs at a deeper level than any regular mode.
*** [[https://github.com/noctuid/general.el][general]]
#+begin_quote
More convenient key definitions in emacs
#+end_quote
That undersells it. The /most/ convenient key definitions in emacs.
#+begin_src emacs-lisp
(use-package general
  :demand t
  :config
  (general-evil-setup t)

  (dolist (func '(imap emap iemap nmap vmap nvmap omap mmap rmap otomap itomap tomap))
    (put (intern (concat "general-" (symbol-name func))) 'lisp-indent-function 'defun))

  (general-create-definer
   d/mode-leader-keys
   :states '(emacs normal visual motion insert)
   :non-normal-prefix "C-,"
   :prefix ",")

  (general-create-definer
   d/leader-keys
   :states '(emacs normal visual motion insert)
   :non-normal-prefix "C-SPC"
   :prefix "SPC"))
#+end_src
*** [[https://github.com/emacs-evil/evil][evil]]
#+begin_quote
The extensible vi layer for Emacs.
#+end_quote
I really like Vim bindings. I originally learned Emacs bindings but there was
something really appealing about the simplicity and power of modal editing. So
I went for it. Now I'll never go back.
**** package
#+begin_src emacs-lisp
(use-package evil
  :demand t
  :general
  (nmap
    "-" 'negative-argument
    "\\" 'evil-window-next
    ;; Basically C-[ for a Dvorak keyboard (_ is for terminal).
    "C-_" 'keyboard-quit
    "C-/"  'keyboard-quit
    [escape]  'keyboard-quit)
  (:states '(insert replace visual)
   "C-_" 'evil-normal-state
   "C-/" 'evil-normal-state)
  (vmap [escape] 'keyboard-quit)
  :custom
  (evil-want-C-u-scroll t)
  (evil-want-fine-undo t)
  (evil-search-module 'evil-search)
  (evil-lookup-func (lambda () (man (thing-at-point 'word))))
  :config
  (setq evil-insert-state-cursor '(bar . 1)
        evil-emacs-state-cursor '(bar . 1)
        evil-ex-search-vim-style-regexp t
        evil-normal-state-tag  " N "
        evil-insert-state-tag  " I "
        evil-motion-state-tag  " M "
        evil-visual-state-tag  " V "
        evil-emacs-state-tag   " E "
        evil-replace-state-tag " R "
        evil-operator-state-tag " O ")

  (evil-ex-define-cmd "dtw" #'delete-trailing-whitespace)

  (evil-mode 1))
#+end_src
**** support
***** [[https://github.com/syohex/emacs-evil-anzu][evil-anzu]]
#+begin_src emacs-lisp
(use-package evil-anzu
  :defer 15
  :config
  (setq anzu-cons-mode-line-p nil)
  (defun d/anzu-update-mode-line (here total)
    (when anzu--state
      (let ((status (cl-case anzu--state
                      (search (format "%s/%d%s"
                                      (anzu--format-here-position here total)
                                      total (if anzu--overflow-p "+" "")))
                      (replace-query (format "(%d replace)" total))
                      (replace (format "(%d/%d)" here total)))))
        status)))
  (setq anzu-mode-line-update-function #'d/anzu-update-mode-line))
#+end_src
***** [[https://github.com/jojojames/evil-collection][evil-collection]]
#+begin_quote
 A set of keybindings for evil-mode
#+end_quote
#+begin_src emacs-lisp
(use-package evil-collection
  :recipe (:host github
           :repo "jojojames/evil-collection")
  :custom
  (evil-collection-company-use-tng nil)
  :init
  (require 'evil-minibuffer)
  (evil-collection-minibuffer-init)
  (evil-collection-init))
#+end_src
***** [[https://github.com/cute-jumper/evil-embrace.el][evil-embrace]]
#+begin_src emacs-lisp
(use-package evil-embrace
  :after evil-surround
  :hook (org-mode . embrace-org-mode-hook)
  :config
  (evil-embrace-enable-evil-surround-integration)
  (d/with-eval-after-load 'exwm
    (setq evil-embrace-show-help-p nil)))
#+end_src
***** [[https://github.com/emacs-evil/evil-ediff][evil-ediff]]
#+begin_quote
Make ediff a little more evil
#+end_quote
#+begin_src emacs-lisp
(use-package evil-ediff
  :after ediff)
#+end_src
***** [[https://github.com/TheBB/evil-indent-plus][evil-indent-plus]]
#+begin_quote
Better indent textobjects for evil
#+end_quote
#+begin_src emacs-lisp
(use-package evil-indent-plus
  :defer 15
  :config
  (evil-indent-plus-default-bindings))
#+end_src
***** [[https://github.com/emacs-evil/evil-magit][evil-magit]]
#+begin_quote
Black magic or evil keys for magit
#+end_quote
#+begin_src emacs-lisp
(use-package evil-magit
  :after magit
  :config)
#+end_src
***** [[https://github.com/redguardtoo/evil-matchit][evil-matchit]]
#+begin_src emacs-lisp
(use-package evil-matchit
  :defer 15
  :config (global-evil-matchit-mode 1))
#+end_src
***** [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]]
#+begin_quote
Comment/uncomment lines efficiently. Like Nerd Commenter in Vim
#+end_quote
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :general
  (nmap
    "gc" 'evilnc-comment-operator
    "gy" 'evilnc-copy-and-comment-lines)
  (d/leader-keys
   ";"  'evilnc-comment-operator
   "c"  '(:ignore t :wk "comment")
   "ci" 'd/comment-or-uncomment-lines-inverse
   "cl" 'evilnc-comment-or-uncomment-lines
   "cp" 'evilnc-comment-or-uncomment-paragraphs
   "ct" 'evilnc-comment-or-uncomment-to-the-line
   "cy" 'evilnc-copy-and-comment-lines)
  :config
  (defun d/comment-or-uncomment-lines-inverse (&optional arg)
    "Source: https://git.io/vQKza"
    (interactive "p")
    (let ((evilnc-invert-comment-line-by-line t))
      (evilnc-comment-or-uncomment-lines arg))))
#+end_src
***** [[https://github.com/dieggsy/evil-numbers][evil-numbers]]
#+begin_quote
Increment and decrement numbers in Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package evil-numbers
  :recipe (:host github
           :repo "dieggsy/evil-numbers"
           :upstream (:host github
                      :repo "cofi/evil-numbers")))
#+end_src
***** [[https://github.com/emacs-evil/evil-surround][evil-surround]]
#+begin_src emacs-lisp
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))
#+end_src
*** [[https://github.com/abo-abo/swiper][ivy]]
#+begin_quote
Ivy - a generic completion frontend for Emacs, Swiper - isearch with an
  overview, and more. Oh, man!
#+end_quote
A really nice search/completion system for emacs.
**** ivy
***** ivy
#+begin_src emacs-lisp
(use-package ivy
  :general
  (ivy-minibuffer-map
   [escape] 'keyboard-escape-quit
   "C-/" 'keyboard-escape-quit
   [S-return] 'ivy-dispatching-done-hydra
   [C-return] 'ivy-immediate-done
   "C-j" 'ivy-next-line
   "C-k" 'ivy-previous-line
   [S-up] 'ivy-previous-history-element
   [S-down] 'ivy-next-history-element
   "TAB" 'd/ivy-partial-or-next)
  (d/leader-keys
   "-" 'ivy-resume
   "bb" 'ivy-switch-buffer
   "bB" 'ivy-switch-buffer-other-window)
  (nmap ivy-minibuffer-map
    "j" 'ivy-next-line
    "k" 'ivy-previous-line)
  (imap ivy-minibuffer-map
    [remap sp-backward-delete-char] 'ivy-backward-delete-char)
  :config
  (ivy-mode 1)

  (defun d/ignore-dired-buffers (str)
    "Return non-nil if STR names a Dired buffer.
This function is intended for use with `ivy-ignore-buffers'."
    (let ((buf (get-buffer str)))
      (and buf (eq (buffer-local-value 'major-mode buf) 'dired-mode))))

  (add-to-list 'ivy-ignore-buffers #'d/ignore-dired-buffers)

  (defun d/ivy-dired-transformer (str)
    (let ((buf (get-buffer str))
          (str (ivy-switch-buffer-transformer str)))
      (if (and buf (eq (buffer-local-value 'major-mode buf) 'dired-mode))
          (concat (propertize "Dired: " 'face (get-text-property 0 'face str))
                  str)
        str)))

  (ivy-set-display-transformer 'ivy-switch-buffer 'd/ivy-dired-transformer)

  (setq ivy-re-builders-alist '((swiper . ivy--regex-plus)
                                (t . ivy--regex-ignore-order)))
  (setq ivy-format-function 'ivy-format-function-line
        ivy-use-virtual-buffers t ; Show recent files
        ivy-count-format ""
        ivy-extra-directories nil; '("../") ; ignore current folder and parent dir
        recentf-max-saved-items 50
        ivy-use-selectable-prompt t
        ivy-display-functions-alist nil
        ivy-switch-buffer-faces-alist '((dired-mode . ivy-subdir)
                                        (wdired-mode . ivy-subdir)
                                        (ranger-mode . ivy-subdir)))

  (defun d/ivy-partial-or-next ()
    "Complete the minibuffer text as much as possible.
If the text hasn't changed as a result, forward to `ivy-alt-done'."
    (interactive)
    (if (and (eq (ivy-state-collection ivy-last) #'read-file-name-internal)
             (or (and (equal ivy--directory "/")
                      (string-match "\\`[^/]+:.*\\'" ivy-text))
                 (string-match "\\`/" ivy-text)))
        (let ((default-directory ivy--directory)
              dir)
          (minibuffer-complete)
          (setq ivy-text (ivy--input))
          (when (setq dir (ivy-expand-file-if-directory ivy-text))
            (ivy--cd dir)))
      (or (ivy-partial)
          (when (or (eq this-command last-command)
                    (eq ivy--length 1))
            (let ((ivy-wrap t))
              (ivy-next-line)))))))
#+end_src
***** ivy-hydra
#+begin_src emacs-lisp
(use-package ivy-hydra
  :after ivy)
#+end_src
**** swiper
#+begin_src emacs-lisp
(use-package swiper
  :general
  (d/leader-keys
   "sm" 'swiper-multi
   "sS" 'swiper-all)
  :config (setq swiper-goto-start-of-match t))
#+end_src
**** counsel
#+begin_src emacs-lisp
(use-package counsel
  :general
  ("M-x" 'counsel-M-x
   "C-x C-f" 'counsel-find-file)
  (minibuffer-local-map
   "C-r" 'counsel-minibuffer-history)
  (d/leader-keys
   "SPC" 'counsel-M-x
   "aa"  'counsel-linux-app
   "ff"  'counsel-find-file
   "fF"  'find-file-other-window
   "fj"  'counsel-file-jump
   "fl"  'counsel-locate
   "hdF" 'counsel-describe-face
   "hdb" 'counsel-descbinds
   "hdf" 'counsel-describe-function
   "hdv" 'counsel-describe-variable
   "iu"  'counsel-unicode-char
   "sr"  'counsel-rg
   "ss"  'counsel-grep-or-swiper
   "y"   'counsel-yank-pop)
  :custom
  (counsel-find-file-ignore-regexp "\\`\\.")
  :config
  (when (eq system-type 'darwin)
    (setq counsel-locate-cmd 'counsel-locate-cmd-mdfind))

  (setq conusel-org-goto-display-style 'path
        counsel-org-goto-separator ": "
        counsel-org-goto-face-style 'org
        counsel-org-goto-display-todo t
        counsel-grep-base-command "rg -i -M 120 --no-heading --line-number --color never %s %s"
        counsel-yank-pop-separator "\n─────────────────────────\n"
        counsel-find-file-ignore-regexp (rx (or (group string-start (char ".#"))
                                                (group (char "~#") string-end)
                                                (group ".elc" string-end)
                                                (group ".pyc" string-end))))
  (counsel-mode 1)
  (defalias 'locate #'counsel-locate)

  (define-advice counsel-yank-pop-action (:override (s) d/paste-after)
    "Paste text after point, which is consistent with evil-paste-after.

Source: https://git.io/vQKmf"
    (save-excursion
      (undo-boundary)
      (unless (eq (point) (point-max))
        (forward-char))
      (with-ivy-window
        (delete-region ivy-completion-beg
                       ivy-completion-end)
        (insert (substring-no-properties s))
        (setq ivy-completion-end (point))))
    (forward-char (length s))))
#+end_src
*** [[http://orgmode.org/][org-mode]]
#+begin_quote
Org mode is for keeping notes, maintaining TODO lists, planning projects, and
authoring documents with a fast and effective plain-text system.
#+end_quote
But really, it's life.

**** Package
#+begin_src emacs-lisp
(use-package org
  :recipe (:host github
           :repo "emacsmirror/org"
           :files ("lisp/*.el" "contrib/lisp/*.el"))
  :general
  (nmap org-mode-map
    "<" 'org-metaleft
    ">" 'org-metaright
    "gj" 'org-next-visible-heading
    "gk" 'org-previous-visible-heading
    "gt" 'org-todo
    "ga" 'org-archive-subtree
    "M-l" 'org-metaright
    "M-h" 'org-metaleft
    "M-k" 'org-metaup
    "M-j" 'org-metadown
    "M-L" 'org-shiftmetaright
    "M-H" 'org-shiftmetaleft
    "M-K" 'org-shiftmetaup
    "M-J" 'org-shiftmetadown)
  (d/leader-keys
   "C"   'org-capture
   "bo"  'org-iswitchb
   "ao"  '(:ignore t :wk "org")
   "ao#" 'org-agenda-list-stuck-projects
   "ao/" 'org-occur-in-agenda-files
   "aoO" 'org-clock-out
   "aoa" 'org-agenda-list
   "aoe" 'org-store-agenda-views
   "aol" 'org-store-link
   "aom" 'org-store-tags-view
   "aoo" 'org-agenda
   "aos" 'org-search-view
   "aot" 'org-todo-list )
  :custom
  (org-list-allow-alphabetical t)
  :config
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines))
  (d/with-eval-after-load 'org-crypt
    (org-crypt-use-before-save-magic))
  (require 'org-mobile))
#+end_src
**** Defaults
***** Files
#+begin_src emacs-lisp
(d/with-eval-after-load 'org
  (setq org-agenda-text-search-extra-files '(agenda-archives)
        org-agenda-files '("~/Dropbox/org/todo.org" "~/Dropbox/org/gcal.org")
        org-default-notes-file "~/Dropbox/org/todo.org"
        d/notes-file "~Dropbox/org/notes.org"
        org-directory "~/Dropbox/org"
        org-archive-location "~/Dropbox/org/archive.org::"
        org-mobile-inbox-for-pull "~/Dropbox/org/mobile.org"
        org-export-async-init-file
        (locate-user-emacs-file "lisp/org-async-init.el")))
#+end_src
***** Todo/agenda
#+begin_src emacs-lisp
(d/with-eval-after-load 'org
  (setq org-enforce-todo-dependencies t
        org-enforce-todo-checkbox-dependencies t
        org-log-done 'time
        org-log-redeadline 'time
        org-log-reschedule 'time
        org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-hide-tags-regexp ".*"
        org-agenda-span 'week)

  (setq org-agenda-deadline-faces
        '((1.0 . org-warning)
          (0.5 . org-upcoming-deadline)
          (0.0 . '(:foreground "#A89984"))))

  (setq org-todo-keywords
        '((sequence "TODO(t)" "IN-PROGRESS(p)" "WAITING(w)" "|"
                    "DONE(d)" "CANCELED(c)")
          (sequence "READ(r)" "|"
                    "DONE(h)")))

  (setq org-capture-templates
        '(("t" "Todo")
          ("ts" "Todo: School")
          ("te" "Todo: Emacs" entry
           (file+olp org-default-notes-file "Emacs")
           "* TODO %?")
          ("n" "Note")
          ("g" "Google calendar" entry
           (file "~/Dropbox/org/gcal.org") "* %?\n\n%^T"))))
#+end_src
***** Behavior
#+begin_src emacs-lisp
(d/with-eval-after-load 'org
  (setq org-startup-indented t
        org-catch-invisible-edits 'error
        org-insert-heading-respect-content t
        org-src-window-setup 'current-window
        org-list-demote-modify-bullet '(("-" . "*") ("*" . "+"))
        org-export-in-background t
        org-confirm-babel-evaluate nil
        org-src-tab-acts-natively t
        org-M-RET-may-split-line nil
        org-list-use-circular-motion t
        org-log-into-drawer t
        org-imenu-depth 5
        org-goto-interface 'outline-path-completion
        org-outline-path-complete-in-steps nil
        org-link-search-must-match-exact-headline nil
        org-confirm-elisp-link-function 'y-or-n-p
        org-tags-exclude-from-inheritance '("crypt")
        org-crypt-key "diegoamundo@protonmail.com"
        org-confirm-elisp-link-not-regexp (rx "("
                                              (or "org-wiki-search"
                                                  "describe-function"
                                                  "describe-variable"
                                                  "find-library-other-window")
                                              (minimal-match (0+ nonl))
                                              ")"))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (emacs-lisp . t)
     (calc . t)
     ;; (ipython . t)
     (shell . t)
     (lisp . t)
     (C . t)
     (scheme . t)))
#+end_src
***** Appearance
#+begin_src emacs-lisp
;; appearance
(setq org-src-fontify-natively t
      org-src-preserve-indentation nil
      org-edit-src-content-indentation 0
      org-fontify-quote-and-verse-blocks t
      org-hide-emphasis-markers nil
      org-startup-with-inline-images t
      org-ellipsis " "
      org-highlight-latex-and-related '(latex)
      org-pretty-entities nil
      org-hide-leading-stars t
      org-fontify-done-headline t
      org-image-actual-width 500)

;; latex
(setq org-latex-listings t)
(add-to-list 'org-latex-packages-alist '("" "listings"))
(add-to-list 'org-latex-packages-alist '("" "color"))
(add-to-list 'org-latex-packages-alist '("" "tabularx")))
#+end_src
**** Variables
#+begin_src emacs-lisp
(defvar d/org-prettify-alist
  (prettify-utils-generate
   ("TODO" "❯❯❯")
   ("READ" "❙❙❙")
   ("IN-PROGRESS" "○○○")
   ("WAITING" "￭￭￭")
   ("CANCELED" "✗✗✗")
   ("DONE" "✓✓✓")))
#+end_src
**** Functions
#+begin_src emacs-lisp
(d/with-eval-after-load 'org
  (defmacro d/create-block-wrap (&rest blocktypes)
    `(progn
       ,@(cl-loop
          for type in blocktypes collect
          (let ((newfunc (intern
                          (concat "d/org-wrap-with-block-"
                                  (replace-regexp-in-string " " "-" type)))))
            `(defun ,newfunc ()
               (interactive)
               (backward-paragraph)
               (insert ,(format "\n#+begin_%s" type))
               (forward-paragraph)
               (insert ,(format "#+end_%s\n" (car (split-string type))))
               (backward-paragraph))))))

  (d/create-block-wrap
   "src"
   "src python"
   "src emacs-lisp"
   "export latex")

  (defmacro d/org-emphasize (&rest args)
    "Make functions for setting the emphasis in org mode"
    `(progn
       ,@(cl-loop for (name char) on args
                  by #'cddr collect
                  (let ((fname (intern (concat "d/org-" name))))
                    `(defun ,fname ()
                       (interactive)
                       (org-emphasize ,char))))))

  (d/org-emphasize
   "bold" ?*
   "italic" ?/
   "code" ?~
   "underline" ?_
   "verbatim" ?=
   "strike-through" ?+
   "clear" ?\s)

  (defun d/org-agenda-toggle-date (current-line)
    "Toggle `SCHEDULED' and `DEADLINE' tag in the capture buffer.

Source: https://git.io/vQK0I"
    (interactive "P")
    (save-excursion
      (let ((search-limit (if current-line
                              (line-end-position)
                            (point-max))))

        (if current-line (beginning-of-line)
          (goto-char (point-min)))
        (if (search-forward "DEADLINE:" search-limit t)
            (replace-match "SCHEDULED:")
          (and (search-forward "SCHEDULED:" search-limit t)
               (replace-match "DEADLINE:"))))))

  (defun d/org-insert-list-item-or-self (char)
    "If on column 0, insert space-padded CHAR; otherwise insert CHAR.

This has the effect of automatically creating a properly indented list
leader; like hyphen, asterisk, or plus sign; without having to use
list-specific key maps.

Source: https://git.io/vQK0s"
    (if (bolp)
        (insert (concat char " "))
      (insert char)))

  (defun d/org-swap-tags (tags)
    "Replace any tags on the current headline with TAGS.

The assumption is that TAGS will be a string conforming to Org Mode's
tag format specifications, or nil to remove all tags.

Source: https://git.io/vQKEE"
    (let ((old-tags (org-get-tags-string))
          (tags (if tags
                    (concat " " tags)
                  "")))
      (save-excursion
        (beginning-of-line)
        (re-search-forward
         (concat "[ \t]*" (regexp-quote old-tags) "[ \t]*$")
         (line-end-position) t)
        (replace-match tags)
        (org-set-tags t))))

  (defun d/org-set-tags (tag)
    "Add TAG if it is not in the list of tags, remove it otherwise.

TAG is chosen interactively from the global tags completion table.

Source: https://git.io/vQKEa"
    (interactive
     (list (let ((org-last-tags-completion-table
                  (if (derived-mode-p 'org-mode)
                      (org-uniquify
                       (delq nil (append (org-get-buffer-tags)
                                         (org-global-tags-completion-table))))
                    (org-global-tags-completion-table))))
             (completing-read
              "Tag: " 'org-tags-completion-function nil nil nil
              'org-tags-history))))
    (let* ((cur-list (org-get-tags))
           (new-tags (mapconcat 'identity
                                (if (member tag cur-list)
                                    (delete tag cur-list)
                                  (append cur-list (list tag)))
                                ":"))
           (new (if (> (length new-tags) 1) (concat " :" new-tags ":")
                  nil)))
      (d/org-swap-tags new)))

  (defun d/org-choose-bullet-type ()
    "Change the bullet type for org lists with a prompt."
    (interactive)
    (let ((char (read-char-choice
                 "Bullet type? (-|*|+|1|2|a|b|A|B): "
                 '(?* ?- ?+ ?1 ?2 ?a ?b ?A ?B))))
      (pcase char
        (?1 (org-cycle-list-bullet 3))
        (?2 (org-cycle-list-bullet 4))
        (?a (org-cycle-list-bullet 5))
        (?b (org-cycle-list-bullet 7))
        (?A (org-cycle-list-bullet 6))
        (?B (org-cycle-list-bullet 8))
        (_ (org-cycle-list-bullet (char-to-string char))))))

  (defun d/org-at-openable-item? ()
    (when (eq major-mode 'org-mode)
      (let* ((context (org-element-lineage
                       (org-element-context)
                       '(clock footnote-definition footnote-reference headline
                               inlinetask link timestamp)
                       t))
             (type (org-element-type context)))
        (memq type '(footnote-definition
                     footnote-reference
                     headline inlinetask
                     link
                     timestamp))))))
#+end_src
**** Bindings
#+begin_src emacs-lisp
(d/mode-leader-keys
 :keymaps 'org-mode-map
 "$"  'org-archive-subtree
 "'"  'org-edit-special
 "."  'org-time-stamp
 "/"  'org-sparse-tree
 ":"  'd/org-set-tags
 "-"  'org-decrypt-entry
 "A"  'org-archive-subtree
 "N"  'widen
 "P"  'org-set-property
 "R"  'org-refile
 "^"  'org-sort
 "a"  'org-agenda
 "c"  'org-capture
 "d"  'org-deadline
 "g"  'counsel-org-goto
 "G"  'counsel-org-goto-all
 "l"  'd/org-choose-bullet-type
 "n"  'org-narrow-to-subtree
 "s"  'org-schedule

 "i"  '(:ignore t :wk "insert")
 "ic" 'org-table-insert-column
 "ir" 'org-table-insert-row
 "il" 'org-insert-link
 "if" 'org-footnote-new
 "id" 'org-insert-drawer

 "e"  '(:ignore t :wk "eval/export")
 "ed" 'org-export-dispatch
 "eh" 'd/org-hugo-export
 "es" 'd/eval-surrounding-sexp
 "er" 'eval-region
 "eb" 'd/eval-buffer
 "ef" 'd/eval-defun

 "b"  'org-babel-tangle

 "x"  '(:ignore t :wk "text")
 "xb" 'd/org-bold
 "xi" 'd/org-italic
 "xc" 'd/org-code
 "xu" 'd/org-underline
 "xv" 'd/org-verbatim
 "xs" 'd/org-strike-through
 "xr" 'd/org-clear
 "xq" 'd/org-wrap-with-quote
 "xx" 'org-cut-special
 "xp" 'org-paste-special

 ;; tables
 "t"   '(:ignore t :wk "table")
 "ta"  'org-table-align
 "tb"  'org-table-blank-field
 "tc"  'org-table-convert
 "tdc" 'org-table-delete-column
 "tdr" 'org-table-kill-row
 "te"  'org-table-eval-formula
 "tE"  'org-table-export
 "th"  'org-table-previous-field
 "tH"  'org-table-move-column-left
 "tic" 'org-table-insert-column
 "tih" 'org-table-insert-hline
 "tiH" 'org-table-hline-and-move
 "tir" 'org-table-insert-row
 "tI"  'org-table-import
 "tj"  'org-table-next-row
 "tJ"  'org-table-move-row-down
 "tK"  'org-table-move-row-up
 "tl"  'org-table-next-field
 "tL"  'org-table-move-column-right
 "tn"  'org-table-create
 "tN"  'org-table-create-with-table.el
 "tr"  'org-table-recalculate
 "ts"  'org-table-sort-lines
 "ttf" 'org-table-toggle-formula-debugger
 "tto" 'org-table-toggle-coordinate-overlays
 "tw"  'org-table-wrap-region)

(d/with-eval-after-load 'org
  (d/mode-leader-keys
   :keymaps 'org-src-mode
   :definer 'minor-mode
   "'" 'org-edit-src-exit)

  (d/leader-keys
   :keymaps 'org-src-mode
   :definer 'minor-mode
   "fs" 'org-edit-src-save))
#+end_src
**** Setup
***** Agenda
#+begin_src emacs-lisp
(general-def org-agenda-mode-map
  "j" 'org-agenda-next-line
  "k" 'org-agenda-previous-line
  "n" 'org-agenda-next-date-line
  "p" 'org-agenda-previous-date-line
  "c" 'org-agenda-capture
  "R" 'org-revert-all-org-buffers
  "RET" 'org-agenda-switch-to)

(d/with-eval-after-load 'org-agenda
  (setq org-habit-graph-column 50))

(d/setup-hook org-agenda-mode
  (setq-local prettify-symbols-alist d/org-prettify-alist))
#+end_src
***** Capture
#+begin_src emacs-lisp
(imap org-capture-mode-mop
  "C-d" 'd/org-agenda-toggle-date)
(nmap org-capture-mode-map
  "C-d" 'd/org-agenda-toggle-date)
#+end_src
***** Org
#+begin_src emacs-lisp
(d/with-eval-after-load 'org
  (dolist (char '("+" "-"))
    (define-key org-mode-map (kbd char)
      `(lambda ()
         (interactive)
         (d/org-insert-list-item-or-self ,char))))

  (setq org-bullets-bullet-list '("•")))

(d/setup-hook org-mode
  (setq-local prettify-symbols-alist d/org-prettify-alist))
#+end_src
**** Export backends
***** [[https://github.com/kawabata/ox-pandoc][ox-pandoc]]
#+begin_quote
Another org-mode exporter via pandoc.
#+end_quote
Translates Org-mode file to various other formats via Pandoc. Pretty neat.
#+begin_src emacs-lisp
(use-package ox-pandoc
  :after ox
  :disabled
  :if (executable-find "pandoc")
  :config
  ;; default options for all output formats
  (setq org-pandoc-options '((standalone . t)
                             (latex-engine . xelatex)
                             (mathjax . t)
                             (parse-raw . t)))
  ;; cancel above settings only for 'docx' format
  (setq org-pandoc-options-for-docx '((standalone . nil))))
#+end_src
***** [[https://github.com/marsmining/ox-twbs][ox-twbs]]
#+begin_quote
Export org-mode docs as HTML compatible with Twitter Bootstrap.
#+end_quote
#+begin_src emacs-lisp
(use-package ox-twbs
  :after ox)
#+end_src
***** [[https://github.com/larstvei/ox-gfm][ox-gfm]]
#+begin_quote
Github Flavored Markdown Back-End for Org Export Engine
#+end_quote
#+begin_src emacs-lisp
(use-package ox-gfm
  :after ox)
#+end_src
***** [[https://github.com/kaushalmodi/ox-hugo][ox-hugo]]
#+begin_quote
A carefully crafted Org exporter back-end for Hugo
#+end_quote
#+begin_src emacs-lisp
(use-package ox-hugo
  :after ox)
#+end_src
**** Babel extras
***** [[https://github.com/gregsexton/ob-ipython][ob-ipython]]
#+begin_quote
org-babel integration with Jupyter for evaluation of (Python by default) code blocks
#+end_quote
#+begin_src emacs-lisp :tangle no
(use-package ob-ipython
  :after org)
#+end_src
**** Enhancements
***** [[https://github.com/snosov1/toc-org][toc-org]]
#+begin_quote
toc-org is an Emacs utility to have an up-to-date table of contents in the
  org files without exporting (useful primarily for readme files on GitHub)
#+end_quote
#+begin_src emacs-lisp
(use-package toc-org
  :after org
  :hook (org-mode . toc-org-enable))
#+end_src
***** [[https://github.com/myuhe/org-gcal.el][org-gcal]]
#+begin_quote
Org sync with Google Calendar
#+end_quote
#+begin_src emacs-lisp
(use-package org-gcal
  :commands org-gcal-sync
  :config
  (setq org-gcal-client-id (password-store-get "api/org-gcal-id")
        org-gcal-client-secret (password-store-get "api/org-gcal-secret")
        org-gcal-file-alist '(("diegoamundo@gmail.com" . "~/Dropbox/org/gcal.org"))))
#+end_src
** Bindings
*** Leader
#+begin_src emacs-lisp
(d/leader-keys
 "qf" 'delete-frame
 "qq" 'save-buffers-kill-emacs

 "t"   '(:def d/toggle/body :wk "toggle")

 "&"   'async-shell-command
 ":"   'eval-expression
 "r"   'repeat
 "u"   'universal-argument)
#+end_src
*** macOS fullscreen
A convenient full-screen binding I'm used to from iTerm.
#+begin_src emacs-lisp
(when (eq system-type 'darwin)
  (global-set-key (kbd "<s-return>") #'toggle-frame-fullscreen))
#+end_src
*** Macros
#+begin_src emacs-lisp
(general-define-key
 "<f11>" 'kmacro-start-macro-or-insert-counter
 "<f12>" 'kmacro-end-or-call-macro)
#+end_src
*** Minibuffer
I like to use ~C-/~ as Evil/Vim's ~C-[~ since I use a Dvorak keyboard, so I like to
also use these keys to quit out of the minibuffer.
#+begin_src emacs-lisp
(general-def
  (minibuffer-local-map
   minibuffer-local-ns-map
   minibuffer-local-completion-map
   minibuffer-local-must-match-map
   minibuffer-local-isearch-map)
  [?\C-/]  'minibuffer-keyboard-quit
  [?\C-_]  'minibuffer-keyboard-quit
  [escape] 'minibuffer-keyboard-quit)

#+end_src
*** Ret
#+begin_src emacs-lisp
(mmap "RET"
      (general-predicate-dispatch nil
        (thing-at-point 'url) 'goto-address-at-point
        (d/fbound-and-true? d/org-at-openable-item?) 'org-open-at-point
        (d/fbound-and-true? org-at-item-checkbox-p) 'org-toggle-checkbox
        (d/fbound-and-true? org-in-src-block-p) 'org-babel-execute-src-block))
#+end_src
*** universal argument
#+begin_src emacs-lisp
(general-def universal-argument-map
  "SPC u" 'universal-argument-more)
#+end_src
* Help
** Built-in
*** [[elisp:(find-library-other-window%20"man")][man]]
#+begin_quote
browse UNIX manual pages
#+end_quote
#+begin_src emacs-lisp
(use-package man
  :general
  (d/leader-keys
   "hm" 'man)
  :config
  (setq Man-notify-method 'aggressive))
#+end_src
*** [[elisp:(find-library-other-window "help")][help]]
#+begin_src emacs-lisp
(use-package help
  :ensure nil
  :general
  (nmap help-mode-map
    "SPC" nil))
#+end_src
** Packages
*** [[https://github.com/abo-abo/define-word][define-word]]
#+begin_quote
Display the definition of word at point in Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package define-word
  :general
  (d/leader-keys "sw" 'd/define-word)
  :config
  (defun d/define-word (&optional word)
    (interactive)
    (if word
        (define-word word)
      (let ((word (read-string
                   (concat "Define word ["
                           (if (region-active-p)
                               (buffer-substring (region-beginning) (region-end))
                             (thing-at-point 'word)) "]: ")
                   nil nil
                   (thing-at-point 'word))))
        (define-word word)))))
#+end_src
*** [[https://github.com/xuchunyang/devdocs.el][devdocs]]
#+begin_quote
Emacs package allowing you to easily search the DevDocs documentation
#+end_quote
#+begin_src emacs-lisp
(use-package devdocs
  :general
  (d/leader-keys "hdd"  'devdocs-search))
#+end_src
*** [[https://github.com/Malabarba/emacs-google-this][emacs-google-this]]
#+begin_quote
A set of emacs functions and bindings to google under point.
#+end_quote
#+begin_src emacs-lisp
(use-package google-this
  :general
  (d/leader-keys
   "sd" 'ddg-this-search
   "sg" 'google-this-search)
  :config
  (defun ddg-this-parse-and-search-string (text prefix &optional search-url)
    "Convert illegal characters in TEXT to their %XX versions, and then duckduckgo.
PREFIX determines quoting.

Don't call this function directly, it could change depending on
version. Use `ddg-this-string' instead."
    (let* (;; Create the url
           (query-string (google-this--maybe-wrap-in-quotes text prefix))
           ;; Perform the actual search.
           (browse-result (funcall google-this-browse-url-function
                                   (format (or search-url "https://duckduckgo.com/?q=%s")
                                           (url-hexify-string query-string)))))
      ;; Maybe suspend emacs.
      (when google-this-suspend-after-search (suspend-frame))
      ;; Return what browse-url returned (very usefull for tests).
      browse-result))

  (defun ddg-this-pick-term (prefix)
    "Decide what \"this\" and return it.
PREFIX determines quoting."
    (let* ((term (if (region-active-p)
                     (buffer-substring (region-beginning) (region-end))
                   (or (thing-at-point 'symbol)
                       (thing-at-point 'word)
                       (buffer-substring (line-beginning-position)
                                         (line-end-position)))))
           (term (read-string (concat "DuckDuckGo [" term "]: ") nil nil term)))
      term))

  (defun ddg-this-search (prefix &optional search-string)
    "Write and do a DuckDuckGo search.
Interactively PREFIX determines quoting.
Non-interactively SEARCH-STRING is the string to search."
    (interactive "P")
    (let* ((term (ddg-this-pick-term prefix)))
      (if (stringp term)
          (ddg-this-parse-and-search-string term prefix search-string)
        (message "[google-this-string] Empty query.")))))
#+end_src
*** [[https://github.com/atykhonov/google-translate][google-translate]]
#+begin_quote
Emacs interface to Google Translate
#+end_quote
#+begin_src emacs-lisp
(use-package google-translate)
#+end_src
*** [[https://github.com/Wilfred/helpful][helpful]]
#+begin_quote
A better Emacs *help* buffer
#+end_quote
#+begin_src emacs-lisp
(use-package helpful)
#+end_src
*** [[https://www.emacswiki.org/emacs/info+.el][info+]]
#+begin_quote
Extensions to info.el.
#+end_quote
#+begin_src emacs-lisp
(use-package info+)
#+end_src
*** [[https://github.com/vermiculus/sx.el/][sx]]
#+begin_quote
Stack Exchange for Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package sx)
#+end_src
*** [[https://github.com/kuanyui/tldr.el][tldr]]
#+begin_quote
tldr client for Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package tldr
  :general
  (d/leader-keys "ht" 'tldr)
  (nmap tldr-mode-map
    "q" 'quit-window))
#+end_src
** Bindings
Leader bindings
#+begin_src emacs-lisp
(d/leader-keys
 "hc"  '(:ignore t :wk "customize")
 "hca" 'customize-apropos
 "hcf" 'customize-face-other-window
 "hcg" 'customize-group-other-window
 "hcm" 'customize-mode
 "hcv" 'customize-variable-other-window
 "hdV" 'apropos-value
 "hdc" 'describe-char
 "hdk" 'describe-key
 "hdm" 'describe-mode
 "hdp" 'describe-package
 "hds" 'describe-symbol
 "hdt" 'describe-theme
 "hn"  'view-emacs-news
 "hs"  'system-name
 "hv"  'version)
#+end_src
* Files/Buffers
** Defaults
How to uniquify buffer names.
#+begin_src emacs-lisp
(setq uniquify-buffer-name-style 'forward)
#+end_src
If a frame is already open, use it to open files.
#+begin_src emacs-lisp
(setq ns-pop-up-frames nil)
#+end_src
Follow symlinks to files under version control because why would I not.
#+begin_src emacs-lisp
(setq vc-follow-symlinks t)
#+end_src
Select the help window when opening it (I like this so I can quickly ~q~ out).
#+begin_src emacs-lisp
(setq help-window-select t)
#+end_src
Clean up whitespace before saving files.
#+begin_src emacs-lisp
(add-hook 'before-save-hook #'whitespace-cleanup)
#+end_src
Backup
#+begin_src emacs-lisp
(setq version-control t
      delete-old-versions t)
#+end_src
Executable
#+begin_src emacs-lisp
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
#+end_src

** Built-in
*** [[elisp:(find-library-other-window%20"dired")][dired]]
#+begin_quote
directory-browsing commands
#+end_quote
#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :general
  (d/leader-keys
   "ad" 'd/dired-here)
  (d/leader-keys
   :keymaps 'wdired-mode-map
   "fs" 'wdired-finish-edit)
  (d/mode-leader-keys
   :keymaps 'dired-mode-map
   "h" 'dired-omit-mode)
  :init
  (d/setup-hook dired-mode
    (hl-line-mode 1)
    (dired-omit-mode))
  ;; (d/setup-hook dired-after-readin
  ;;   (dired-git-status))
  :config
  (nmap dired-mode-map
    "SPC" 'nil ; undo this from evil-dired, since this is my leader
    "~" 'd/dired-home
    "q" 'd/dired-quit
    ;; got used to this from ranger
    "h" 'dired-up-directory
    "l" 'dired-open-file
    ;; I like inverting these
    "r" 'dired-do-rename
    "R" 'dired-do-redisplay
    ;; evil-dired explicitly uses evil-search
    "n" 'evil-ex-search-next
    "N" 'evil-ex-search-previous)

  (setq dired-listing-switches "-lGXhA --group-directories-first"
        dired-dwim-target t
        dired-omit-files (rx string-start "." (1+ nonl) string-end)
        dired-clean-confirm-killing-deleted-buffers nil)

  (with-eval-after-load 'dired-async
    (dired-async-mode 1))


  (defun d/dired-quit ()
    (interactive)
    (while (eq major-mode 'dired-mode)
      (quit-window))
    (when (and d/dired-close-window
               (eq major-mode 'dired-mode))
      (delete-window))
    (setq d/dired-close-window nil))

  (defun d/dired-here (&optional arg)
    (interactive "P")
    (if arg
        (dired default-directory)
      (dired-other-window default-directory)))

  (defun d/dired-home ()
    (interactive)
    (dired "~/"))

  (defvar d/dired-close-window nil)

  (define-advice dired-other-window
      (:before (dirname &optional switches) other-window-exists)
    (if (= (length (window-list)) 1)
        (setq d/dired-close-window t)
      (setq d/dired-close-window nil))))
#+end_src
*** [[elisp:(find-library-other-window%20"ibuffer")][ibuffer]]
#+begin_quote
operate on buffers like dired
#+end_quote
#+begin_src emacs-lisp
(use-package ibuffer
  :general
  (ibuffer-mode-map
   "TAB" 'ibuffer-toggle-filter-group
   "<backtab>" 'ibuffer-toggle-filter-group)
  (ibuffer-mode-filter-group-map
   "J" 'ibuffer-forward-filter-group
   "K" 'ibuffer-backward-filter-group
   "RET" 'ibuffer-toggle-marks)
  :custom
  (ibuffer-saved-filter-groups
   '(("Default"
      ("Dired"
       (mode . dired-mode))
      ("ERC"
       (mode . erc-mode)))))
  :init
  (d/setup-hook ibuffer-mode
    (ibuffer-switch-to-saved-filter-groups "Default")))
#+end_src
*** [[elisp:(find-library-other-window%20"bookmark")][bookmark]]
#+begin_quote
set bookmarks, maybe annotate them, jump to them later
#+end_quote
#+begin_src emacs-lisp
(use-package bookmark
  :ensure nil
  :general
  (d/leader-keys "fB" 'bookmark-jump-other-window
                 "fb" 'bookmark-jump))
#+end_src
*** [[elisp:(find-library-other-window "ediff")][ediff]]
#+begin_src emacs-lisp
(use-package ediff
  :custom
  (ediff-window-setup-function 'ediff-setup-windows-plain)
  (ediff-split-window-function 'split-window-horizontally)
  (ediff-diff-options "-w"))
#+end_src
** Packages
*** [[https://github.com/lunaryorn/osx-trash.el][osx-trash]]
#+begin_quote
Make Emacs' delete-by-moving-to-trash do what you expect it to do on OS X.
#+end_quote
#+begin_src emacs-lisp
(use-package osx-trash
  :defer 5
  :if (eq system-type 'darwin)
  :config
  (osx-trash-setup)
  (setq delete-by-moving-to-trash t))
#+end_src
*** dired enhancements
**** [[https://github.com/Fuco1/dired-hacks][dired-hacks]]
#+begin_quote
Collection of useful dired additions
#+end_quote
***** dired-avfs
#+begin_src emacs-lisp
(use-package dired-avfs
  :disabled
  :after dired)
#+end_src
***** dired-open
#+begin_src emacs-lisp
(use-package dired-open
  :after dired)
#+end_src
***** dired-rainbow
#+begin_src emacs-lisp
(use-package dired-rainbow
  :after dired
  :config
  (dired-rainbow-define-chmod executable-unix "#B8BB26" "-[rw-]+x.*"))
#+end_src
***** dired-collpase
#+begin_src emacs-lisp
(use-package dired-collapse
  :hook (dired-mode . dired-collapse-mode)
  :after dired)
#+end_src
***** dired-subtree
#+begin_src emacs-lisp
(use-package dired-subtree
  :after dired
  :disabled
  :general
  (nmap dired-mode-map
    "TAB" 'dired-subtree-toggle))
#+end_src
**** dired-git
#+begin_src emacs-lisp
(use-package dired-git
  :ensure nil
  :disabled
  :after dired)
#+end_src
**** [[https://github.com/purcell/diredfl][diredfl]]
#+begin_quote
Extra Emacs font lock rules for a more colourful dired
#+end_quote
#+begin_src emacs-lisp
(use-package diredfl
  :after dired
  :hook (dired-mode . diredfl-mode)
  :custom
  (diredfl-ignore-compressed-flag nil))
#+end_src
**** [[https://github.com/emacsmirror/dired-du][dired-du]]
#+begin_quote
Dired with recursive directory sizes
#+end_quote
#+begin_src emacs-lisp
(use-package dired-du
  :recipe (:host github :repo "emacsmirror/dired-du")
  :config
  (setq dired-du-size-format t))
#+end_src
*** [[https://github.com/bbatsov/projectile][projectile]]
#+begin_quote
Project Interaction Library for Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package projectile
  :general
  (d/leader-keys
   "p"  '(:ignore t :wk "project")
   "pg" 'projectile-vc
   "pk" 'projectile-kill-buffers
   "po" 'projectile-multi-occur
   "pr" 'projectil-recentf)
  :config
  (defun d/maybe-ignore-project (root)
    (cond ((file-remote-p root)
           t)
          ((string-prefix-p (expand-file-name "~/dotfiles/emacs.d/straight") root)
           (let ((default-directory root))
             (not (string-match-p (regexp-quote "github.com/dieggsy")
                                  (shell-command-to-string "git config --get remote.origin.url")))))
          (t nil)))

  (setq projectile-globally-ignored-files '("TAGS" ".DS_Store")
        projectile-ignored-projects '("/usr/local" "/nix/store")
        projectile-ignored-project-function #'d/maybe-ignore-project
        projectile-completion-system 'ivy)
  (projectile-mode))
#+end_src

*** [[https://github.com/ericdanan/counsel-projectile][counsel-projectile]]
#+begin_quote
Ivy UI for Projectile
#+end_quote
#+begin_src emacs-lisp
(use-package counsel-projectile
  :general
  (d/leader-keys
   "pb" 'counsel-projectile-switch-to-buffer
   "pd" 'counsel-projectile-find-dir
   "pf" 'counsel-projectile-find-file
   "pp" 'counsel-projectile
   "ps" 'counsel-projectile-switch-project))
#+end_src
** Functions
*** File/Buffer Manipulation
#+begin_src emacs-lisp
(defun d/copy-file ()
  "Copy file to another location.

Source: https://git.io/vQKES"
  (interactive)
  (call-interactively #'write-file))

(defun d/safe-erase-buffer ()
  "Prompt before erasing buffer.
Source: https://git.io/vQKEd"
  (interactive)
  (if (y-or-n-p (format "Erase content of buffer %s ? " (current-buffer)))
      (progn
        (erase-buffer)
        (message "Buffer erased."))
    (message "erase-buffer cancelled")))

(defun d/download-file (&optional url name)
  "Download a file from url to specified path."
  (interactive)
  (let* ((file-url (or url (read-from-minibuffer "URL: ")))
         (file-name
          (or name
              (counsel-find-file
               (file-name-nondirectory file-url)))))
    (url-copy-file file-url file-name)))

(defun d/gpl-me ()
  (interactive)
  (d/download-file "https://www.gnu.org/licenses/gpl-3.0.md"
                   (concat default-directory "LICENSE.md")))
#+end_src
*** Switching
#+begin_src emacs-lisp
(defun d/switch-to-scratch ()
  "Switch to scratch buffer."
  (interactive)
  (switch-to-buffer "*scratch*"))

(defun d/switch-to-star ()
  "Switch to '*' buffers."
  (interactive)
  (let ((ivy-initial-inputs-alist '((ivy-switch-buffer . "^*"))))
    (ivy-switch-buffer)))

(defun d/switch-to-customize ()
  "Switch to \"Customize\" buffers."
  (interactive)
  (let ((ivy-initial-inputs-alist '((ivy-switch-buffer . "^*customize "))))
    (ivy-switch-buffer)))

(defun d/switch-to-messages ()
  "Switch to *Messages* buffer."
  (interactive)
  (switch-to-buffer "*Messages*"))
#+end_src
*** Narrowing
#+begin_src emacs-lisp
(defun d/narrow-and-set-normal ()
  "Narrow to the region and, if in a visual mode, set normal mode.

Source: https://git.io/vQKEx"
  (interactive)
  (narrow-to-region (region-beginning) (region-end))
  (if (string= evil-state "visual")
      (progn (evil-normal-state nil)
             (evil-goto-first-line))))

(defun d/narrow-to-region-or-subtree ()
  "Narrow to a region, if set, otherwise to an Org subtree, if present.

Source: https://git.io/vQKuf"
  (interactive)
  (if (and mark-active
           (not (= (region-beginning) (region-end))))
      (d/narrow-and-set-normal)
    (if (derived-mode-p 'org-mode)
        (org-narrow-to-subtree))))

(defun d/narrow-dwim ()
  "Narrow to a thing or widen based on context.
Attempts to follow the Do What I Mean philosophy.

Source: https://git.io/vQKuU"
  (interactive)
  (if (buffer-narrowed-p)
      (widen)
    (d/narrow-to-region-or-subtree)))
#+end_src
** Bindings
#+begin_src emacs-lisp
(d/leader-keys
 "b*" 'd/switch-to-star
 "bC" 'd/switch-to-customize
 "bK" 'kill-buffer
 "bM" 'd/switch-to-messages
 "br" 'revert-buffer
 "bR" 'rename-buffer
 "bS" 'd/switch-to-scratch
 "bc" 'clone-indirect-buffer-other-window
 "be" 'd/safe-erase-buffer
 "bi" 'ibuffer
 "bk" 'kill-this-buffer
 "bm" 'kill-matching-buffers
 "bq" 'kill-buffer-and-window
 "bv" 'view-mode

 "fc" 'd/copy-file
 "fs" 'save-buffer

 "nf" 'narrow-to-defun
 "nn" 'd/narrow-dwim
 "np" 'narrow-to-page
 "nr" 'narrow-to-region)
#+end_src
* Editing
** Defaults
Text-mode is nicer than fundamental-mode, or so I hear.
#+begin_src emacs-lisp
(setq-default major-mode 'text-mode)
#+end_src
Fill column default, and use auto-fill for text-mode (and derived modes, such
as org-mode, markdown, etc.).
#+begin_src emacs-lisp
(setq-default fill-column 79)
(add-hook 'text-mode-hook 'auto-fill-mode)
#+end_src
TeX input is /really/ useful for inputing special characters. Setting it as
default makes it quickly available with ~C-\~, or ~toggle-input-method~.

This way, when you need to input a greek letter or an em-dash or something,
type ~C-\~, use latex input, and see the automagic replacement happen in all its
glory.
#+begin_src emacs-lisp
(setq default-input-method "TeX")
#+end_src
Who uses double spaces between sentences?
#+begin_src emacs-lisp
(setq sentence-end-double-space nil)
#+end_src
Dear god I hate tabs. Also, four spaces is a good indentation default.
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil
              tab-width 4)
#+end_src
** Tools
*** Built-in
**** [[elisp:(find-library-other-window "paren")][paren]]
#+begin_quote
highlight matching paren
#+end_quote
#+begin_src emacs-lisp
(use-package paren
  :ensure nil
  :hook ((emacs-lisp-mode scheme-mode lisp-mode) . show-paren-mode))
#+end_src
**** [[elisp:(find-library-other-window "hippie-exp")][hippie-expand]]
#+begin_quote
expand text trying various ways to find its expansion
#+end_quote
#+begin_src emacs-lisp
(use-package hippie-exp
  :ensure nil
  :general
  ("M-/" #'hippie-expand))
#+end_src
*** Packages
**** [[https://github.com/abo-abo/auto-yasnippet][auto-yasnippet]]
#+begin_quote
quickly create disposable yasnippets
#+end_quote
#+begin_src emacs-lisp
(use-package auto-yasnippet)
#+end_src
**** [[https://github.com/company-mode/company-mode][company-mode]]
#+begin_quote
Modular in-buffer completion framework for Emacs
#+end_quote
Supposedly better than autocomplete.
#+begin_src emacs-lisp
(use-package company
  :defer 5
  :general
  (company-active-map
   [tab] 'company-complete-common-or-cycle)
  :custom
  (company-idle-delay 0.3)
  (company-minimum-prefix-length 1)
  (company-selection-wrap-around t)
  (company-dabbrev-char-regexp "\\sw\\|\\s_\\|[-_]")
  :config
  (defun company-mode/backend-with-yas (backend)
    "Source: https://git.io/vQKE6"
    (if (and (listp backend) (member 'company-yasnippet backend))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))
  (setq company-backends (mapcar #'company-mode/backend-with-yas
                                 company-backends))
  (global-company-mode t))
#+end_src
**** [[https://github.com/company-mode/company-statistics][company-statistics]]
#+begin_quote
Sort completion candidates by previous completion choices
#+end_quote
#+begin_src emacs-lisp
(use-package company-statistics
  :after company
  :config
  (company-statistics-mode))
#+end_src
**** [[https://github.com/gabesoft/evil-mc][evil-mc]]
#+begin_quote
Multiple cursors implementation for evil-mode
#+end_quote
#+begin_src emacs-lisp
(use-package evil-mc
  :general
  (nmap
    "gr"  '(:ignore t :wk "mc")
    "grm" 'evil-mc-make-all-cursors
    "gru" 'evil-mc-undo-all-cursors
    "grs" 'evil-mc-pause-cursors
    "grr" 'evil-mc-resume-cursors
    "grf" 'evil-mc-make-and-goto-first-cursor
    "grl" 'evil-mc-make-and-goto-last-cursor
    "grh" 'evil-mc-make-cursor-here
    "grj" 'evil-mc-make-cursor-move-next-line
    "grk" 'evil-mc-make-cursor-move-prev-line
    "grN" 'evil-mc-make-and-goto-next-cursor
    "grP" 'evil-mc-make-and-goto-prev-cursor
    "grn" 'evil-mc-make-and-goto-next-match
    "grp" 'evil-mc-make-and-goto-prev-match)
  :config
  (global-evil-mc-mode)
  (push 'evil-smartparens-mode evil-mc-incompatible-minor-modes)
  (push 'fci-mode evil-mc-incompatible-minor-modes))
#+end_src
**** [[https://github.com/hlissner/evil-multiedit][evil-multiedit]]
#+begin_quote
Multiple cursors for evil-mode, based on iedit
#+end_quote
#+begin_src emacs-lisp
(use-package evil-multiedit
  :config
  (evil-ex-define-cmd "ie[dit]" 'evil-multiedit-ex-match))
#+end_src
**** [[https://www.emacswiki.org/emacs/FlySpell][flyspell]]
#+begin_quote
On-the-fly spell checker
#+end_quote
#+begin_src emacs-lisp
(use-package flyspell
  :config
  (defun d/flyspell-correct-next ()
    (interactive "p")
    (flyspell-goto-next-error)
    (flyspell-auto-correct-word))

  (defun d/flyspell-add-to-dictionary ()
    "Add word at point to flyspell dictionary at `/Users/d/.ispell_english'.

Source: http://tinyurl.com/k8g9sex"
    (interactive)
    (let ((current-location (point))
          (word (flyspell-get-word)))
      (when (consp word)
        (flyspell-do-correct 'save
                             nil
                             (car word)
                             current-location
                             (cl-caddr word)
                             (cl-caddr word)
                             current-location)))))
#+end_src
**** [[https://github.com/d12frosted/flyspell-correct][flyspell-correct-ivy]]
#+begin_quote
Correcting words with flyspell via custom interface.
#+end_quote
#+begin_src emacs-lisp
(use-package flyspell-correct-ivy
  :defer 15)
#+end_src
**** [[https://github.com/syohex/emacs-fontawesome][fontawesome]]
#+begin_src emacs-lisp
(use-package fontawesome)
#+end_src
**** [[https://github.com/nflath/hungry-delete][hungry-delete]]
#+begin_src emacs-lisp
(use-package hungry-delete
  :defer 5
  :config
  (global-hungry-delete-mode))
#+end_src
**** [[https://github.com/abo-abo/lispy][lispy]]
#+begin_quote
short and sweet LISP editing
#+end_quote
#+begin_src emacs-lisp
(use-package lispy
  :defer 5
  :hook ((lispy-mode . d/lispy-fontify-headlines)
         ((emacs-lisp-mode lisp-mode scheme-mode) . lispy-mode))
  :general
  (lispy-mode-map-lispy
   [tab] (general-predicate-dispatch nil
           (save-excursion (beginning-of-line) (looking-at lispy-outline))
           'd/lispy-cycle))
  :config
  (defun d/lispy-cycle ()
    (interactive)
    (save-excursion (beginning-of-line) (lispy-tab)))

  (defun d/lispy-fontify-headlines ()
    (interactive)
    "Calculate heading regexps for font-lock mode."
    (let* ((heading-1-regexp ";;\\* \\(.*\\)")
           (heading-2-regexp ";;\\*\\* \\(.*\\)")
           (heading-3-regexp ";;\\*\\*\\* \\(.*\\)")
           (heading-4-regexp ";;\\*\\*\\*\\* \\(.*\\)")
           (heading-5-regexp ";;\\*\\*\\*\\*\\* \\(.*\\)")
           (heading-6-regexp ";;\\*\\*\\*\\*\\*\\* \\(.*\\)")
           (heading-7-regexp ";;\\*\\*\\*\\*\\*\\*\\* \\(.*\\)")
           (heading-8-regexp ";;\\*\\*\\*\\*\\*\\*\\*\\* \\(.*\\)"))
      (font-lock-add-keywords
       nil
       `((,heading-1-regexp 1 'org-level-1 t)
         (,heading-2-regexp 1 'org-level-2 t)
         (,heading-3-regexp 1 'org-level-3 t)
         (,heading-4-regexp 1 'org-level-4 t)
         (,heading-5-regexp 1 'org-level-5 t)
         (,heading-6-regexp 1 'org-level-6 t)
         (,heading-7-regexp 1 'org-level-7 t)
         (,heading-8-regexp 1 'org-level-8 t)))
      (if (fboundp #'font-lock-flush)
          (font-lock-flush)
        ;; Copied from Emacs 25 font-lock.el, changed to call
        ;; `jit-lock-refontify' directly
        (and font-lock-mode
             font-lock-fontified
             (jit-lock-refontify))))))
#+end_src
**** [[https://github.com/noctuid/lispyville][lispyville]]
#+begin_quote
lispy + evil = lispyville
#+end_quote
#+begin_src emacs-lisp
(use-package lispyville
  :hook (lispy-mode . lispyville-mode)
  :custom
  (lispyville-key-theme '(operators
                          c-w
                          escape
                          additional-movement
                          additional
                          slurp/barf-cp))
  :after lispy
  :config
  (lispy-define-key lispy-mode-map "v" #'lispyville-toggle-mark-type)
  (setq lispyville-barf-stay-with-closing t))
#+end_src
**** [[https://github.com/Fuco1/smartparens][smartparens]]
#+begin_quote
Minor mode for Emacs that deals with parens pairs and tries to be smart about
  it.
#+end_quote
#+begin_src emacs-lisp
(use-package smartparens
  :hook (((prog-mode conf-mode eval-expression-minibuffer-setup) . turn-on-smartparens-strict-mode)
         (eshell-mode . smartparens-mode)
         (eval-expression-minibuffer-setup . show-smartparens-mode))
  :custom
  (sp-ignore-modes-list
   '(scheme-mode
     emacs-lisp-mode
     lisp-mode
     erc-mode))
  :config
  (require 'smartparens-config)
  (smartparens-global-mode)
  (show-smartparens-global-mode)
  (let ((modes '(text-mode
                 org-mode
                 markdown-mode
                 minibuffer-inactive-mode
                 html-mode)))
    (sp-local-pair modes "'" nil :actions nil)
    (sp-local-pair modes "`" nil :actions nil)))
#+end_src
**** [[https://github.com/expez/evil-smartparens][evil-smartparens]]
#+begin_src emacs-lisp
(use-package evil-smartparens
  :after smartparens
  :hook (smartparens-enabled . evil-smartparens-mode))
#+end_src
**** [[https://www.emacswiki.org/emacs/UndoTree][undo-tree]]
#+begin_quote
Treat undo history as a tree
#+end_quote
Kind of makes undo like git.
#+begin_src emacs-lisp
(use-package undo-tree
  :hook (org-mode . undo-tree-mode)
  :general
  (d/leader-keys "au" 'undo-tree-visualize)
  :config
  (setq undo-tree-visualizer-timestamps t))
#+end_src
**** [[https://github.com/purcell/unfill][unfill]]
#+begin_quote
Functions providing the inverse of Emacs' fill-paragraph and fill-region
#+end_quote
#+begin_src emacs-lisp
(use-package unfill
  :general
  (d/leader-keys "xq" 'unfill-toggle)
  ([remap fill-paragraph] 'unfill-toggle))
#+end_src
**** [[https://github.com/joaotavora/yasnippet][yasnippet]]
#+begin_quote
A template system for Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package yasnippet
  :defer 5
  :general (d/leader-keys "iy" 'yas-insert-snippet)
  :config
  ;; (imap yas-minor-mode-map
  ;;   "SPC" yas-maybe-expand
  ;;   "S-SPC" (lambda () (interactive) (insert " ")))
  (setq yas-key-syntaxes (remove "w" yas-key-syntaxes))
  (yas-global-mode 1))
#+end_src
***** [[https://github.com/haskell/haskell-snippets][haskell-snippets]]
#+begin_src emacs-lisp
(use-package haskell-snippets)
#+end_src
*** Functions
**** Move text
#+begin_src emacs-lisp
(defun d/transpose-chars (arg)
  "Move character at point forward one character.
With prefix arg ARG, effect is to take character at point
and drag it forward past ARG other characters (backward if ARG negative)."
  (interactive "P")
  (forward-char)
  (if arg
      (transpose-chars arg)
    (transpose-chars 1))
  (backward-char))

(defun d/backward-transpose-chars (arg)
  "Move character at point backward one character.
With prefix arg ARG, effect is to take character at point
and drag it backward past ARG other characters (backward if ARG negative)."
  (interactive "P")
  (forward-char)
  (if arg
      (transpose-chars (- arg))
    (transpose-chars -1))
  (backward-char))

(defun d/backward-transpose-words (arg)
  "Interchange words around point, leaving point at end of them.
With prefix arg ARG, effect is to take word before or around point
and drag it forward past ARG other words (backward if ARG negative).
If ARG is zero, the words around or after point and around or after mark
are interchanged."
  (interactive "P")
  (if arg
      (transpose-words (- arg))
    (transpose-words -1)))

(defun d/move-line-or-region (arg)
  "Move line or region down one one line.
With prefix arg ARG, effect is to take line at point and
drag it down past ARG other lines (up if ARG negative)."
  (interactive "P")
  (if (or (not arg) (>= arg 0))
      (let ((reg-or-lin (if (region-active-p) "'>" "."))
            (reactivate-region (if (region-active-p) "gv=gv" ""))
            (num (if arg arg 1)))
        (execute-kbd-macro
         (concat ":m" reg-or-lin "+" (number-to-string num) (kbd "RET") reactivate-region)))
    (d/backward-move-line-or-region (- arg))))

(defun d/backward-move-line-or-region (arg)
  "Move line or region up one one line.
With prefix arg ARG, effect is to take line at point and
drag it up past ARG other lines (down if ARG negative)."
  (interactive "P")
  (if (or (not arg) (>= arg 0))
      (let ((reg-or-lin (if (region-active-p) "'<" "."))
            (reactivate-region (if (region-active-p) "gv=gv" ""))
            (num (if arg (+ arg 1) 2)))
        (execute-kbd-macro
         (concat ":m" reg-or-lin "-" (number-to-string num) (kbd "RET") reactivate-region)))
    (d/move-line-or-region (- arg))))

#+end_src
**** Align
#+begin_src emacs-lisp
(defun d/align-repeat (start end regexp &optional justify-right after)
  "Repeat alignment with respect to the given regular expression.

If JUSTIFY-RIGHT is non nil justify to the right instead of the
left. If AFTER is non-nil, add whitespace to the left instead of
the right.

Source: https://git.io/vQKul"
  (interactive "r\nsAlign regexp: ")
  (let* ((ws-regexp (if (string-empty-p regexp)
                        "\\(\\s-+\\)"
                      "\\(\\s-*\\)"))
         (complete-regexp (if after
                              (concat regexp ws-regexp)
                            (concat ws-regexp regexp)))
         (group (if justify-right -1 1)))
    (message "%S" complete-regexp)
    (align-regexp start end complete-regexp group 1 t)))

(defmacro d/create-align-repeat-x (&rest args)
  "Create an alignment function given name and alignment regexp.

Source: https://git.io/vQKu4"
  `(progn
     ,@(cl-loop
        for (name regexp justify-right default-after) on args
        by #'cddddr collect
        (let ((new-func (intern (concat "d/align-repeat-" name))))
          `(defun ,new-func (start end switch)
             (interactive "r\nP")
             (let ((after (not (eq (if switch t nil) (if ,default-after t nil)))))
               (d/align-repeat start end ,regexp ,justify-right after)))))))

(d/create-align-repeat-x
 "comma" "," nil t
 "semicolon" ";" nil t
 "colon" ":" nil t
 "equal" "=" nil nil
 "math-oper" "[+\\-*/]" nil nil
 "ampersand" "&" nil nil
 "bar" "|" nil nil
 "left-paren" "(" nil nil
 "right-paren" ")" t nil
 "backslash" "\\\\" nil nil
 "single-quote" "'" nil nil)

(defun d/align-repeat-decimal (start end)
  "Align a table of numbers on decimal points and dollar signs (both optional).

Source: https://git.io/vQKu2"
  (interactive "r")
  (require 'align)
  (align-region start end nil
                '((nil (regexp . "\\([\t ]*\\)\\$?\\([\t ]+[0-9]+\\)\\.?")
                       (repeat . t)
                       (group 1 2)
                       (spacing 1 1)
                       (justify nil t)))
                nil))


#+end_src
**** Justify
#+begin_src emacs-lisp
(defmacro d/create-justify-x (&rest types)
  "Create justification function(s), one per given TYPE."
  `(progn
     ,@(cl-loop
        for type in types collect
        (let ((func-name (intern (concat "d/justify-" type)))
              (current-type type))
          `(defun ,func-name ()
             (interactive)
             (if (region-active-p)
                 (set-justification (region-beginning)
                                    (region-end)
                                    (intern ,current-type))
               (set-justification (line-beginning-position)
                                  (line-end-position)
                                  (intern ,current-type))))))))

(d/create-justify-x
 "left"
 "right"
 "full"
 "center"
 "none")
#+end_src

**** Paragraph
#+begin_src emacs-lisp
(defun d/paragraphize ()
  "Remove newlines from region."
  (interactive)
  (if (region-active-p)
      (flush-lines "^$" (region-beginning) (region-end))
    (message "No region active.")))
#+end_src
**** Url
#+begin_src emacs-lisp
(defun d/shorten-url-at-point ()
  "Shorten the url at point using the github url shortener or the TinyURL api.

Source: http://tinyurl.com/l8z7vph"
  (interactive)
  (if (thing-at-point 'url)
      (let* ((long-url (thing-at-point 'url))
             (short-url
              (cond ((save-match-data
                       (string-match "https://\\(github.com\\|gist.github.com\\)" long-url))
                     (let ((info (shell-command-to-string
                                  (format "curl -i \"https://git.io\" -F \"url=%s\""
                                          long-url))))
                       (save-match-data
                         (and (string-match "Location: \\(.*?\\)" info)
                              (match-string 1 info)))))
                    (t
                     (shell-command-to-string
                      (format "curl -s \"http://tinyurl.com/api-create.php?url=%s\""
                              (url-hexify-string long-url))))))
             (bounds (bounds-of-thing-at-point 'url)))
        (kill-region (car bounds) (cdr bounds))
        (insert short-url))
    (error "No url at point.")))

(defun d/expand-url-at-point ()
  (interactive)
  (if (thing-at-point 'url)
      (let* ((short-url (thing-at-point 'url))
             (long-url (shell-command-to-string (format "curl -Ls -o /dev/null -w '%%{url_effective}' \"%s\""
                                                        short-url)))
             (bounds (bounds-of-thing-at-point 'url)))
        (kill-region (car bounds) (cdr bounds))
        (insert long-url))
    (error "No url at point.")))
#+end_src
*** Hydras
**** Multiedit
#+begin_src emacs-lisp
(d/with-eval-after-load 'hydra
  (defhydra d/multiedit (:hint nil)
    "
multiedit:
_r_estore  _t_oggle/restrict  match _a_ll
_n_ext     match and _N_ext
_p_rev     match and _P_rev
"
    ("a"   evil-multiedit-match-all)
    ("n"   evil-multiedit-next)
    ("p"   evil-multiedit-prev)
    ("r"   evil-multiedit-restore)
    ("t"   evil-multiedit-toggle-or-restrict-region)
    ("N"   evil-multiedit-match-and-next)
    ("P"   evil-multiedit-match-and-prev)
    ("q"   evil-multiedit-abort :exit t)))
#+end_src
**** Transpose
#+begin_src emacs-lisp
(d/with-eval-after-load 'hydra
  (defhydra d/transpose ()
    "transpose"
    ("c" d/transpose-chars "char")
    ("C" d/backward-transpose-chars "backward char")
    ("j" d/move-line-or-region "line/region")
    ("k" d/backward-move-line-or-region "backward line/region")
    ("w" transpose-words "word")
    ("W" d/backward-transpose-words "backward word")
    ("s" transpose-sexps "sexp" :exit t)))
#+end_src
**** Justify
#+begin_src emacs-lisp
(d/with-eval-after-load 'hydra
  (defhydra d/justify (:exit t)
    "justify"
    ("r" d/justify-right "right")
    ("l" d/justify-left "left")
    ("c" d/justify-center "center")
    ("f" d/justify-full "full")
    ("n" d/justify-none "none")))
#+end_src
**** Smartparens
#+begin_src emacs-lisp
(d/with-eval-after-load 'hydra
  (defhydra d/smartparens (:hint nil)
    "
smartparens:
_r_ewrap  _s_lurp
_u_nwrap  _S_lurp (back)
        _b_arf
        _B_arf (back)
"
    ("r"  sp-rewrap-sexp)
    ("u"  sp-unwrap-sexp)
    ("b"  sp-forward-barf-sexp)
    ("B"  sp-backward-barf-sexp)
    ("s"  sp-forward-slurp-sexp)
    ("S"  sp-backward-slurp-sexp)))
#+end_src
**** Evil-numbers
#+begin_src emacs-lisp
(d/with-eval-after-load 'hydra
  (defhydra d/numbers ()
    "evil-numbers"
    ("="  evil-numbers/inc-at-pt "inc")
    ("-" evil-numbers/dec-at-pt "dec")))
#+end_src
**** Spelling
#+begin_src emacs-lisp
(d/with-eval-after-load 'hydra
  (defhydra d/flyspell (:pre (require 'flyspell))
    "flyspell"
    ("b" flyspell-buffer "buffer")
    ("j" flyspell-goto-next-error "next")
    ("a" d/flyspell-add-to-dictionary "add to dict")
    ("n" flyspell-correct-next-word-generic "correct next generic")
    ("p" flyspell-correct-previous-word-generic "correct prev generic")
    ("N" d/flyspell-correct-next "correct next")
    ("P" flyspell-auto-correct-previous-word "correct pref")))
#+end_src
** Modes
*** [[https://github.com/Kitware/CMake][cmake-mode]]
#+begin_src emacs-lisp
(use-package cmake-mode)
#+end_src
*** conf-mode
#+begin_src emacs-lisp
(d/setup-hook conf-mode
  (d/setup-prog-mode))
(add-to-list 'auto-mode-alist '("\\.service\\'" . conf-mode))
#+end_src
*** [[http://elpa.gnu.org/packages/csv-mode.html][csv-mode]]
#+begin_quote
Major mode for editing comma/char separated values
#+end_quote
Eh, wanted to try a simpler way of editing csv files. (Excel and Numbers both
kinda suck at this, LibreOffice was slightly better.) Haven't used this much.
#+begin_src emacs-lisp
(use-package csv-mode
  :mode "\\.csv\\'"
  :config
  (add-hook 'csv-mode-hook #'csv-align-fields))
#+end_src
*** [[https://github.com/joshwnj/json-mode][json-mode]]
#+begin_quote
Major mode for editing JSON files with emacs
#+end_quote
#+begin_src emacs-lisp
(use-package json-mode
  :mode "\\.json\\'")
#+end_src
*** [[http://jblevins.org/projects/markdown-mode/][markdown-mode]]
#+begin_quote
Major mode for editing Markdown-formatted text
#+end_quote
Syntax highlighting for markdown files.
#+begin_src emacs-lisp
(use-package markdown-mode
  :mode "\\.md\\'"
  :config)
#+end_src
*** text-mode
#+begin_src emacs-lisp
(d/mode-leader-keys
 :keymap 'text-mode-map
 "f" '(:def d/flyspell/body :wk "flyspell"))
#+end_src
*** [[https://github.com/yoshiki/yaml-mode][yaml-mode]]
#+begin_quote
The emacs major mode for editing files in the YAML data serialization format.
#+end_quote
#+begin_src emacs-lisp
(use-package yaml-mode
  :mode "\\.yml\\'")
#+end_src
** Bindings
Make indent-rigidly more vimmy.
#+begin_src emacs-lisp
(general-def indent-rigidly-map
  "h" 'indent-rigidly-left
  "l" 'indent-rigidly-right
  "H" 'indent-rigidly-left-to-tab-stop
  "L" 'indent-rigidly-right-to-tab-stop)
#+end_src
Leader keys
#+begin_src emacs-lisp
(d/leader-keys
 "n-"  'd/numbers/evil-numbers/dec-at-pt
 "n="  'd/numbers/evil-numbers/inc-at-pt

 "x"   '(:ignore t :wk "text")
 "xa"  '(:ignore t :wk "align")
 "xa&" 'd/align-repeat-ampersand
 "xa'" 'd/align-repeat-single-quote
 "xa(" 'd/align-repeat-left-paren
 "xa)" 'd/align-repeat-right-paren
 "xa," 'd/align-repeat-comma
 "xa." 'd/align-repeat-decimal
 "xa:" 'd/align-repeat-colon
 "xa;" 'd/align-repeat-semicolon
 "xa=" 'd/align-repeat-equal
 "xaa" 'align
 "xac" 'align-current
 "xam" 'd/align-repeat-math-oper
 "xar" 'align-regexp
 "xar" 'd/align-repeat
 "xa|" 'd/align-repeat-bar

 "xib" 'indent-buffer
 "xii" 'indent-rigidly
 "xir" 'indent-region
 "xj"  '(:def d/justify/body :wk "justify")
 "xls" 'sort-lines
 "xt"  '(:def d/transpose/body :wk "transpose")
 "xc" 'count-words

 "xm"  '(:def d/multiedit/body :wk "multiedit")

 "xp"  '(:def d/smartparens/body :wk "smartparens")

 "xs"  'd/shorten-url-at-point
 "xe"  'd/expand-url-at-point

 "im"  'insert-kbd-macro)
#+end_src
* Navigation
** Defaults
*** Scrolling
Scroll one line at a time, and only scroll the current line when moving past
right boundary.
#+begin_src emacs-lisp
(setq scroll-step 1
      scroll-conservatively 10000
      auto-hscroll-mode 'current-line)
#+end_src
Smoother mouse scrolling, which is now irrelevant to me since I've disabled the
mouse in emacs.
#+begin_src emacs-lisp
(setq mouse-wheel-scroll-amount '(2 ((shift) . 1) ((control) . nil))
      mouse-wheel-progressive-speed nil)
#+end_src
** Functions
#+begin_src emacs-lisp
(defun d/toggle-window-split ()
  "Switch between vertical and horizontal window split.

Source: http://tinyurl.com/k7s96fa"
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
             (next-win-buffer (window-buffer (next-window)))
             (this-win-edges (window-edges (selected-window)))
             (next-win-edges (window-edges (next-window)))
             (this-win-2nd (not (and (<= (car this-win-edges)
                                         (car next-win-edges))
                                     (<= (cadr this-win-edges)
                                         (cadr next-win-edges)))))
             (splitter
              (if (= (car this-win-edges)
                     (car (window-edges (next-window))))
                  #'split-window-horizontally
                #'split-window-vertically)))
        (delete-other-windows)
        (let ((first-win (selected-window)))
          (funcall splitter)
          (if this-win-2nd (other-window 1))
          (set-window-buffer (selected-window) this-win-buffer)
          (set-window-buffer (next-window) next-win-buffer)
          (select-window first-win)
          (if this-win-2nd (other-window 1))))))

(defun d/split-vert-focus ()
  "Split window vertically and move focus to other window."
  (interactive)
  (split-window-right)
  (other-window 1))

(defun d/split-horz-focus ()
  "Split window horizontally and move focus to other window."
  (interactive)
  (split-window-below)
  (other-window 1))

(defun d/move-splitter-left (arg)
  "Move window splitter left.

Source: https://git.io/vQKuS"
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'right))
      (shrink-window-horizontally arg)
    (enlarge-window-horizontally arg)))

(defun d/move-splitter-right (arg)
  "Move window splitter right.

Source: https://git.io/vQKu7"
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'right))
      (enlarge-window-horizontally arg)
    (shrink-window-horizontally arg)))

(defun d/move-splitter-up (arg)
  "Move window splitter up.

Source: https://git.io/vQKu5"
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'up))
      (enlarge-window arg)
    (shrink-window arg)))

(defun d/move-splitter-down (arg)
  "Move window splitter down.

Source: https://git.io/vQKuF"
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'up))
      (shrink-window arg)
    (enlarge-window arg)))
#+end_src
** Built-in
*** [[elisp:(find-library-other-window%20"goto-addr")][goto-addr]]
#+begin_quote
click to browse URL or to send to e-mail address
#+end_quote
#+begin_src emacs-lisp
(use-package goto-addr
  :ensure nil
  :hook (((help-mode org-mode) . goto-address-mode)
         ((prog-mode conf-mode) . goto-address-prog-mode)))
#+end_src
*** [[elisp:(find-library-other-window%20"display-line-numbers")][display-line-numbers]]
#+begin_src emacs-lisp
(use-package display-line-numbers
  :if (version<= "26" emacs-version)
  :ensure nil
  :hook ((prog-mode conf-mode) . display-line-numbers-mode)
  :custom
  (display-line-numbers-type 'relative)
  (display-line-numbers-width-start t)
  (display-line-numbers-grow-only t)
  :config
  (defun d/toggle-rlines ()
    "Toggle relative line numbers."
    (interactive)
    (if (eq display-line-numbers 'relative)
        (setq display-line-numbers t)
      (setq display-line-numbers 'relative))))
#+end_src
** Packages
*** [[https://github.com/abo-abo/ace-window][ace-window]]
#+begin_quote
Quickly switch windows in Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package ace-window
  :general
  (d/leader-keys
   "\\" 'ace-window
   "wD" 'ace-delete-window
   "wS" 'ace-swap-window
   "wa" 'ace-window)
  :config
  (setq aw-keys (string-to-list "aoeuidhtns")))
#+end_src
*** [[https://github.com/abo-abo/avy][avy]]
#+begin_quote
Jump to things in Emacs tree-style
#+end_quote
#+begin_src emacs-lisp
(use-package avy
  :general
  (d/leader-keys
   "jc" 'avy-goto-char-2
   "jl" 'avy-goto-line
   "jw" 'avy-goto-word-1)
  :config
  (setq avy-keys (string-to-list "aoeuidhtns")))
#+end_src
*** [[https://github.com/jacktasia/dumb-jump][dumb-jump]]
#+begin_quote
an Emacs "jump to definition" package
#+end_quote
#+begin_src emacs-lisp
(use-package dumb-jump
  :general
  (d/leader-keys
   "jE" 'dumb-jump-go-prefer-external-other-window
   "jG" 'dumb-jump-go-other-window
   "jb" 'dumb-jump-back
   "je" 'dumb-jump-go-prefer-external
   "jg" 'dumb-jump-go)
  :config
  (setq dumb-jump-selector 'ivy
        dumb-jump-prefer-searcher 'rg))
#+end_src

*** [[https://github.com/wasamasa/eyebrowse][eyebrowse]]
#+begin_quote
A simple-minded way of managing window configs in emacs
#+end_quote
#+begin_src emacs-lisp
(use-package eyebrowse
  :general
  ("<f10>" 'eyebrowse-switch-to-window-config-0
   "<f1>" 'eyebrowse-switch-to-window-config-1
   "<f2>" 'eyebrowse-switch-to-window-config-2
   "<f3>" 'eyebrowse-switch-to-window-config-3
   "<f4>" 'eyebrowse-switch-to-window-config-4
   "<f5>" 'eyebrowse-switch-to-window-config-5
   "<f6>" 'eyebrowse-switch-to-window-config-6
   "<f7>" 'eyebrowse-switch-to-window-config-7
   "<f8>" 'eyebrowse-switch-to-window-config-8
   "<f9>" 'eyebrowse-switch-to-window-config-9)
  (d/leader-keys
   "e"  '(:ignore t :wk "eyebrowse")
   "es" 'eyebrowse-switch-to-window-config
   "el" 'eyebrowse-next-window-config
   "eh" 'eyebrowse-prev-window-config
   "er" 'eyebrowse-rename-window-config
   "ec" 'eyebrowse-close-window-config
   "e'" 'eyebrowse-last-window-config
   "e0" 'eyebrowse-switch-to-window-config-0
   "e1" 'eyebrowse-switch-to-window-config-1
   "e2" 'eyebrowse-switch-to-window-config-2
   "e3" 'eyebrowse-switch-to-window-config-3
   "e4" 'eyebrowse-switch-to-window-config-4
   "e5" 'eyebrowse-switch-to-window-config-5
   "e6" 'eyebrowse-switch-to-window-config-6
   "e7" 'eyebrowse-switch-to-window-config-7
   "e8" 'eyebrowse-switch-to-window-config-8
   "e9" 'eyebrowse-switch-to-window-config-9)
  :config
  (setq eyebrowse-wrap-around t
        eyebrowse-new-workspace t
        eyebrowse-switch-back-and-forth t)

  (eyebrowse-mode))
#+end_src
*** [[https://github.com/vspinu/imenu-anywhere][imenu-anywhere]]
#+begin_quote
ido/ivy/helm imenu tag selection across buffers with the same mode/project
etc
#+end_quote
imenu on steroids.
#+begin_src emacs-lisp
(use-package imenu-anywhere)
#+end_src
*** [[https://github.com/cyrus-and/zoom][zoom]]
#+begin_quote
Fixed and automatic balanced window layout for Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package zoom
  :config
  (setq zoom-size '(0.618 . 0.618)
        zoom-ignored-buffer-names '(" *which-key*"
                                    "*Calculator*"
                                    "*Calc Trail*")))
#+end_src
*** [[https://github.com/syohex/emacs-zoom-window][zoom-window]]
#+begin_src emacs-lisp
(use-package zoom-window
  :general
  (d/leader-keys
   "wz" 'zoom-window-zoom)
  :config
  (setq zoom-window-mode-line-color "#1D2021"))
#+end_src
** Hydras
#+begin_src emacs-lisp
(d/with-eval-after-load 'hydra
  (defhydra d/splitter ()
    "splitter"
    ("h" d/move-splitter-left "←")
    ("j" d/move-splitter-down "↓")
    ("k" d/move-splitter-up "↑")
    ("l" d/move-splitter-right "→" )
    ("=" balance-windows "balance")))
#+end_src
** Bindings
#+begin_src emacs-lisp
(d/leader-keys
 "jI" 'imenu-anywhere
 "jf" 'find-function-other-window
 "ji" 'imenu
 "jv" 'find-variable-other-window
 "jj" 'find-library-other-window

 "wd" 'delete-window
 "wf" 'make-frame
 "wh" 'd/split-horz-focus
 "wo" 'delete-other-windows
 "ws" 'd/splitter/body
 "wt" 'd/toggle-window-split
 "wv" 'd/split-vert-focus)
#+end_src
* Appearance
** Defaults
*** Startup
Get right to your files or the scratch buffer. No B.S.
#+begin_src emacs-lisp
(setq inhibit-startup-screen t
      inhibit-startup-echo-area-message t)
#+end_src
*** Time display
#+begin_src emacs-lisp :tangle no
(d/with-eval-after-load 'time
  (setq  display-time-24hr-format t
         display-time-default-load-average nil
         display-time-format "│ %Y-%d-%m %H:%M │"
         display-time-load-average nil))
#+end_src
*** Gui elements
Turn off gui elements that I never use. Gui emacs is great, but I still prefer
text-based interaction thank you very much.
#+begin_src emacs-lisp
(setq custom-raised-buttons nil
      use-dialog-box nil)
#+end_src
*** Buffer display
I don't want line-wrapping madness, just tell me there's more to see and I'll
have a look. Additionally, show whitespace.
#+begin_src emacs-lisp
(setq-default truncate-lines t)
(setq whitespace-style '(face trailing tabs))
(global-whitespace-mode)
(setq whitespace-global-modes '(not erc-mode ses-mode))
#+end_src
*** Font
Choose a font in order of preference, when available.
#+begin_src emacs-lisp
(when window-system
  (cond ((x-list-fonts "Iosevka Term")
         (add-to-list 'default-frame-alist '(font . "Iosevka Term-9.5:weight=book"))
         (set-face-attribute 'default t :font "Iosevka Term-9.5:weight=book"))
        ((x-list-fonts "Input")
         (add-to-list 'default-frame-alist '(font . "Input-10"))
         (set-face-attribute 'default t :font "Input-10"))
        ((x-list-fonts "Office Code Pro D")
         (add-to-list 'default-frame-alist '(font . "Office Code Pro D-11"))
         (set-face-attribute 'default t :font "Office Code Pro D-11"))
        ((x-list-fonts "Consolas")
         (add-to-list 'default-frame-alist '(font . "Consolas-11"))
         (set-face-attribute 'default t :font "Consolas-11"))
        ((x-list-fonts "Menlo")
         (add-to-list 'default-frame-alist '(font . "Menlo-11"))
         (set-face-attribute 'default t :font "Menlo-11"))))
#+end_src
And use [[http://fontawesome.io/][Font Awesome]] for the unicode glyphs it supports.
#+begin_src emacs-lisp
(when (and window-system (x-list-fonts "FontAwesome"))
  (set-fontset-font t 'unicode "FontAwesome" nil 'prepend))
#+end_src

:NOTES:
*Current:* Now I use [[https://be5invis.github.io/Iosevka/][Iosevka]], which is really great since it has all of the
wonderful customization abilities of Input, but is fully open source (and has
web variants!), sees active development, and the maintainer is incredibly
responsive. It /is/ quite narrow, but give it a chance - I wasn't able to go back
after a few weeks.

*2016-ish:* I'm using the wonderful [[http://input.fontbureau.com/][Input]] font. If, like me, you're
coming from something more like SauceCodePro, Consolas, or even just Menlo,
this font may at first seem a little "blocky," but it's so wonderfully
[[http://input.fontbureau.com/download/#customize][customizable]] that you should really give it a try. My current settings are:

 - Download a custom four-style family
| Regular     | Input Mono Light         |
| Italic      | Input Mono Light Italic  |
| Bold        | Input Mono Medium        |
| Bold Italic | Input Mono Medium Italic |
 - ~Source Code Pro style~
   * second option for ~a~ and ~g~
 - 1.4x Line spacing

*Note:* Check out [[http://mbauman.net/geek/2009/03/15/minor-truetype-font-editing-on-a-mac/][this post]] for advice on fixing the Consolas font on macOS. This
helps with the modeline text vertical alignments and makes it consistent with
other fonts. Post last updated in 2011, last successfully tested in 09/2016 (by
myself).
:END:
*** Minibuffer
Use a bar cursor in the minibuffer.
#+begin_src emacs-lisp
(add-hook 'minibuffer-setup-hook
          (lambda () (setq-local cursor-type '(bar . 1))))
#+end_src
*** Margin
#+begin_src emacs-lisp
(setq-default left-margin-width 1)
(setq-default right-margin-width 1)
#+end_src
*** Themes
#+begin_src emacs-lisp
(setq custom-safe-themes t)
#+end_src
** Packages
*** [[https://github.com/larstvei/Focus][focus]]
#+begin_quote
Dim the font color of text in surrounding paragraphs
#+end_quote
#+begin_src emacs-lisp
(use-package focus
  :custom
  (focus-mode-to-thing
   '((prog-mode . defun)
     (text-mode . sentence)
     (org-mode . paragraph)))
  :config
  (define-advice focus-get-thing (:override () d/fix)
    (or focus-current-thing
        (let* ((modes (mapcar 'car focus-mode-to-thing))
               (mode  (or (cl-find major-mode modes)
                          (focus-any 'derived-mode-p modes))))
          (if mode (cdr (assoc mode focus-mode-to-thing)) 'sentence)))))
#+end_src
*** [[http://git.savannah.gnu.org/cgit/emacs/elpa.git/tree/packages/rainbow-mode/rainbow-mode.el][rainbow-mode]]
#+begin_quote
Colorize color names in buffers
#+end_quote
#+begin_src emacs-lisp
(use-package rainbow-mode
  :hook help-mode
  :config
  (setq rainbow-x-colors-major-mode-list '(c-mode c++-mode java-mode)))
#+end_src
*** [[https://github.com/dieggsy/emacs-theme-darktooth][darktooth-theme]]
#+begin_quote
An Emacs 24 theme remixed from gruvbox
#+end_quote
(my fork)
#+begin_src emacs-lisp
(use-package darktooth-theme
  :demand t
  :recipe (:host github
           :repo "dieggsy/emacs-theme-darktooth"
           :upstream (:host github
                      :repo "emacsfodder/emacs-theme-darktooth")))
#+end_src
*** [[https://github.com/jordonbiondo/column-enforce-mode][column-enforce-mode]]
#+begin_quote
Highlight text that extends beyond a certain column.
#+end_quote
#+begin_src emacs-lisp
(use-package column-enforce-mode
  :hook (prog-mode conf-mode)
  :custom
  (column-enforce-column 79))
#+end_src
*** [[https://github.com/dieggsy/eterm-256color][eterm-256color]]
#+begin_quote
Customizable 256 colors for emacs term and ansi-term
#+end_quote
#+begin_src emacs-lisp
(use-package eterm-256color
  :recipe (:host github
           :repo "dieggsy/eterm-256color"
           :files ("eterm-256color.el" "eterm-256color.ti"))
  :hook (term-mode . eterm-256color-mode))
#+end_src
*** [[https://github.com/ankurdave/color-identifiers-mode][color-identifiers]]
#+begin_quote
Emacs minor mode to highlight each source code identifier uniquely based on its name
#+end_quote
#+begin_src emacs-lisp
(use-package color-identifiers-mode)
#+end_src
*** [[https://github.com/Fanael/highlight-numbers][highlight-numbers]]
#+begin_quote
Highlight numbers in source code
#+end_quote
Neat-o
#+begin_src emacs-lisp
(use-package highlight-numbers
  :hook (((prog-mode conf-mode) . highlight-numbers-mode)
         (json-mode . highlight-numbers--turn-off)))
#+end_src
*** [[https://github.com/tsdh/highlight-parentheses.el][highlight-parentheses]]
#+begin_quote
Emacs: highlight surrounding parentheses
#+end_quote
#+begin_src emacs-lisp
(use-package highlight-parentheses
  :hook ((prog-mode conf-mode) . highlight-parentheses-mode))
#+end_src
*** [[https://github.com/milkypostman/powerline][powerline]]
#+begin_src emacs-lisp
(use-package powerline)
#+end_src
*** [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]
Better parentheses coloring
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook ((prog-mode conf-mode) . rainbow-delimiters-mode))
#+end_src
*** [[https://github.com/atomontage/xterm-color][xterm-color]]
#+begin_quote
ANSI & xterm-256 color text property translator for Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package xterm-color
  :commands xterm-color-filter
  :hook ((eshell-mode . d/xterm-color-preserve-color-properties))
  :config
  (defun d/xterm-color-preserve-color-properties ()
    (setq xterm-color-preserve-properties t)))
#+end_src
** Hydras
#+begin_src emacs-lisp
(d/with-eval-after-load 'hydra
  (defhydra d/zoom ()
    "zoom"
    ("=" text-scale-increase "in")
    ("-" text-scale-decrease "out")
    ("0" (text-scale-adjust 0) "reset")))
#+end_src
** Bindings
#+begin_src emacs-lisp
(d/leader-keys
 "z" '(:def d/zoom/body :wk "zoom"))
#+end_src
** Mode line
*** Helpers
#+begin_src emacs-lisp
(defun d/flycheck-lighter (state)
  "Return flycheck information for the given error type STATE.

Source: https://git.io/vQKzv"
  (let* ((counts (flycheck-count-errors flycheck-current-errors))
         (errorp (flycheck-has-current-errors-p state))
         (err (or (cdr (assq state counts)) "?"))
         (running (eq 'running flycheck-last-status-change)))
    (if (or errorp running) (format "•%s" err))))

(defmacro d/with-window-status (&rest body)
  (declare (indent defun))
  `(let ((window-active? (powerline-selected-window-active)))
     (cl-flet ((propertize-active
                (&rest arguments)
                (let ((str (car arguments)))
                  (cond  ((and window-active? (stringp str))
                          (apply #'propertize arguments) )
                         ((stringp str)
                          (car arguments))))))
       ,@body)))

(defmacro d/with-evil-tag-color (&rest body)
  (declare (indent defun))
  `(let ((evil-tag-color
          (pcase (substring-no-properties
                  evil-mode-line-tag)
            (" N " "#B8BB26")
            (" I " "#66999D")
            (" M " "#D3869B")
            (" V " "#FE8019")
            (" E " "#FABD2F" )
            (" R " "#FE8019")
            (" O " "#B8BB26"))))
     ,@body))

(defun d/make-xpm (color height width)
  "Create an XPM bitmap.

Source: https://git.io/vQKzL"
  (propertize
   " " 'display
   (let ((data (make-list height (make-list width 1)))
         (color (or color "None")))
     (create-image
      (concat
       (format "/* XPM */\nstatic char * percent[] = {\n\"%i %i 2 1\",\n\". c %s\",\n\"  c %s\","
               (length (car data))
               (length data)
               color
               color)
       (apply #'concat
              (cl-loop with idx = 0
                       with len = (length data)
                       for dl in data
                       do (cl-incf idx)
                       collect
                       (concat "\""
                               (cl-loop for d in dl
                                        if (= d 0) collect (string-to-char " ")
                                        else collect (string-to-char "."))
                               (if (eq idx len) "\"};" "\",\n")))))
      'xpm t :ascent 'center))))

(defun d/eyebrowse-relevant? ()
  (and (featurep 'eyebrowse)
       (< 1 (length (eyebrowse--get 'window-configs)))))

(defun d/in-macro? ()
  (or defining-kbd-macro executing-kbd-macro))

(defun d/in-evil-substitution? ()
  (or (assq 'evil-ex-substitute evil-ex-active-highlights-alist)
      (assq 'evil-ex-global-match evil-ex-active-highlights-alist)
      (assq 'evil-ex-buffer-match evil-ex-active-highlights-alist)))

(defun d/evil-substitute-num-matches ()
  "Return the number of matches for the current evil substitution.

Source: https://git.io/vQKzq"
  (let ((range (if evil-ex-range
                   (cons (car evil-ex-range) (cadr evil-ex-range))
                 (cons (line-beginning-position) (line-end-position))))
        (pattern (car-safe (evil-delimited-arguments evil-ex-argument 2))))
    (if pattern
        (format "%s matches" (how-many pattern (car range) (cdr range)))
      " ... ")))
#+end_src
*** Mode-line
#+begin_src emacs-lisp
(defvar d/mode-line
  '((:eval
     (d/with-evil-tag-color
       (d/with-window-status
         (cond ((and window-active?
                     (not (or ;; (featurep 'exwm)
                           (d/eyebrowse-relevant?)
                           (bound-and-true-p anzu--state)
                           (d/in-macro?)
                           (d/in-evil-substitution?))))
                (d/make-xpm evil-tag-color 56 8))
               ((not window-active?)
                (d/make-xpm "#1D2021" 56 8))))))
    (:eval
     (d/with-window-status
       (d/with-evil-tag-color
         (when window-active?
           (propertize-active
            (cond ((d/in-evil-substitution?)
                   (d/evil-substitute-num-matches))
                  ((d/in-macro?)
                   (if (bound-and-true-p evil-this-macro)
                       (char-to-string evil-this-macro)
                     "Macro"))
                  ((bound-and-true-p anzu--state)
                   (anzu--update-mode-line))
                  ;; ((featurep 'exwm)
                  ;;  (number-to-string (1+ exwm-workspace-current-index)))
                  ((d/eyebrowse-relevant?)
                   (let* ((num (eyebrowse--get 'current-slot))
                          (tag (nth 2 (assoc num (eyebrowse--get 'window-configs)))))
                     (if (and tag (< 0 (length tag)))
                         tag
                       (int-to-string num)))))
            'face
            `(:foreground
              "#3E3D31"
              :weight bold
              :background ,evil-tag-color
              :box (:color ,evil-tag-color :line-width 14)))))))
    ;; File modified
    " %* "
    ;; Buffer name & recursive editing
    "%[" mode-line-buffer-identification "%] "
    ;; Remote
    (:eval (d/with-window-status
             (let ((host (file-remote-p default-directory 'host)))
               (propertize-active
                (cond ((and host
                            default-directory
                            (string= host (system-name)))
                       (concat "@"
                               (file-remote-p default-directory 'user)
                               " "))
                      ((and host default-directory)
                       (concat "@" host " ")))
                'face
                '(:foreground "#D3869B")))))
    ;; Line/column number
    (:eval (d/with-window-status
             (unless (eq major-mode 'exwm-mode)
               (propertize-active "%4l:%2c  "
                                  'face '(:foreground "#A89984")))))
    ;; Major mode
    (:eval
     (d/with-window-status
       (propertize-active
        (concat (format-mode-line mode-name) "  ")
        'face '(:foreground "#83A598" :weight bold))))
    ;; Version control
    (:eval
     (d/with-window-status
       (when vc-mode
         (propertize-active
          (concat (replace-regexp-in-string "^ Git." " " vc-mode) "  ")
          'face '(:foreground "#FE8019" )))))
    ;; Flycheck
    (:eval
     (d/with-window-status
       (when (and (bound-and-true-p flycheck-mode)
                  (or flycheck-current-errors
                      (eq 'running flycheck-last-status-change)))
         (concat
          (cl-loop for state in '((error . "#FB4933")
                                  (warning . "#FABD2F")
                                  (info . "#83A598"))
                   as lighter = (d/flycheck-lighter (car state))
                   when lighter
                   concat (propertize-active
                           lighter
                           'face `(:foreground ,(cdr state))))
          " "))))
    ;; Input method
    (:eval
     (d/with-window-status
       (when (or current-input-method
                 (and (bound-and-true-p evil-mode)
                      (bound-and-true-p evil-input-method)))
         (cond
          (current-input-method
           (propertize-active
            (concat current-input-method-title " ")
            'face
            'bold))
          ((and (featurep 'evil) (bound-and-true-p evil-input-method))
           (concat (nth 3 (assoc default-input-method input-method-alist))
                   " "))))))
    erc-modified-channels-object))

(setq-default mode-line-format d/mode-line)
(with-current-buffer "*Messages*"
  (setq-local mode-line-format d/mode-line))
#+end_src
* Dev
** Prog
*** Packages
**** [[https://github.com/Malabarba/aggressive-indent-mode/][aggressive-indent]]
#+begin_quote
Emacs minor mode that keeps your code always indented. More reliable than electric-indent-mode.
#+end_quote
#+begin_src emacs-lisp
(use-package aggressive-indent
  :hook ((lisp-mode emacs-lisp-mode c-mode scheme-mode) . aggressive-indent-mode))
#+end_src
**** [[https://github.com/flycheck/flycheck][flycheck]]
#+begin_quote
On the fly syntax checking for GNU Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package flycheck
  :hook (python-mode . flycheck-mode)
  :config
  (setq flycheck-completing-read-function 'ivy-completing-read)
  (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
    (vector #b00000000
            #b10000000
            #b11000000
            #b11100000
            #b11110000
            #b11111000
            #b11111100
            #b11111110
            #b11111111
            #b11111110
            #b11111100
            #b11111000
            #b11110000
            #b11100000
            #b11000000
            #b10000000
            #b00000000)))
#+end_src
*** Hydras
#+begin_src emacs-lisp
(d/with-eval-after-load 'hydra
  (defhydra d/flycheck
    (:pre (progn
            (flycheck-mode 1)
            (setq hydra-lv t)
            (flycheck-list-errors))
     :post (progn
             (setq hydra-lv nil)
             (quit-windows-on "*Flycheck errors*"))
     :hint nil)
    "Errors"
    ("f"  flycheck-error-list-set-filter                            "Filter")
    ("j"  flycheck-next-error                                       "Next")
    ("k"  flycheck-previous-error                                   "Previous")
    ("gg" flycheck-first-error                                      "First")
    ("G"  (progn (goto-char (point-max)) (flycheck-previous-error)) "Last")
    ("q"  nil)))
#+end_src
*** Bindings
#+begin_src emacs-lisp
(d/mode-leader-keys
 :keymaps 'prog-mode-map
 "f" '(:def d/flycheck/body :wk "flycheck"))
#+end_src
*** Setup
#+begin_src emacs-lisp
(d/setup-hook prog-mode
  (subword-mode)
  (auto-fill-mode 1)
  (setq-local comment-auto-fill-only-comments t)
  (hl-line-mode 1))
#+end_src
** Lang
*** Python
**** Packages
***** [[https://github.com/proofit404/anaconda-mode][anaconda-mode]]
#+begin_quote
Code navigation, documentation lookup and completion for Python.
#+end_quote
#+begin_src emacs-lisp
(use-package anaconda-mode
  :hook (python-mode
         (python-mode . anaconda-eldoc-mode)))
#+end_src
***** [[https://github.com/proofit404/company-anaconda][company-anaconda]]
#+begin_quote
Anaconda backend for company-mode.
#+end_quote
#+begin_src emacs-lisp
(use-package company-anaconda
  :after company)
#+end_src
***** [[https://github.com/millejoh/emacs-ipython-notebook][EIN]]
#+begin_quote
Jupyter and IPython 2.x/3.x notebook client in Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package ein)
#+end_src
***** [[https://github.com/proofit404/pyenv-mode][pyenv-mode]]
#+begin_quote
Integrate pyenv with python-mode.
#+end_quote
#+begin_src emacs-lisp
(use-package pyenv-mode
  :config
  (pyenv-mode))
#+end_src
***** [[https://github.com/ssbb/pyenv-mode-auto][pyenv-mode-auto]]
#+begin_quote
Automatically activates pyenv version within Emacs if .python-version file exists.
#+end_quote
#+begin_src emacs-lisp
(use-package pyenv-mode-auto
  :after pyenv-mode)
#+end_src

***** [[https://github.com/naiquevin/sphinx-doc.el][sphinx-doc]]
#+begin_quote
Generate Sphinx friendly docstrings for Python functions in Emacs
#+end_quote
Pretty neat, though not entirely complete, IMO.
#+begin_src emacs-lisp
(use-package sphinx-doc)
#+end_src

***** [[https://github.com/JorisE/yapfify][yapfify]]
#+begin_quote
Yapf for Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package yapfify)
#+end_src
**** Variables
#+begin_src emacs-lisp
(defvar d/python-prettify-alist
  '(("<=" . "≤")
    (">=" . "≥")
    ("!=" . "≠")
    ("is" . "≡")
    ("=" . "←")
    ("==" . "≣")
    ("not" . "¬")
    ("is not" . "≢")
    ("sum" . "∑")
    ("sqrt" . "√")
    ("pi" . "π")
    ("lambda" . "λ")
    ("and" . "⋏")
    ("or" . "⋎")
    ("self" . "↻")
    ("in" . "∈")
    ("def" . "ƒ")
    ("not in" . "∉")
    ("return" . "→")
    ("yield" . "⊢")
    ("None" . "∅")
    ("*" . "·")
    ("inf" . "∞")
    ("all" . "∀")
    ("^" . "⊻")
    ("**" . "^")))
#+end_src
**** Functions
#+begin_src emacs-lisp
(defun d/ipython-shell ()
  "Open an ipython shell using multi-term, respecting virtualenv."
  (interactive)
  (let ((sane-term-shell-command "ipython"))
    (sane-term-create)))
#+end_src
**** Setup
#+begin_src emacs-lisp
(d/setup-hook python-mode
  (set (make-local-variable 'comment-inline-offset) 2)
  (require 'company)
  (add-to-list 'company-backends
               (company-mode/backend-with-yas 'company-anaconda))
  (setq-local prettify-symbols-alist d/python-prettify-alist))
#+end_src
*** Lisps
**** Packages
***** [[https://github.com/slime/slime][slime]]
#+begin_quote
The Superior Lisp Interaction Mode for Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package slime
  :general
  (imap slime-repl-mode-map
    [up] 'slime-repl-previous-input
    [down] 'slime-repl-next-input)
  :config
  (setq inferior-lisp-program "/usr/local/bin/sbcl")
  (setq slime-contribs '(slime-fancy slime-company)))
#+end_src
***** [[https://github.com/anwyn/slime-company][slime-company]]
#+begin_src emacs-lisp
(use-package slime-company
  :after slime)
#+end_src
***** [[https://github.com/tkf/emacs-request][request]]
#+begin_quote
Easy HTTP request for Emacs Lisp
#+end_quote
#+begin_src emacs-lisp
(use-package request)

(use-package request-deferred)
#+end_src
***** [[https://github.com/magnars/s.el][s]]
#+begin_quote
The long lost Emacs string manipulation library.
#+end_quote
#+begin_src emacs-lisp
(use-package s)
#+end_src

***** [[https://github.com/magnars/dash.el][dash]]
#+begin_quote
A modern list library for Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package dash)
#+end_src
***** [[https://github.com/rejeep/f.el][f]]
#+begin_quote
Modern API for working with files and directories in Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package f)
#+end_src
***** [[https://github.com/purcell/flycheck-package][flycheck-package]]
#+begin_quote
Flycheck checker for elisp package metadata
#+end_quote
#+begin_src emacs-lisp
(use-package flycheck-package
  :after flycheck
  :config
  (flycheck-package-setup))
#+end_src
***** [[https://github.com/Wilfred/suggest.el][suggest]]
#+begin_quote
discover elisp functions that do what you want
#+end_quote
#+begin_src emacs-lisp
(use-package suggest)
#+end_src
***** [[https://github.com/dieggsy/difflib.el][difflib.el]]
#+begin_quote
Port of python's difflib to emacs-lisp
#+end_quote
#+begin_src emacs-lisp
(use-package difflib
  :recipe (:host github
           :repo "dieggsy/difflib.el"))
#+end_src
***** [[https://github.com/joddie/macrostep][macrostep]]
#+begin_quote
interactive macro-expander
#+end_quote
#+begin_src emacs-lisp
(use-package macrostep
  :general
  (d/mode-leader-keys
   :keymaps 'emacs-lisp-mode-map
   "m" 'macrostep-expand))
#+end_src
**** Variables
#+begin_src emacs-lisp
(defvar d/lisp-prettify-alist
  (prettify-utils-generate
   ("<=" "≤")
   (">=" "≥")
   ("/=" "≠")
   ("eq" "≡")
   ("equal" "≣")
   ("sqrt" "√")
   ("float-pi" "π")
   ("lambda" "λ")
   ("and" "⋏")
   ("or" "⋎")
   ("defun" "ƒ")
   ("defmacro" "ƒₘ")
   ("not" "¬")
   ("nil" "∅")))
#+end_src
**** Functions
#+begin_src emacs-lisp
(defun d/eval-surrounding-sexp (levels)
  "Eval sexp around point, specifying depth with LEVELS.

Source: http://tinyurl.com/le6wxuo"
  (interactive "p")
  (save-excursion
    (up-list (abs levels) t t)
    (eval-last-sexp nil)))

(defun d/pp-eval-surrounding-sexp (levels)
  "Replace the preceding sexp with its value.

Source: http://tinyurl.com/mh5ev6x"
  (interactive "p")
  (let (pp-escape-newlines)
    (save-excursion
      (up-list (abs levels) t t)
      (pp-eval-last-sexp nil))))

(defun d/pp-macroexpand-surrounding-sexp (levels)
  (interactive "p")
  (save-excursion
    (up-list (abs levels) t t)
    (pp-macroexpand-last-sexp nil)))

(defun d/eval-buffer ()
  (interactive)
  (if (eq major-mode 'org-mode)
      (org-babel-execute-src-block)
    (eval-buffer)))

(defun d/eval-defun ()
  (interactive)
  (if  (eq major-mode 'org-mode)
      (progn
        (when (org-in-src-block-p)
          (org-edit-special)
          (eval-defun nil)
          (org-edit-src-exit)))
    (eval-defun)))

(defmacro d/let (&rest clause)
  (declare (indent defun))
  (pcase clause
    ((and `(,name ,vars . ,body) (guard (symbolp name)))
     (let ((args (cl-loop for i in vars if (listp i) collect (car i) else collect i))
           (init-vals (cl-loop for i in vars if (listp i) append (cdr i) else collect nil)))
       `(cl-labels ((,name ,args ,@body))
          (,name ,@init-vals))))
    (_ `(let ,@clause))))

(defun d/lisp-indent-function (indent-point state)
  "This function is the normal value of the variable `lisp-indent-function'.
The function `calculate-lisp-indent' calls this to determine
if the arguments of a Lisp function call should be indented specially.
INDENT-POINT is the position at which the line being indented begins.
Point is located at the point to indent under (for default indentation);
STATE is the `parse-partial-sexp' state for that position.
If the current line is in a call to a Lisp function that has a non-nil
property `lisp-indent-function' (or the deprecated `lisp-indent-hook'),
it specifies how to indent.  The property value can be:
,* `defun', meaning indent `defun'-style
  \(this is also the case if there is no property and the function
  has a name that begins with \"def\", and three or more arguments);
,* an integer N, meaning indent the first N arguments specially
  (like ordinary function arguments), and then indent any further
  arguments like a body;
,* a function to call that returns the indentation (or nil).
  `lisp-indent-function' calls this function with the same two arguments
  that it itself received.
This function returns either the indentation to use, or nil if the
Lisp function does not specify a special indentation.

Source: https://git.io/vQKz8"
  (let ((normal-indent (current-column))
        (orig-point (point)))
    (goto-char (1+ (elt state 1)))
    (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
    (cond
     ;; car of form doesn't seem to be a symbol, or is a keyword
     ((and (elt state 2)
           (or (not (looking-at "\\sw\\|\\s_"))
               (looking-at ":")))
      (if (not (> (save-excursion (forward-line 1) (point))
                  calculate-lisp-indent-last-sexp))
          (progn (goto-char calculate-lisp-indent-last-sexp)
                 (beginning-of-line)
                 (parse-partial-sexp (point)
                                     calculate-lisp-indent-last-sexp 0 t)))
      ;; Indent under the list or under the first sexp on the same
      ;; line as calculate-lisp-indent-last-sexp.  Note that first
      ;; thing on that line has to be complete sexp since we are
      ;; inside the innermost containing sexp.
      (backward-prefix-chars)
      (current-column))
     ((and (save-excursion
             (goto-char indent-point)
             (skip-syntax-forward " ")
             (not (looking-at ":")))
           (save-excursion
             (goto-char orig-point)
             (looking-at ":")))
      (save-excursion
        (goto-char (+ 2 (elt state 1)))
        (current-column)))
     (t
      (let ((function (buffer-substring (point)
                                        (progn (forward-sexp 1) (point))))
            method)
        (setq method (or (function-get (intern-soft function)
                                       'lisp-indent-function)
                         (get (intern-soft function) 'lisp-indent-hook)))
        (cond ((or (eq method 'defun)
                   (and (null method)
                        (> (length function) 3)
                        (string-match "\\`def" function)))
               (lisp-indent-defform state indent-point))
              ((integerp method)
               (lisp-indent-specform method state
                                     indent-point normal-indent))
              (method
               (funcall method indent-point state))))))))
#+end_src
**** Bindings
#+begin_src emacs-lisp
(d/mode-leader-keys
 :keymaps 'emacs-lisp-mode-map
 "eb" 'd/eval-buffer
 "ef" 'eval-defun
 "er" 'eval-region
 "eR" 'd/eval-and-replace
 "es" 'd/eval-surrounding-sexp
 "el" 'eval-last-sexp
 "pm" 'd/pp-macroexpand-surrounding-sexp
 "ps" 'd/pp-eval-surrounding-sexp)
 #+end_src
**** Setup
#+begin_src emacs-lisp
(d/setup-hook (lisp-mode emacs-lisp-mode)
  (hs-minor-mode)
  (with-eval-after-load 'evil-surround
    (push '(? . ("`" . "'")) evil-surround-pairs-alist))
  (setq-local lisp-indent-function #'d/lisp-indent-function)
  (setq-local prettify-symbols-alist d/lisp-prettify-alist))
#+end_src
*** Haskell
**** Packages
***** [[https://github.com/haskell/haskell-mode][haskell-mode]]
#+begin_src emacs-lisp
(use-package haskell-mode
  :mode "\\.hs\\'"
  :config
  (setq haskell-indentation-layout-offset 4
        haskell-indentation-left-offset 4
        haskell-indentation-ifte-offset 4))

#+end_src
**** Variables
#+begin_src emacs-lisp
(defvar d/haskell-prettify-alist
  '(("=>" . "⇒")
    ("forall" . "∀")
    ("->" . "→")
    ("<-" . "←")
    ("not" . "¬")
    ("lambda" . "λ")))
#+end_src
**** Setup
#+begin_src emacs-lisp
(d/setup-hook haskell-mode
  (setq-local prettify-symbols-alist d/haskell-prettify-alist))
#+end_src
*** Scheme
**** Packages
***** [[https://github.com/jaor/geiser][geiser]]
#+begin_quote
emacs and scheme talk to each other
#+end_quote
#+begin_src emacs-lisp
(use-package geiser
  :config
  (setq geiser-active-implementations '(chicken)
        geiser-debug-jump-to-debug-p nil
        geiser-debug-show-debug-p nil))
#+end_src
**** Variables
#+begin_src emacs-lisp
(defvar d/scheme-prettify-alist
  (prettify-utils-generate
   ("<=" "≤")
   (">=" "≥")
   ("/=" "≠")
   ("eqv?" "≡")
   ("equal?" "≣")
   ("sqrt" "√")
   ("float-pi" "π")
   ("lambda" "λ")
   ("and" "⋏")
   ("or" "⋎")
   ("define" "ƒ")
   ("define-syntax" "ƒₛ")
   ("not" "¬")
   ("->" "→")))
#+end_src
**** Functions
#+begin_src emacs-lisp
(defun d/geiser-eval-surrounding-sexp (levels)
  "Eval sexp around point, specifying depth with LEVELS.

Source: http://tinyurl.com/le6wxuo"
  (interactive "p")
  (save-excursion
    (sp-end-of-sexp (abs levels))
    (geiser-eval-last-sexp nil)))
#+end_src
**** Bindings
#+begin_src emacs-lisp
(d/mode-leader-keys
 :keymaps 'scheme-mode-map
 "eb" 'geiser-eval-buffer
 "ef" 'geiser-eval-definition
 "er" 'geiser-eval-region
 "el" 'geiser-eval-last-sexp
 "es" 'd/geiser-eval-surrounding-sexp)
#+end_src
**** Setup
#+begin_src emacs-lisp
(d/setup-hook scheme-mode
  (hs-minor-mode)
  (d/with-eval-after-load 'evil-surround
    (push '(? . ("`" . "'")) evil-surround-pairs-alist))
  (setq-local prettify-symbols-alist d/scheme-prettify-alist))

(font-lock-add-keywords 'scheme-mode '(("\\<\\sw+:\\>" . 'font-lock-builtin-face)) t)
(font-lock-add-keywords 'geiser-repl-mode '(("\\<\\sw+:\\>" . 'font-lock-builtin-face)) t)
#+end_src
*** [[https://github.com/NixOS/nix-mode][nix-mode]]
#+begin_quote
An Emacs major mode for editing Nix expressions.
#+end_quote
#+begin_src emacs-lisp
(use-package nix-mode
  :commands (d/nix-update-fetchgit d/nix-update-my-packages)
  :config
  (require 'hilit-chg)

  (defmacro d/nix-update-helper (search get-url)
    `(save-excursion
       (beginning-of-buffer)
       (d/let lop ((bound
                    (re-search-forward
                     (rx "=" (opt " ") ,search (opt " ") "{"
                         (group (minimal-match (0+ anything))) "}")
                     nil
                     'noerror)))
         (if (not bound)
             '()
           (cons
            (progn
              (goto-char (match-beginning 1))
              (list
               (save-excursion
                 ,get-url)
               (save-excursion
                 (and
                  (re-search-forward "\"?rev\"?[ ]*?=[ ]*?\"\\(.*\\)\""
                                     bound)
                  (list (match-beginning 1)
                        (match-end 1))))
               (save-excursion
                 (and
                  (re-search-forward "\"?sha256\"?[ ]*?=[ ]*?\"\\(.*\\)\""
                                     bound)
                  (list (match-beginning 1)
                        (match-end 1))))))
            (lop (re-search-forward
                  (rx "=" (opt " ") ,search (opt " ") "{"
                      (group (minimal-match (0+ anything))) "}")
                  nil
                  'noerror)))))))

  (cl-defun d/nix-update-fetchgit (&optional (file (buffer-file-name)))
    (interactive)
    (let ((visited-p (get-file-buffer file))
          (file-buffer (find-file-noselect file)))
      (with-current-buffer file-buffer
        (let* ((git-urls
                (d/nix-update-helper
                 "fetchgit"
                 (and
                  (re-search-forward "\"?url\"?[ ]*?=[ ]*?\"\\(.*\\)\"" bound)
                  (match-string-no-properties 1))))
               (github-urls
                (d/nix-update-helper
                 "fetchFromGitHub"
                 (concat
                  "https://github.com/"
                  (and
                   (save-excursion
                     (re-search-forward "\"?owner\"?[ ]*?=[ ]*?\"\\(.*\\)\"" bound)
                     (match-string-no-properties 1)))
                  "/"
                  (and
                   (save-excursion
                     (re-search-forward "\"?repo\"?[ ]*?=[ ]*?\"\\(.*\\)\"" bound)
                     (match-string-no-properties 1))))))
               (all-urls (append git-urls github-urls)))
          (dolist (repo all-urls)
            (let ((url (car repo))
                  (rev-bounds (cadr repo))
                  (sha-bounds (caddr repo)))
              (make-process
               :name (format "nix-prefetch-git: %s" url)
               :command `("nix-prefetch-git" ,url "--fetch-submodules")
               :stderr (get-buffer-create "*nix-prefetch-stderr*")
               :filter
               `(lambda (process output)
                  (let* ((json-vals (json-read-from-string output))
                         (rev (alist-get 'rev json-vals))
                         (sha (alist-get 'sha256 json-vals)))
                    (let ((visited-p (get-file-buffer ,file))
                          (file-buffer (find-file-noselect ,file)))
                      (with-current-buffer file-buffer
                        (unless highlight-changes-mode
                          (highlight-changes-mode))
                        (save-excursion
                          (unless (string=
                                   (apply #'buffer-substring-no-properties
                                          ',rev-bounds)
                                   rev)
                            (apply #'delete-region ',rev-bounds)
                            (goto-char (car ',rev-bounds))
                            (insert rev))
                          (unless (string=
                                   (apply #'buffer-substring-no-properties
                                          ',sha-bounds)
                                   sha)
                            (apply #'delete-region ',sha-bounds)
                            (goto-char (car ',sha-bounds))
                            (insert sha)))
                        (save-buffer))
                      (unless visited-p
                        (kill-buffer file-buffer)))))))))
        (unless visited-p
          (kill-buffer file-buffer)))))

  (defun d/nix-update-my-packages ()
    (interactive)
    (let ((nix-files
           (split-string
            (shell-command-to-string
             "grep -lrP 'fetchgit|fetchFromGitHub' ~/dotfiles/nix-local")
            "\n"
            'omit-nulls)))
      (dolist (file nix-files)
        (d/nix-update-fetchgit file)))))
#+end_src
*** [[https://github.com/mcandre/vimrc-mode][vimrc-mode]]
#+begin_quote
Enables syntax highlighting for .vimrc/_vimrc files
#+end_quote
#+begin_src emacs-lisp
(use-package vimrc-mode)
#+end_src
*** [[https://github.com/fxbois/web-mode][web-mode]]
#+begin_quote
web template editing mode for emacs
#+end_quote
#+begin_src emacs-lisp
(use-package web-mode
  :mode ("\\.html?\\'" "\\.xml\\'" "\\.launch\\'")
  :config
  (setq web-mode-markup-indent-offset 2))
#+end_src
** VCS
*** Functions
#+begin_src emacs-lisp
(defun d/magit-blame-toggle ()
  "Toggle magit-blame-mode on and off interactively.

Source: https://git.io/vQKub"
  (interactive)
  (if (bound-and-true-p magit-blame-mode)
      (magit-blame-quit)
    (call-interactively 'magit-blame)))

(defun gitlab-snippet (&optional public)
  (interactive "P")
  (require 'request)
  (let ((title (read-from-minibuffer "Snippet title: "))
        (file-name (buffer-name))
        (content (if (region-active-p)
                     (buffer-substring (region-beginning) (region-end))
                   (buffer-string)))
        (visibility (if public "public" "private"))
        (token (password-store-get "tokens/gitlab/master")))
    (request
     "https://gitlab.com/api/v4/snippets"
     :type "POST"
     :data `(("title" . ,title)
             ("file_name" . ,file-name)
             ("content" . ,content)
             ("visibility" . ,visibility))
     :headers `(("PRIVATE-TOKEN" . ,token)))))
#+end_src
*** Packages
**** [[https://github.com/magit/magit][magit]]
#+begin_quote
It's Magit! A Git Porcelain inside Emacs.
#+end_quote
Like git, for emacs. But cooler. (Just /trust/ me on this one.)
#+begin_src emacs-lisp
(use-package magit
  :general
  (d/leader-keys
   "g"  '(:ignore t :wk "magit")
   "gB" 'd/magit-blame-toggle
   "gC" 'magit-clone
   "gL" 'magit-log-buffer-file
   "ga" 'magit-submodule-add
   "gb" 'magit-branch
   "gc" 'magit-checkout
   "gf" 'magit-find-file
   "gl" 'magit-log-all
   "gs" 'magit-status
   "gp" 'magit-file-popup)
  :config
  (setq magit-diff-refine-hunk t
        auto-revert-check-vc-info t
        git-commit-summary-max-length 50
        git-commit-major-mode 'org-mode)
  (d/setup-hook git-commit-mode
    (setq-local fill-column 72)
    (setq-local org-hide-emphasis-markers nil)
    (setq-local org-pretty-entities nil)))
#+end_src
**** [[https://github.com/syohex/emacs-git-gutter-fringe][git-gutter-fringe]]
#+begin_quote
Fringe version of git-gutter.el
#+end_quote
#+begin_src emacs-lisp
(use-package git-gutter-fringe
  :defer 5
  :hook (focus-in . git-gutter:update-all-windows)
  :config
  (global-git-gutter-mode)
  (fringe-helper-define 'git-gutter-fr:modified nil
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX")
  (fringe-helper-define 'git-gutter-fr:added nil
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX")
  (fringe-helper-define 'git-gutter-fr:deleted nil
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"
    "....XXXX"))
#+end_src
**** [[https://github.com/defunkt/gist.el][gist]]
#+begin_quote
Yet another Emacs paste mode, this one for Gist.
#+end_quote
#+begin_src emacs-lisp
(use-package gist
  :config
  (let ((gh-vals (cdar gh-profile-alist)))
    (setf gh-vals (plist-put gh-vals :username "dieggsy")
          gh-vals (plist-put gh-vals :token (password-store-get "tokens/github/gist")))))
#+end_src
* Tools
** [[elisp:(find-library-other-window%20"proced")][proced]]
#+begin_quote
operate on system processes like dired
#+end_quote
#+begin_src emacs-lisp
(use-package proced
  :ensure nil
  :init
  (d/setup-hook proced-mode
    (proced-toggle-auto-update 1))
  :config
  (setq proced-auto-update-interval 2))
#+end_src
** [[elisp:(find-library-other-window "calc")][calc]]
#+begin_quote
the GNU Emacs calculator
#+end_quote
And it's amazing, to be quite honest. "The poor man's Mathematica", I once
heard (and can confirm).
#+begin_src emacs-lisp
(use-package calc
  :ensure nil
  :general
  (d/leader-keys
   "ac" 'calc-dispatch)
  (emap calc-mode-map
    "x" (lambda () (interactive) (counsel-M-x "^calc-")))
  :init
  (add-hook 'calc-embedded-mode-hook #'d/calc-embedded-set-open-close)
  :config
  (setq calc-multiplication-has-precedence nil)
  (setq calc-symbolic-mode t)
  (defun d/calc-embedded-set-open-close ()
    (when comment-start
      (setq-local calc-embedded-open-mode
                  (concat comment-start " ")))
    (when comment-end
      (setq-local calc-embedded-close-mode
                  (concat comment-end "\n")))))
#+end_src
** [[elisp:(find-library-other-window "eshell")][eshell]]
#+begin_quote
the Emacs command shell
#+end_quote
A shell written in emacs-lisp that has recently been replacing zsh for me.
*** Built-in
#+begin_src emacs-lisp
(use-package eshell
  :ensure nil
  :general
  (d/leader-keys
   "RET" 'd/eshell-here)
  :custom
  (eshell-preoutput-filter-functions '(xterm-color-filter))
  (eshell-term-name "eterm-256color")
  (eshell-cmpl-compare-entry-function 'string-lessp)
  :init
  (d/setup-hook eshell-mode
    (imap eshell-mode-map
      [remap eshell-pcomplete] 'completion-at-point
      "C-p" (general-predicate-dispatch nil
              (eshell-point-within-input-p (point)) 'eshell/ivy-ps)
      "C-r" 'eshell/ivy-history
      "C-c C-l" 'd/eshell-clear-keystroke)
    (nmap eshell-mode-map
      "G" 'end-of-buffer))
  :config
  (d/setup-hook eshell-directory-change
    (cond ((and (file-remote-p default-directory)
                (not (file-remote-p (ring-ref eshell-last-dir-ring 0))))
           (eshell/alias "ls"))
          ((and (not (file-remote-p default-directory))
                (file-remote-p (ring-ref eshell-last-dir-ring 0)))
           (eshell/alias "ls" "exa --group-directories-first --sort=extension --color=always $*"))))
  (d/setup-hook eshell-post-command
    (eshell-save-some-history))
  (setenv "PAGER" "cat")
  (setq eshell-buffer-maximum-lines 20000
        eshell-history-size 1000
        eshell-scroll-to-bottom-on-input 'this
        eshell-hist-ignoredups t
        eshell-destroy-buffer-when-process-dies t
        eshell-bad-command-tolerance 1.0e+INF))
#+end_src
*** Packages
**** [[elisp:(find-library-other-window%20"egp")][egp]]
#+begin_quote
Display git info in eshell
#+end_quote
#+begin_src emacs-lisp
(use-package egp
  :ensure nil
  :after eshell
  :config
  (setq eshell-highlight-prompt nil
        eshell-prompt-function 'egp-theme))
#+end_src
**** [[https://github.com/xuchunyang/eshell-z][eshell-z]]
#+begin_quote
cd to frequent directory in eshell, an Emacs port of https://github.com/rupa/z
#+end_quote
#+begin_src emacs-lisp
(use-package eshell-z
  :after eshell)
#+end_src
**** [[https://github.com/Ambrevar/emacs-fish-completion][emacs-fish-completion]]
#+begin_quote
Fish completion for Emacs and Eshell
#+end_quote
#+begin_src emacs-lisp
(use-package emacs-fish-completion
  :after eshell
  :recipe (:host github
           :repo "ambrevar/emacs-fish-completion")
  :hook (eshell-mode . fish-completion-mode))
#+end_src
**** [[https://github.com/leoliu/pcmpl-git-el][pcmpl-git]]
#+begin_quote
Emacs pcomplete for git
#+end_quote
#+begin_src emacs-lisp
(use-package pcmpl-git
  :after eshell)
#+end_src
**** [[https://github.com/dieggsy/company-eshell-autosuggest][company-eshell-autosuggest]]
#+begin_quote
Fish-like autosuggestions in eshell.
#+end_quote
#+begin_src emacs-lisp
(use-package company-eshell-autosuggest
  :hook (eshell-mode . company-eshell-autosuggest-mode)
  :recipe (:host github
           :repo "dieggsy/company-eshell-autosuggest")
  :custom
  (company-eshell-autosuggest-selection-keys '("<right>" "<S-return>")))
#+end_src
**** [[https://github.com/dieggsy/eshell-thefuck][eshell-thefuck]]
#+begin_quote
Correct the previous eshell command.
#+end_quote
#+begin_src emacs-lisp
(use-package eshell-thefuck
  :recipe (:host github
           :repo "dieggsy/eshell-thefuck")
  :after eshell)
#+end_src
*** Functions
#+begin_src emacs-lisp
(d/with-eval-after-load 'eshell
  (require 'f)
  (defun d/eshell-here ()
    "Opens up a new shell in the directory associated with the
current buffer's file. The eshell is renamed to match that
directory to make multiple eshell windows easier."
    (interactive)
    (let* ((parent (if (buffer-file-name)
                       (f-parent (buffer-file-name))
                     default-directory))
           (height (/ (window-total-height) 3))
           (name (format "*eshell: %s*"
                         (f-filename parent))))
      (split-window-vertically (- height))
      (other-window 1)
      (let ((buf (get-buffer name)))
        (if buf
            (switch-to-buffer buf)
          (eshell 'new)
          (rename-buffer name 'unique)))
      (insert (concat "ls"))
      (eshell-send-input)))

  (defun eshell/clear ()
    "Custom `eshell' clear function to clear to top."
    (interactive)
    (let ((inhibit-read-only t))
      (erase-buffer)
      (delete-all-overlays)))

  (defun d/eshell-clear-keystroke ()
    "Allow for keystrokes to invoke eshell/clear."
    (interactive)
    (eshell/clear)
    (eshell-emit-prompt))

  (defun eshell/cpwd ()
    (kill-new (eshell/pwd)))

  (defun eshell/csi ()
    (call-interactively #'geiser))

  (defun eshell/sbcl ()
    (call-interactively #'slime))

  (defun eshell/rg (&rest args)
    (eshell-grep "rg" (append '("--no-heading" "-M" "120") args) t))

  (defun eshell/ivy-ps ()
    (interactive)
    (let ((ps (split-string
               (shell-command-to-string
                "ps axco user,pid,%cpu,%mem,start,time,command")
               "\n"
               t)))
      (ivy-read "[ps] "
                ps
                :action (lambda (x)
                          (insert (cadr (split-string x " " t)))))))

  (defun eshell/ivy-history ()
    (interactive)
    (let ((history
           (delete-dups
            (mapcar (lambda (str)
                      (string-trim (substring-no-properties str)))
                    (ring-elements eshell-history-ring))))
          (input (let* ((beg (save-excursion (eshell-bol)))
                        (end (save-excursion (end-of-line) (point))))
                   (buffer-substring-no-properties beg end))))
      (ivy-read "[history] "
                history
                :action (lambda (x)
                          (end-of-line)
                          (eshell-kill-input)
                          (insert x))
                :initial-input input))))
#+end_src
** [[https://github.com/politza/pdf-tools][pdf-tools]]
#+begin_quote
Emacs support library for PDF files.
#+end_quote
#+begin_src emacs-lisp
(use-package pdf-tools
  :mode ("\\.pdf\\'" . pdf-tools-mode)
  :general
  (nmap pdf-view-mode-map
    "s" 'pdf-view-fit-width-to-window
    "a" 'pdf-view-fit-height-to-window
    "/" 'isearch-forward
    "J" 'pdf-view-next-page
    "K" 'pdf-view-previous-page
    "j" 'pdf-view-next-line-or-next-page
    "k" 'pdf-view-previou-line-or-previous-page
    "-" 'pdf-view-shrink
    "+" 'pdf-view-enlarg)
  :custom
  (pdf-view-midnight-colors '("#FDF4C1" . "#282828"))
  :config
  (pdf-tools-install))
#+end_src
** [[https://github.com/wasamasa/nov.el][nov.el]]
#+begin_quote
Major mode for reading EPUBs in Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package nov
  :mode ("\\.epub\\'" . nov-mode))
#+end_src
** [[https://github.com/adamrt/sane-term][sane-term]]
#+begin_quote
Cycle through terms in emacs
#+end_quote
I wanted a slightly better terminal in emacs. This seems to do the trick.
#+begin_src emacs-lisp
(use-package sane-term
  :after term
  :general (d/leader-keys "at" 'sane-term-create))
#+end_src
* Emacs Enhancements
** Packages
*** [[https://www.emacswiki.org/emacs/centered-cursor-mode.el][centered-cursor-mode]]
#+begin_quote
Cursor stays vertically centered.
#+end_quote
I use this for reading, mostly.
#+begin_src emacs-lisp
(use-package centered-cursor-mode)
#+end_src
*** [[https://github.com/bbatsov/crux][crux]]
#+begin_quote
A Collection of Ridiculously Useful eXtensions for Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package crux
  :general
  (d/leader-keys
   "TAB" 'crux-switch-to-previous-buffer
   "fd" 'crux-delete-file-and-buffer
   "fr" 'crux-rename-file-and-buffer
   "bs" 'crux-sudo-edit)
  :config
  (crux-with-region-or-line eval-region)
  (crux-with-region-or-buffer indent-region)
  (crux-with-region-or-buffer untabify)
  (crux-with-region-or-buffer tabify)
  (crux-with-region-or-buffer fill-region))
#+end_src
*** [[https://github.com/purcell/disable-mouse][disable-mouse]]
#+begin_quote
Disable the mouse in Emacs
#+end_quote
#+begin_src emacs-lisp
(use-package disable-mouse
  :if (not (string= (getenv "XDG_CURRENT_DESKTOP") "exwm"))
  :defer 15
  :config
  (global-disable-mouse-mode)
  (dolist (key '([mouse-1]
                 [mouse-2]
                 [mouse-4]
                 [mouse-5]
                 [mouse-6]
                 [mouse-7]
                 [down-mouse-1]
                 [drag-mouse-1]
                 [wheel-right]
                 [double-wheel-right]
                 [triple-wheel-right]
                 [wheel-left]
                 [double-wheel-left]
                 [triple-wheel-left]
                 [wheel-down]
                 [double-wheel-down]
                 [triple-wheel-down]
                 [wheel-up]
                 [double-wheel-up]
                 [triple-wheel-up]))
    (define-key evil-motion-state-map key #'ignore)))
#+end_src
*** [[https://github.com/justbur/emacs-which-key][emacs-which-key]]
#+begin_quote
Emacs package that displays available keybindings in popup
#+end_quote
#+begin_src emacs-lisp
(use-package which-key
  :defer 10
  :general
  (d/leader-keys
   "hk" 'which-key-show-top-level)
  :config
  (which-key-mode)

  (defmacro d/declare-prefix (&rest body)
    (declare (indent defun))
    `(which-key-add-key-based-replacements
       ,@(cl-loop
          for (prefix name) on body
          by #'cddr
          while name
          append `(,(concat "SPC " prefix) ,name
                   ,(concat "C-SPC " prefix) ,name))))

  (defmacro d/declare-mode-prefix (modes &rest body)
    (declare (indent defun))
    (let ((modes (if (listp modes) modes (list modes))))
      `(progn
         ,@(cl-loop
            for mode in modes collect
            `(which-key-add-major-mode-key-based-replacements ',mode
               ,@(cl-loop
                  for (prefix name) on body
                  by #'cddr
                  while name
                  append `(,(concat ", " prefix) ,name
                           ,(concat "C-, " prefix) ,name)))))))

  (defmacro d/which-key-remove-prefix (&rest body)
    (declare (indent defun))
    `(progn
       ,@(cl-loop for regexp in body collect
                  `(push '((nil . ,(concat regexp "\\(.+\\)")) . (nil . "\\1"))
                         which-key-replacement-alist))))


  (d/declare-prefix
    "a"   "applications"
    "b"   "buffer"
    "f"   "file"
    "h"   "help"
    "hd"  "describe"
    "i"   "insert"
    "j"   "jump"
    "n"   "narrow/numbers"
    "q"   "quit"
    "s"   "search"
    "w"   "window"
    "xi"  "indent"
    "xl"  "lines"
    "SPC" "root")

  (d/declare-mode-prefix emacs-lisp-mode
    "e" "eval"
    "p" "pp")

  (setq which-key-sort-order 'which-key-key-order-alpha)
  (setq which-key-sort-uppercase-first nil)

  (d/which-key-remove-prefix
    "avy-"
    "counsel-"
    "counsel-projectile-"
    "crux-"
    "customize-"
    "d/"
    "evil-mc-"
    "evilnc-"
    "eyebrowse-"
    "eyebrowse-switch-to-"
    "ivy-"
    "magit-"
    "projectile-"))
#+end_src
#+begin_quote
Package to display keyboard macros or latest interactive commands as emacs lisp.
#+end_quote
*** [[https://github.com/jschaf/esup][esup]]
#+begin_quote
ESUP - Emacs Start Up Profiler
#+end_quote
#+begin_src emacs-lisp
(use-package esup
  :config
  (setq esup-insignificant-time 0.001))
#+end_src
*** [[https://github.com/lewang/flx][flx]]
#+begin_quote
Fuzzy matching for Emacs ... a la Sublime Text.
#+end_quote
#+begin_src emacs-lisp
(use-package flx)
#+end_src
*** [[https://git.zx2c4.com/password-store/tree/contrib/emacs][password-store]]
#+begin_quote
Password store (pass) support
#+end_quote
#+begin_src emacs-lisp
(use-package password-store
  :config
  (setq password-store-password-length 20))
#+end_src
*** [[https://github.com/Fanael/persistent-scratch][persistent-scratch]]
#+begin_quote
Preserve the scratch buffer across Emacs sessions
#+end_quote
#+begin_src emacs-lisp
(use-package persistent-scratch
  :defer 10
  :config
  (persistent-scratch-setup-default))
#+end_src
*** [[https://github.com/iqbalansari/restart-emacs][restart-emacs]]
#+begin_quote
A simple emacs package to restart emacs from within emacs.
#+end_quote
SUPER nifty.
#+begin_src emacs-lisp
(use-package restart-emacs
  :general (d/leader-keys "qr" 'restart-emacs)
  :init
  (evil-ex-define-cmd "qr[estart]" 'restart-emacs))
#+end_src
*** [[https://github.com/nonsequitur/smex][smex]]
#+begin_quote
A smart M-x enhancement for Emacs.
#+end_quote
Sorts ivy by most recently used, I think.
#+begin_src emacs-lisp
(use-package smex)
#+end_src
** Hydras
*** toggle
#+begin_src emacs-lisp
(d/with-eval-after-load 'hydra
  (defhydra d/toggle
    (:pre (progn
            (defvar flycheck-mode nil)
            (defvar focus-mode nil)
            (defvar d/show-async-tangle-results nil))
     :color pink
     :timeout 1
     :hint nil)
    "
_a_ abbrev:              %-3s`abbrev-mode   _d_ debug-on-error:      %-3s`debug-on-error   _P_ prettify-symbols:       %-3s`prettify-symbols-mode
_i_ aggressive-indent:   %-3s`aggressive-indent-mode   _l_ rlines:              %-3s`display-line-numbers-mode   _F_ focus:                  %-3s`focus-mode
_c_ column-indicator:    %-3s`column-enforce-mode   _p_ smartparens:         %-3s`smartparens-mode   _z_ async-tangle-results:   %-3s`d/show-async-tangle-results
_f_ flycheck:            %-3s`flycheck-mode   _e_ evil-smartparens:    %-3s`evil-smartparens-mode
_s_ flyspell:            %-3s`flyspell-mode   _w_ global-whitespace:   %-3s`global-whitespace-mode
"
    ("a" abbrev-mode nil)
    ("i" aggressive-indent-mode nil)
    ("d" toggle-debug-on-error nil)
    ("c" column-enforce-mode nil)
    ("l" display-line-numbers-mode nil)
    ("p" smartparens-mode nil)
    ("P" prettify-symbols-mode nil)
    ("e" evil-smartparens-mode nil)
    ("f" flycheck-mode nil)
    ("F" focus-mode nil)
    ("s" flyspell-mode nil)
    ("w" global-whitespace-mode nil)
    ("z" (if d/show-async-tangle-results
             (setq d/show-async-tangle-results nil)
           (setq d/show-async-tangle-results t)) nil)
    ("q" nil)))
#+end_src
* Fun
** Packages
*** [[https://github.com/josuah/drawille][drawille]]
#+begin_quote
Drawille library implementation in elisp.
#+end_quote
Draws stuff in ascii.
#+begin_src emacs-lisp
(use-package drawille)
#+end_src
*** [[https://www.gnu.org/software/emms/][emms]]
#+begin_quote
The Emacs Multimedia System. Plays multimedia files from Emacs using a variety
of external players.
#+end_quote
#+begin_src emacs-lisp
(use-package emms
  :disabled
  :commands emms-smart-browse
  :general
  (d/leader-keys
   "mc" 'emms-pause
   "mb" 'emms-next
   "mz" 'emms-previous
   "ml" 'emms-seek-forward
   "mh" 'emms-seek-backward)
  :config
  (d/setup-hook emms-browser-mode
    (hl-line-mode 1))
  (require 'emms-setup)
  (emms-all)
  (setq emms-source-file-default-directory "~/Music/"
        emms-player-mpd-music-directory "~/Music/"
        emms-seek-seconds 5)
  (require 'emms-player-mpd)
  (add-to-list 'emms-player-list 'emms-player-mpd)
  (emms-player-mpd-connect))
#+end_src
*** [[https://github.com/johanvts/emacs-fireplace/][fireplace]]
#+begin_quote
A cozy fireplace for emacs.
#+end_quote
For the cold winters.
#+begin_src emacs-lisp
(use-package fireplace
  :config
  :general
  (nmap fireplace-mode-map
    "q" 'fireplace-off
    "Q" 'fireplace-off
    "-" 'fireplace-down
    "=" 'fireplace-up
    "*" 'fireplace-toggle-smoke))
#+end_src
*** [[https://github.com/dieggsy/emacs-hacker-typer][hacker-typer]]
#+begin_quote
A customizable implementation of http://hackertyper.com in emacs.
#+end_quote
#+begin_src emacs-lisp
(use-package hacker-typer
  :config
  (setq hacker-typer-show-hackerman t)
  (setq hacker-typer-remove-comments t))
#+end_src
*** [[https://www.emacswiki.org/emacs/highlight-tail.el][highlight-tail]]
#+begin_quote
Draw a colourful "tail" while you write
#+end_quote
(pure awesome)
#+begin_src emacs-lisp
(use-package highlight-tail)
#+end_src
*** [[https://github.com/rbanffy/selectric-mode][selectric-mode]]
#+begin_quote
Make your Emacs sound like a proper typewriter.
#+end_quote
Clackity-clack.
#+begin_src emacs-lisp
(use-package selectric-mode)
#+end_src
*** [[https://github.com/parkouss/speed-type][speed-type]]
#+begin_quote
Practice touch/speed typing in emacs.
#+end_quote
#+begin_src emacs-lisp
(use-package speed-type
  :general (d/leader-keys "as" 'speed-type-text)
  :config
  (setq speed-type--gb-url-format
        "http://www.gutenberg.org/cache/epub/%d/pg%d.txt"))
#+end_src
*** [[https://gitlab.com/iankelling/spray][spray]]
#+begin_quote
A speed reading mode for Emacs.
#+end_quote
#+begin_src emacs-lisp
(use-package spray)
#+end_src
*** [[https://github.com/dieggsy/turing-machine][turing-machine]]
#+begin_quote
Single-tape Turing machine simulator
#+end_quote
#+begin_src emacs-lisp
(use-package turing-machine)
#+end_src
*** [[https://github.com/vibhavp/emacs-xkcd][xkcd]]
#+begin_quote
Read xkcd from Emacs.
#+end_quote
#+begin_src emacs-lisp
(use-package xkcd
  :general
  (d/leader-keys "ax" 'xkcd)
  (nmap xkcd-mode-map
    "j" 'xkcd-next
    "h" 'xkcd-prev
    "k" 'xkcd-prev
    "l" 'xkcd-next
    "t" 'xkcd-alt-text
    "q" 'xkcd-kill-buffer
    "c" 'xkcd-copy-link
    "g" 'xkcd-get
    "r" 'xkcd-rand
    "o" 'xkcd-open-browser
    "e" 'xkcd-open-explanation-browser
    "G" 'xkcd-get-latest)
  :config)
#+end_src
** Functions
#+begin_src emacs-lisp
(eval-when-compile
  (defvar zone-programs))

(defun d/zone-choose ()
  "Choose a PGM to run for `zone'.

Source: http://tinyurl.com/lo96nwc"
  (interactive)
  (require 'zone nil t)
  (let* ((pgm (completing-read
               "Program: "
               (mapcar #'symbol-name zone-programs)))
         (zone-programs (list (intern pgm))))
    (redisplay)
    (zone)))
#+end_src
** Bindings
#+begin_src emacs-lisp
(d/leader-keys
 "ag"  '(:ignore t :wk "games")
 "agd" 'dunnet
 "agg" 'gomoku
 "agt" 'tetris)
#+end_src
* Web services
** Built-in
*** [[elisp:(find-library-other-window "erc")][ERC]]
#+begin_quote
An Emacs Internet Relay Chat client
#+end_quote
**** Defaults
#+begin_src emacs-lisp
(d/with-eval-after-load 'erc
  (require 's)
  (setq erc-prompt (format "\n%s❱❱" (s-repeat 12 "\s"))
        erc-fill-prefix (format "%s\t" (s-repeat 10 "\s"))
        erc-notice-prefix   (format "%s\t***\s" (s-repeat 10 "\s"))
        erc-format-nick-function 'd/erc-format-nick
        erc-nick "dieggsy"
        erc-prompt-for-password nil
        erc-input-line-position -1
        erc-autojoin-timing 'ident
        erc-header-line-format nil
        erc-fill-column 79
        erc-hide-list '("353")
        erc-lurker-threshold-time (* 6 60 60)
        erc-lurker-hide-list '("JOIN" "PART" "QUIT" "NICK")
        erc-kill-buffer-on-part t
        erc-kill-queries-on-quit t
        erc-kill-server-buffer-on-quit t
        erc-rename-buffers t
        erc-join-buffer 'bury
        erc-track-use-faces nil
        erc-track-priority-faces-only 'all
        erc-track-exclude-server-buffer t
        erc-format-query-as-channel-p t
        erc-track-faces-priority-list '(erc-error-face
                                        erc-current-nick-face
                                        erc-keyword-face
                                        erc-nick-msg-face
                                        erc-direct-msg-face
                                        erc-dangerous-host-face)
        erc-autojoin-channels-alist '(("freenode.net"
                                       "#emacs"
                                       "##linux"
                                       "#zsh"
                                       "#python"
                                       "##programming"
                                       "#i3"
                                       "#lisp"
                                       "#chicken"
                                       "#nixos"))
        erc-log-channels-directory (no-littering-expand-var-file-name "erc/logs")
        erc-generate-log-file-name-function 'erc-generate-log-file-name-short)

  (erc-define-catalog-entry 'english 'ACTION "         *\t%n %a"))
#+end_src
**** Built-in
#+begin_src emacs-lisp
(use-package erc
  :ensure nil
  :general
  (d/mode-leader-keys
   :keymaps 'erc-mode-map
   "g" (lambda () (interactive) (let ((ivy-use-virtual-buffers nil)) (erc-switch-to-buffer))))
  (d/leader-keys
   "ai" 'd/erc)
  (imap erc-mode-map
    [up] 'erc-previous-command
    [down] 'erc-next-command)
  :custom
  (erc-modules
   '(log
     notifications
     pcomplete
     hl-nicks
     netsplit
     fill
     button
     track
     stamp
     readonly
     networks
     ring
     autojoin
     noncommands
     irccontrols
     move-to-prompt
     menu))
  :config
  (add-hook 'window-configuration-change-hook #'d/erc-to-bottom)
  (add-hook 'erc-insert-post-hook #'erc-save-buffer-in-logs))
#+end_src
**** Variables
#+begin_src emacs-lisp
(d/with-eval-after-load 'erc
  (defvar d/erc-last-speaker (make-hash-table :test 'equal))
  (setq erc-lurker-state (make-hash-table :test 'equal)))
#+end_src
**** Functions
#+begin_src emacs-lisp
(d/with-eval-after-load 'erc
  (defmacro d/erc-nick-format-function-body (cond nick &optional else)
    `(if ,cond
         (let* ((nick ,nick)
                (trimmed (erc-hl-nicks-trim-irc-nick nick))
                (server (erc-canonicalize-server-name
                         erc-server-announced-name)))
           (unless (gethash server d/erc-last-speaker)
             (puthash server (make-hash-table :test 'equal) d/erc-last-speaker))
           (let* ((channel (buffer-name))
                  (mode (erc-get-user-mode-prefix nick))
                  (nick-was-last (string=
                                  (gethash channel
                                           (gethash server d/erc-last-speaker))
                                  nick))
                  (long-char
                   (if (and (> (length nick) 10)
                            (not nick-was-last))
                       (erc-propertize "…" 'face '(:foreground "#D3869B" ))
                     "")))

             (when (>= (cl-incf erc-lurker-cleanup-count)
                       erc-lurker-cleanup-interval)
               (setq erc-lurker-cleanup-count 0)
               (erc-lurker-cleanup))
             (unless (gethash server erc-lurker-state)
               (puthash server (make-hash-table :test 'equal) erc-lurker-state))
             (puthash trimmed (current-time)
                      (gethash server erc-lurker-state))
             (puthash channel nick (gethash server d/erc-last-speaker))
             (format "%10.10s%s\t"
                     (cond ((string= nick (erc-current-nick))
                            (concat
                             (erc-propertize mode 'face 'erc-nick-prefix-face)
                             (erc-propertize nick 'face 'erc-current-nick-face)))
                           (nick-was-last
                            (erc-propertize
                             "↳"
                             'face
                             (gethash trimmed erc-hl-nicks-face-table)))
                           ((not (member trimmed erc-hl-nicks-skip-nicks))
                            (concat
                             (erc-propertize mode 'face 'erc-nick-prefix-face)
                             (erc-propertize nick 'face (erc-hl-nicks-make-face trimmed))))
                           (t
                            (concat
                             (erc-propertize mode 'face 'erc-nick-prefix-face)
                             nick)))
                     long-char)))
       ,else))

  (defun d/erc-format-nick (&optional user channel-data)
    "Truncate nick when too long, substitute when repeated speaker, and
update lurker status."
    (d/erc-nick-format-function-body
     user
     (erc-server-user-nickname user)))

  (define-advice erc-format-my-nick (:override nil truncate-substitute-lurk)
    "Truncate nick when too long, substitute when repeated speaker, and
update lurker status."
    (d/erc-nick-format-function-body
     erc-show-my-nick
     (erc-current-nick)
     (let ((prefix (format "%10.10s\t" ">")))
       (erc-propertize prefix 'font-lock-face 'erc-current-nick-face))))

  (define-advice erc-format-privmessage
      (:override (nick msg privp msgp) no-brackets)
    "Remove the annoying angle brackets."
    (let* ((mark-s (if msgp (if privp "*" "") "          \t-"))
           (mark-e (if msgp (if privp "*" "") "- "))
           (str    (format "%s%s%s%s" mark-s nick mark-e msg))
           (nick-face (if privp 'erc-nick-msg-face 'erc-nick-default-face))
           (msg-face (if privp 'erc-direct-msg-face 'erc-default-face)))
      ;; add text properties to text before the nick, nick and after nick
      (erc-put-text-property 0 (length mark-s) 'font-lock-face msg-face str)
      (erc-put-text-property (length mark-s) (+ (length mark-s) (length nick))
                             'font-lock-face nick-face str)
      (erc-put-text-property (+ (length mark-s) (length nick)) (length str)
                             'font-lock-face msg-face str)
      str))

  (define-advice erc-track-find-face (:around (fn faces) promote-query)
    "Promote query buffers as if everything contains current nick.

Source: http://tinyurl.com/y8tj8vxx"
    (if (erc-query-buffer-p)
        (setq ad-return-value (intern "erc-current-nick-face"))
      (funcall fn faces)))

  (define-advice erc-track-modified-channels (:around (fn) promote-query)
    "Promote query buffers as if everything contains current nick when
only tracking priority faces.

Source: http://tinyurl.com/y8tj8vxx"
    (when (erc-query-buffer-p) (setq erc-track-priority-faces-only nil))
    (funcall fn)
    (when (erc-query-buffer-p) (setq erc-track-priority-faces-only 'all)))

  (define-advice erc-notifications-notify (:override (nick msg) channel-title)
    "Use channel as notification title and remove erc-fill-prefix."
    (let ((server (erc-canonicalize-server-name
                   erc-server-announced-name))
          (channel (buffer-name))
          (msg (string-join
                (split-string
                 (replace-regexp-in-string erc-fill-prefix "" msg)
                 nil
                 t
                 " ")
                " ")))
      (dbus-ignore-errors
        (setq erc-notifications-last-notification
              (notifications-notify
               :bus erc-notifications-bus
               :title (xml-escape-string (format "%s@%s" channel server))
               :body (xml-escape-string (format "%s: %s" nick msg))
               :replaces-id erc-notifications-last-notification
               :app-icon erc-notifications-icon)))))

  (defun d/erc-to-bottom ()
    (and (eq major-mode 'erc-mode)
         (erc-scroll-to-bottom))))
#+end_src
**** Setup
#+begin_src emacs-lisp
(d/setup-hook erc-mode
  (setq tab-width 5))
#+end_src
** Packages
*** [[https://github.com/leathekd/erc-hl-nicks][erc-hl-nicks]]
#+begin_quote
Nickname Highlighting for ERC
#+end_quote
#+begin_src emacs-lisp
(use-package erc-hl-nicks
  :recipe (:host github
           :repo "dieggsy/erc-hl-nicks"
           :upstream (:host github
                      :repo "leathekd/erc-hl-nicks"))
  :after erc
  :config
  (setq erc-hl-nicks-skip-nicks '("diegs" "dieggsy")
        erc-lurker-ignore-chars erc-hl-nicks-ignore-chars)
  (push "erc-current-nick-face" erc-hl-nicks-skip-faces))
#+end_src
*** [[https://github.com/skeeto/elfeed][elfeed]]
#+begin_quote
An Emacs web feeds client
#+end_quote
Configure the Elfeed RSS reader with an Orgmode file
**** Package
#+begin_src emacs-lisp :tangle no
(use-package elfeed
  :general
  (d/leader-keys "ae" 'elfeed)
  (nmap elfeed-search-mode-map
    "RET" 'elfeed-search-show-entry
    "+" 'elfeed-search-tag-all
    "-" 'elfeed-search-untag-all
    "G" 'elfeed-search-fetch
    "S" 'elfeed-search-set-filter
    "b" 'elfeed-search-browse-url
    "g" 'elfeed-search-update--force
    "q" 'quit-window
    "r" 'elfeed-search-untag-all-unread
    "s" 'elfeed-search-live-filter
    "u" 'elfeed-search-tag-all-unread
    "y" 'elfeed-search-yank
    "U" 'elfeed-update)
  (nmap elfeed-show-mode-map
    "+" 'elfeed-show-tag
    "-" 'elfeed-show-untag
    "P" 'elfeed-show-play-enclosure
    "b" 'elfeed-show-visit
    "d" 'elfeed-show-save-enclosure
    "g" 'elfeed-show-refresh
    "l" 'elfeed-goodies/split-show-next
    "h" 'elfeed-goodies/split-show-prev
    "q" 'elfeed-kill-buffer
    "s" 'elfeed-show-new-live-search
    "y" 'elfeed-show-yank)
  :config
  (add-hook 'elfeed-search-mode-hook (lambda () (evil-smartparens-mode -1))))
#+end_src
**** Enhancements
***** [[https://github.com/remyhonig/elfeed-org][elfeed-org]]
#+begin_quote
Configure the Elfeed RSS reader with an Orgmode file
#+end_quote
#+begin_src emacs-lisp :tangle no
(use-package elfeed-org
  :after elfeed
  :config
  (elfeed-org))
#+end_src
***** [[https://github.com/algernon/elfeed-goodies][elfeed-goodies]]
#+begin_quote
Various goodies for Elfeed
#+end_quote
#+begin_src emacs-lisp :tangle no
(use-package elfeed-goodies
  :after elfeed
  :config
  (elfeed-goodies/setup)
  (setq elfeed-goodies/entry-pane-position 'bottom))
#+end_src
*** [[https://github.com/aaronbieber/sunshine.el][sunshine]]
#+begin_quote
An Emacs package for displaying the forecast from OpenWeatherMap.
#+end_quote
#+begin_src emacs-lisp
(use-package sunshine
  :general
  (d/leader-keys
   "aW" 'sunshine-quick-forecast
   "aw" 'sunshine-forecast)
  :config
  (setq sunshine-location "02139,USA"
        sunshine-appid (password-store-get "api/openweathermap")))
#+end_src
* [[https://github.com/ch11ng/exwm][EXWM]]
#+begin_quote
Emacs X Window Manager
#+end_quote
** Startup
#+begin_src emacs-lisp
(use-package exwm
  :demand t
  :if (string= (getenv "XDG_CURRENT_DESKTOP") "exwm")
  :config
  (add-hook 'exwm-update-class-hook
            (lambda ()
              (exwm-workspace-rename-buffer exwm-class-name)))

  ;; (exwm-input-set-key (kbd "s-w") #'exwm-workspace-switch)
  ;; (dotimes (i 10)
  ;;   (exwm-input-set-key (kbd (format "s-%d" (if (= 9 i) 0 (1+ i))))
  ;;                       `(lambda ()
  ;;                          (interactive)
  ;;                          (exwm-workspace-switch-create ,i))))
  ;; (setq exwm-workspace-index-map (lambda (i) (number-to-string (1+ i))))

  (setq exwm-layout-show-all-buffers t
        exwm-workspace-show-all-buffers t)

  (setq window-divider-default-right-width 1)
  (setq window-divider-default-bottom-width 1)

  (window-divider-mode)

  (setq windmove-wrap-around t)

  (add-hook 'evil-normal-state-entry-hook (lambda ()
                                            (setq-local exwm-input-line-mode-passthrough t)))
  (add-hook 'evil-insert-state-entry-hook (lambda ()
                                            (setq-local exwm-input-line-mode-passthrough nil)))

  (add-hook 'exwm-floating-setup-hook (lambda () (setq-local mode-line-format nil))))
#+end_src
** Functions
#+begin_src emacs-lisp
(d/with-eval-after-load 'exwm
  (defmacro d/exwm-define-key (&rest bindings)
    "Define exwm keys using exwm-input-set-key.

FUNC can be:

- var, quoted symbol, or sharp quoted symbol
- lambda
- arbitrary sexp, which is wrapped in an interactive lambda
- Sexp of form (exec CMD &optional ASYNC), where CMD is a shell
  command. This gets converted into an interactive lambda wrapper
  around `start-process-shell-command' if ASYNC is nil or
  omitted, or `call-process-shell-command' if ASYNC is non-nil.

\(fn [KEY FUNC]...)"
    (declare (indent defun))
    (cl-loop for (key func) on bindings
             by #'cddr
             do  (let* ((key (if (vectorp key) key (kbd key)))
                        (func (if (and (listp func) (eq (car func) 'exec))
                                  (let ((cmd (cadr func)))
                                    (if (caddr func)
                                        `(call-process-shell-command ,cmd)
                                      `(start-process-shell-command ,cmd nil ,cmd)))
                                func))
                        (func (cond ((symbolp func)
                                     (symbol-value func))
                                    ((functionp func)
                                     func)
                                    ((and (consp func) (or (eq (car func) 'function)
                                                           (eq (car func) 'quote)))
                                     (cadr func))
                                    (t
                                     `(lambda ()
                                        (interactive)
                                        ,func)))))
                   (exwm-input-set-key key func))))

  (cl-defun d/exec (cmd &optional (async t))
    (if async
        (call-process-shell-command cmd)
      (start-process-shell-command cmd nil cmd)))

  (cl-defmacro d/exwm-mode-line-process (name &key filter-body cmd repeat fmt)
    (declare (indent defun))
    (let ((shell-cmd (format "while sleep %d; do %s; done" repeat cmd))
          (filter-name (intern (concat (symbol-name name) "-filter"))))
      `(progn
         (defvar ,name (string-trim (shell-command-to-string ,cmd)))
         (start-process-shell-command ,(symbol-name name) nil ,shell-cmd)
         (defun ,filter-name (process output)
           ,filter-body
           (setq ,name ,(if fmt `(funcall ,fmt (string-trim output))
                          `(string-trim output)))
           (force-mode-line-update 'all))
         (set-process-filter (get-process ,(symbol-name name)) #',filter-name))))

  (defun d/swap-window-right ()
    (interactive)
    (let* ((buff (current-buffer))
           (win (windmove-find-other-window 'right))
           (o-buff (window-buffer win)))
      (set-window-buffer win buff)
      (set-window-buffer (selected-window) o-buff)
      (windmove-right)))

  (defun d/swap-window-left ()
    (interactive)
    (let* ((buff (current-buffer))
           (win (windmove-find-other-window 'left))
           (o-buff (window-buffer win)))
      (set-window-buffer win buff)
      (set-window-buffer (selected-window) o-buff)
      (windmove-left)))

  (defun d/swap-window-down ()
    (interactive)
    (let* ((buff (current-buffer))
           (win (windmove-find-other-window 'down))
           (o-buff (window-buffer win)))
      (set-window-buffer win buff)
      (set-window-buffer (selected-window) o-buff)
      (windmove-down)))

  (defun d/swap-window-up ()
    (interactive)
    (let* ((buff (current-buffer))
           (win (windmove-find-other-window 'up))
           (o-buff (window-buffer win)))
      (set-window-buffer win buff)
      (set-window-buffer (selected-window) o-buff)
      (windmove-up)))

  (defun d/exwm-exit ()
    (interactive)
    (ivy-read ": "
              '("exit"
                "lock"
                "suspend"
                "hibernate"
                "reboot"
                "shutdown")
              :action (lambda (x)
                        (pcase x
                          ("lock"
                           (start-process-shell-command "fancylock" nil "~/bin/fancylock"))
                          ("exit"
                           (kill-emacs)))))))
#+end_src
** Processes
#+begin_src emacs-lisp :tangle no
(d/with-eval-after-load 'exwm
  (dolist (cmd
           '("dropbox-cli start"
             "unclutter"
             "xset r rate 300 50"
             "setxkbmap dvorak"
             "setxkbmap -option 'ctrl:nocaps'"
             "xcape -e 'Control_L=Escape'"))
    (start-process-shell-command cmd nil cmd))

  (defvar d/mute
    (string= (string-trim
              (shell-command-to-string "amixer -D pulse get Master \
| grep \"Left: Playback\" \
| awk '{print $6}' \
| tr -d \"[-]\""))
             "off"))

  (defvar d/kb-layout
    (string-trim
     (shell-command-to-string
      "layout=$(setxkbmap -query | grep layout | cut -d' ' -f6)

if [ \"$layout\" = \"us\" ]; then
    echo 'QW'
elif [ \"$layout\" = \"dvorak\" ]; then
     echo 'DV'
fi")))

  (d/exwm-mode-line-process d/ssid
    :cmd "iwgetid -r || echo 'None'"
    :repeat 5))
#+end_src
** Bindings
#+begin_src emacs-lisp
(d/with-eval-after-load 'exwm
  (d/exwm-define-key
   ;; "s-&" (lambda (command)
   ;;         (interactive (list (read-shell-command "$ ")))
   ;;         (start-process-shell-command command nil command))
   "<XF86KbdBrightnessDown>" (exec "~/bin/kb-light -")
   "<XF86KbdBrightnessUp>" (exec "~/bin/kb-light +")
   "<XF86MonBrightnessUp>" (exec "~/bin/i3blocks/screen +")
   "<XF86MonBrightnessDown>" (exec "~/bin/i3blocks/screen -")
   "<XF86AudioLowerVolume>" (exec "amixer -D pulse sset Master 5%-")
   "<XF86AudioRaiseVolume>" (exec "amixer -D pulse sset Master 5%+")
   "<XF86AudioMute>" (exec "amixer -D pulse sset Master toggle")

   "s-r" 'exwm-reset
   "s-u" 'exwm-layout-toggle-fullscreen
   "s-P" 'exwm-restart
   "s-\"" 'kill-this-buffer
   "<s-return>" 'eshell
   "M-SPC" 'counsel-linux-app
   "s->" 'd/exwm-exit

   "s-s" 'evil-window-right
   "s-h" 'evil-window-left
   "s-t" 'evil-window-down
   "s-n" 'evil-window-up

   "s-<right>" 'evil-window-right
   "s-<left>" 'evil-window-left
   "s-<down>" 'evil-window-down
   "s-<up>" 'evil-window-up

   "s-S" 'd/swap-window-right
   "s-H" 'd/swap-window-left
   "s-T" 'd/swap-window-down
   "s-N" 'd/swap-window-up

   "s-S-<right>" 'd/swap-window-right
   "s-S-<left>" 'd/swap-window-left
   "s-S-<down>" 'd/swap-window-down
   "s-S-<up>" 'd/swap-window-up)

  (add-to-list 'exwm-input-prefix-keys ?\C-/)
  (setq exwm-input-prefix-keys (delq 3 exwm-input-prefix-keys)))
#+end_src
** Mode-line
#+begin_src emacs-lisp :tangle no
(d/with-eval-after-load 'exwm
  (display-battery-mode)
  (display-time-mode)

  (defvar d/ssid-keymap
    (let ((map (make-sparse-keymap)))
      (define-key map [mode-line mouse-1]
        (lambda ()
          (interactive)
          (call-process-shell-command "networkmanager_dmenu")))
      map))

  (defvar d/kb-layout-keymap
    (let ((map (make-sparse-keymap)))
      (define-key map [mode-line mouse-1]
        (lambda ()
          (interactive)
          (pcase d/kb-layout
            ("DV"
             (setq d/kb-layout "QW")
             (call-process-shell-command "setxkbmap us")
             (force-mode-line-update 'all))
            ("QW"
             (setq d/kb-layout "DV")
             (call-process-shell-command "setxkbmap dvorak")
             (force-mode-line-update 'all)))))
      map))

  ;; (defvar d/mode-line-exwm
  ;;   '("%e"
  ;;     (:eval
  ;;      (let* ((lhs d/mode-line)
  ;;             (l-width (length (format-mode-line lhs)))
  ;;             (rhs `((:eval
  ;;                     (d/with-window-status
  ;;                       (concat
  ;;                        (when d/mute
  ;;                          (propertize-active "M  " 'face '(:foreground "#FB4933")))
  ;;                        (propertize-active (concat d/kb-layout "  ")
  ;;                                           'face '(:foreground "#D3869B")
  ;;                                           'local-map d/kb-layout-keymap)
  ;;                        (propertize-active (concat d/ssid "  ")
  ;;                                           'face '(:foreground "#B8bb26")
  ;;                                           'local-map d/ssid-keymap)

  ;;                        (propertize-active (concat battery-mode-line-string "  ")
  ;;                                           'face '(:foreground "#83a598"))

  ;;                        (propertize-active (concat display-time-string "  ")
  ;;                                           'face '(:foreground "#A89984")))))))
  ;;             (r-width (length (format-mode-line rhs)))
  ;;             (t-width (+ l-width r-width))
  ;;             (pad (if (> (window-width) (+ l-width r-width))
  ;;                      (make-string
  ;;                       (- (window-width)
  ;;                          (+ l-width r-width)
  ;;                          (if eldoc-mode-line-string
  ;;                              (+ (length eldoc-mode-line-string) 2)
  ;;                            0)
  ;;                          (if (eq major-mode 'exwm-mode)
  ;;                              -1
  ;;                            0))
  ;;                       ?\s)
  ;;                    "")))
  ;;        (format-mode-line
  ;;         (append lhs `(,pad) rhs))))))

  (defvar d/exwm-bar
    '((:eval
       (let ((line (d/with-window-status
                     (concat
                      (propertize-active (concat d/ssid "  ")
                                         'face '(:foreground "#B8BB26"))
                      (propertize-active display-time-string)))))
         (s-pad-left (window-width) " " line)))
      ))

  (setq-default mode-line-format d/mode-line-exwm)
  (with-current-buffer "*Messages*"
    (setq-local mode-line-format d/mode-line-exwm)))
#+end_src
** Enable
#+begin_src emacs-lisp
(d/with-eval-after-load 'exwm
  (exwm-enable))
#+end_src
* Finalize
#+begin_src emacs-lisp
(when window-system
  (let ((elapsed (float-time (time-subtract (current-time)
                                            d/emacs-start-time))))
    (message "Loading %s...done (%.3fs)" load-file-name elapsed))

  (add-hook 'after-init-hook
            `(lambda ()
               (let ((elapsed (float-time (time-subtract (current-time)
                                                         d/emacs-start-time))))
                 (message "Loading %s...done (%.3fs) [after-init]"
                          ,load-file-name elapsed)))
            t))
#+end_src

#+begin_example
# Local Variables:
# after-save-hook: (git-gutter d/async-babel-tangle)
# End:
#+end_example
