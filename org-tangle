#!emacs --script
(require 'subr-x)
(require 'org)

;;; Helper functions
(defvar specified-files (cdddr command-line-args))

(defvar default-files '("rc.org" "zsh.org" "emacs.d/config.org"))

(defvar confirm-install nil)

(defun dotfiles-file (name)
  (expand-file-name name))

(defun blue-text (text)
  (format "\e[94m%s\e[0m" text))

(defun green-text (text)
  (format "\e[92m%s\e[0m" text))

(defun red-text (text)
  (format "\e[91m%s\e[0m" text))

(defun tangle-found-file (filename)
  "Print tangle locations of file and tangle."
  (find-file filename)
  (let ((file-list '()))
    (while (search-forward-regexp ":tangle[^~\n]+\\(~/.[^[:space:]\"]+\\)" nil t)
      (add-to-list 'file-list (match-string 1) t))
    (dolist (i file-list)
      (message "    %s" (blue-text i))))
  (let ((inhibit-message t))
    (org-babel-tangle-file filename)))

(defun find-and-tangle-heading (heading)
  "Find heading in rc.org and tangle it (individually)."
  (find-file (dotfiles-file "rc.org"))
  (if (search-forward-regexp (concat "* " heading "$"))
      (progn
        (org-narrow-to-subtree)
        (let ((file-list '()))
          (while (search-forward-regexp ":tangle[^~\n]+\\(~/.[^[:space:]\"]+\\)" nil t)
            (add-to-list 'file-list (match-string 1) t))
          (message "Found heading %s, installing to:" (green-text heading))
          (dolist (i file-list)
            (message "    %s" (blue-text i))))
        (let ((inhibit-message t))
          (org-babel-tangle)))
    (message "File or heading %s doesn't exist, skipping..." (red-text heading))))

;;; Main install
(if (= (length specified-files) 0)
    ;; No files were provided by user
    (progn
      (message "Intalling default files: %s"
               (string-join (mapcar #'blue-text default-files) ", "))
      (dolist (file (mapcar #'dotfiles-file default-files))
        (message "Installing %s to:" (green-text file))
        (tangle-found-file file)))
  ;; Files provided by user
  (message "Installing specified files/headings: %s"
           (blue-text (mapconcat 'identity specified-files "\e[0m, \e[94m")))
  (dolist (file specified-files)
    (let ((filename (dotfiles-file file)))
      (if (not (file-exists-p filename))
          ;; If provided filename doesn't exist, look for heading.
          (find-and-tangle-heading file)
        ;; Otherwise install file.
        (message "Found file %s, installing to:" (green-text file))
        (tangle-found-file filename)))))

(message "Done!")

;;; Symlink
(cond ((string= (file-symlink-p (expand-file-name "~/.emacs.d")) (dotfiles-file "emacs.d/"))
       (message "~/.emacs.d already points to %s" (dotfiles-file ".emacs.d/")))
      ((file-exists-p (expand-file-name "~/.emacs.d")) nil)
      (t
       (message "Symlinking dotfiles/emacs.d to ~/.emacs.d...")
       (make-symbolic-link (dotfiles-file "emacs.d/") (expand-file-name "~/.emacs.d") t)))

(setq argv nil)
