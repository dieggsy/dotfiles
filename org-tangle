#!emacs --script
(require 'subr-x)
(require 'org)

(defvar specified-files (cdddr command-line-args))

(defvar default-files '("rc.org" "zsh.org" "emacs.d/config.org"))

(defvar confirm-install nil)

(defun dotfiles-file (name)
  (expand-file-name
   (concat default-directory name)))

(defun blue-text (text)
  (format "\e[94m%s\e[0m" text))

(defun green-text (text)
  (format "\e[92m%s\e[0m" text))

(defun red-text (text)
  (format "\e[91m%s\e[0m" text))


(if (or (= (length specified-files) 0)
        (and (not (cdr specified-files)) (string= (car specified-files) "--ask")))
    (progn
      (when (string= (car specified-files) "--ask")
        (setq confirm-install t))
      (message "Intalling default files: %s"
               (string-join (mapcar #'blue-text default-files) ", "))
      (if (y-or-n-p "Continue?")
          (progn
            (dolist (file (mapcar #'dotfiles-file default-files))
              (let ((file-list '()))
                (message "Installing %s to:" (green-text file))
                (find-file file)
                (while (search-forward-regexp ":tangle[^~\n]+\\(~/.[^[:space:]\"]+\\)" nil t)
                  (add-to-list 'file-list (match-string 1) t))
                (dolist (i file-list)
                  (message "    %s" (blue-text i)))
                (if (or (not confirm-install) (y-or-n-p "Continue?"))
                    (let ((inhibit-message t))
                      (org-babel-tangle-file file))
                  (message "Skipping..."))))
            (message "Done!"))
        (messsage "Aborted.")))

  (message "Installing specified files/headings: %s"
           (blue-text (mapconcat 'identity (remove "--ask" specified-files) "\e[0m, \e[94m")))
  (if (y-or-n-p "Continue?")
      (progn
        (dolist (file specified-files)
          (if (string= file "--ask")
              (setq confirm-install t)
            (let ((filename (expand-file-name (dotfiles-file file))))
              (if (not (file-exists-p filename))
                  (progn
                    (find-file (dotfiles-file "rc.org"))
                    (if (search-forward-regexp (concat "* " file "$"))
                        (progn
                          (org-narrow-to-subtree)
                          (let ((file-list '()))
                            (while (search-forward-regexp ":tangle[^~\n]+\\(~/.[^[:space:]\"]+\\)" nil t)
                              (add-to-list 'file-list (match-string 1) t))
                            (message "Found heading %s, installing to:" (green-text file))
                            (dolist (i file-list)
                              (message "    %s" (blue-text i))))
                          (let ((inhibit-message t))
                            (if (or (not confirm-install) (y-or-n-p "Continue?"))
                                (org-babel-tangle)
                              (message "Skipping..."))))
                      (message "File or heading %s doesn't exist, skipping..." (red-text file))))
                (message "Found file %s, installing to:" (green-text file))
                (find-file filename)
                (let ((file-list '()))
                  (while (search-forward-regexp ":tangle[^~\n]+\\(~/.[^[:space:]\"]+\\)" nil t)
                    (add-to-list 'file-list (match-string 1) t))
                  (dolist (i file-list)
                    (message "    %s" (blue-text i))))
                (if (or (not confirm-install) (y-or-n-p "Continue?"))
                    (let ((inhibit-message t))
                      (org-babel-tangle-file (expand-file-name filename)))
                  (message "Skipping..."))))))
        (message "Done!"))
    (message "Aborted.")))

(message "Symlinking dotfiles/emacs.d to ~/.emacs.d...")
(cond ((string= (file-symlink-p (expand-file-name "~/.emacs.d")) (dotfiles-file "emacs.d/"))
       (message "~/.emacs.d already points to %s" (dotfiles-file ".emacs.d/")))
      ((file-exists-p (expand-file-name "~/.emacs.d"))
       (message "~/.emasc.d exists, not symlinking."))
      (t (make-symbolic-link (dotfiles-file "emacs.d/") (expand-file-name "~/.emacs.d") t)))

(message "Symlinking dotfiles/vim to ~/.vim...")
(cond ((string= (file-symlink-p (expand-file-name "~/.vim")) (dotfiles-file "vim/"))
       (message "~/.vim already points to %s" (dotfiles-file "vim/")))
      ((file-exists-p (expand-file-name "~/.emacs.d"))
       (message "~/.vim exists, not symlinking."))
      (t (make-symbolic-link (dotfiles-file "vim/") (expand-file-name "~/.vim") t)))
(setq argv nil)
