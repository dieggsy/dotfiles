#+TITLE: rc.org
#+PROPERTY: header-args :comments no :mkdirp yes :results silent

* Intro

This just points to different bits of my config, which is then managed and
installed with gnu stow.

* Config
** bspwm
*** [[file:bspwm/.config/bspwm/bspwmrc][bspwmrc]]
*** [[file:bspwm/.config/bspwm/rules.scm][rules]]
*** [[file:bspwm/.config/sxhkd/sxhkdrc][sxhkdrc]]
** chicken
*** [[file:chicken/.csirc][csirc]]
** cmus
*** [[file:cmus/.config/cmus/darktooth.theme][darktooth.theme]]
** dunst
*** [[file:dunst/.config/dunst/dunstrc][dunstrc]]
** etc
*** xorg
**** [[file:etc/xorg/X11/xorg.conf.d/00-keyboard.conf][00-keyboard.conf]]
**** [[file:etc/xorg/X11/xorg.conf.d/40-libinput.conf][40-libinput.conf]]
** fontconfig
*** [[file:fontconfig/.config/fontconfig/fonts.conf][fonts.conf]]
** freedesktop
*** Desktop entries
**** [[file:freedesktop/.local/share/applications/cmus.desktop][cmus.desktop]]
**** [[file:freedesktop/.local/share/applications/emacsclient.desktop][emacsclient.desktop]]
**** firefox.desktop
#+begin_src conf
[Desktop Entry]
Version=1.0
Name=Firefox
Comment=Browse the Web
Exec=env GTK_THEME=Arc /usr/lib/firefox/firefox %u
Icon=firefox
Terminal=false
Type=Application
MimeType=text/html;text/xml;application/xhtml+xml;application/vnd.mozilla.xul+xml;text/mml;x-scheme-handler/http;x-scheme-handler/https;
StartupNotify=true
StartupWMClass=Firefox
Categories=Network;WebBrowser;
Keywords=web;browser;internet;
Actions=new-window;new-private-window;

[Desktop Action new-window]
Name=New Window
Exec=/usr/lib/firefox/firefox --private-window %u
#+end_src
**** [[file:freedesktop/.local/share/applications/spotify.desktop][spotify.desktop]]
*** [[file:freedesktop/.config/user-dirs.dirs][user-dirs.dirs]]
** git
*** [[file:git/.gitconfig][gitconfig]]
*** [[file:git/.gitignore][gitignore]]
** neovim
*** [[file:neovim/.config/nvim/init.vim][init.vim]]
** polybar
*** [[file:polybar/.config/polybar/config][config]]
** readline
*** [[file:readline/.inputrc][inputrc]]
** rofi
*** [[file:rofi/.config/rofi/config][config]]
*** [[file:rofi/.config/rofi/darktooth.rasi][darktooth.rasi]]
*** [[file:rofi/.config/rofi/dropdown.rasi][dropdown.rasi]]
*** networkmanager_dmenu
**** [[file:rofi/.config/networkmanager-dmenu/config.ini][config.ini]]
** rsync
*** [[file:rsync/.rsync-exclude][rsync-exclude]]
** tmux
*** [[file:tmux/.tmux.conf][tmux.conf]]
** X
*** [[file:X/.XCompose][xcompose]]
*** [[file:X/.xinitrc][xinitrc]]
*** [[file:X/.Xresources][xresources]]
** zathura
*** [[file:zathura/.config/zathura/zathurarc][zathurarc]]
** zsh
*** [[file:zsh/.zshrc][zshrc]]
*** [[file:zsh/.zshenv][zshenv]]
*** [[file:zsh/.zlogin][zlogin]]
* Scripts
** bluez-rofi
#+begin_src python :tangle ~/bin/bluez-rofi :shebang "#!/usr/bin/env python3"
import dbus
import os
import locale
import time
from subprocess import Popen, PIPE

bus = dbus.SystemBus()

def get_offset_hack():
    """Get the position offset based on network SSID"""
    base = 84
    nm = bus.get_object("org.freedesktop.NetworkManager",
                         "/org/freedesktop/NetworkManager")
    props_iface = dbus.Interface(nm, "org.freedesktop.DBus.Properties")
    # nm_iface = dbus.Interface(nm, "org.freedesktop.NetworkManager")
    conns = props_iface.Get("org.freedesktop.NetworkManager" ,"ActiveConnections")
    if len(conns) == 0:
        return 72
    else:
        active = bus.get_object("org.freedesktop.NetworkManager",
                                conns[0])
        props_iface = dbus.Interface(active, "org.freedesktop.DBus.Properties")
        conn_len = len(props_iface.Get("org.freedesktop.NetworkManager.Connection.Active",
                                       "Id"))
        return conn_len * 12 - base

ENV = os.environ.copy()
ENV['LC_ALL'] = 'C'
ENC = locale.getpreferredencoding()
BLUETOOTH_GUI = "blueman-manager"
ROFI_CMD = [
    "rofi",
    "-p", "bluetooth",
    "-xoffset", str(492 + get_offset_hack()),
    "-dmenu", "-i",
    "-theme-str", "#window {width: 500;}",
    "-theme-str", "#inputbar {enabled:false;}",
]


# rofi -dmenu -i -theme-str "#window {width: 500;}"


def make_device_list(devmap):
    def rank_device(dev):
        if dev["Connected"]:
            return 1
        elif dev["Paired"]:
            if dev["Trusted"]:
                return 2
            else:
                return 3
        else:
            return 4
    lst = list(devmap.values());
    lst.sort(key=rank_device)
    return list(map(lambda dev: dev["Address"]
                    + "  "
                    + ("P" if dev["Paired"] else " ")
                    + ("T" if dev["Trusted"] else " ")
                    + "  "
                    + dev["Alias"],
                    lst))

def run_rofi(args, inp):
    return (Popen(args, stdin=PIPE, stdout=PIPE, env=ENV)
            .communicate(input=inp.encode(ENC))[0]
            .decode(ENC)).strip()

def main():

    bluez = bus.get_object("org.bluez", "/")
    bluez_iface = dbus.Interface(bluez, "org.freedesktop.DBus.ObjectManager")
    managed_objects = bluez_iface.GetManagedObjects()

    adapter_path = None;
    # devlist = []
    devmap = {}
    for key,val in managed_objects.items():
        if val.get("org.bluez.Device1"):
            dev = val["org.bluez.Device1"]
            dev["path"] = key
            # devlist.append(dev)
            devmap[dev["Address"]] = dev
        elif val.get("org.bluez.Adapter1"):
            adapter_path = key

    inp = "\n".join(make_device_list(devmap) + [ "", "Start Discovery", "Open GUI"])

    sel = run_rofi(ROFI_CMD, inp)

    adapter = bus.get_object("org.bluez", adapter_path)

    if sel == "Start Discovery":
        adapter_iface = dbus.Interface(adapter, "org.bluez.Adapter1");
        adapter_iface.StartDiscovery();
        time.sleep(30)
    elif sel == "Open GUI":
        Popen([BLUETOOTH_GUI]).wait()
    elif sel:
        sel = sel.split()[0]
        path = devmap[sel]["path"]

        dev = bus.get_object("org.bluez", path)
        dev_iface = dbus.Interface(dev, "org.bluez.Device1")

        connected = devmap[sel]["Connected"]
        if connected:
            dev_iface.Disconnect()
        else:
            dev_iface.Connect()

if __name__ == '__main__':
    main()
#+end_src
** cal-rofi
#+begin_src python :tangle ~/bin/cal-rofi :shebang "#!/usr/bin/env python3"
import datetime
import calendar
import itertools
import locale
from subprocess import Popen, PIPE

today = datetime.date.today()
month = today.month
extra = today.replace(day=1).weekday() + 1
lastday =  calendar.monthrange(today.year, month)[1]

ENC=locale.getpreferredencoding()

days = ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]

inp = days + [" "] * extra + list(map(lambda x: str(x).rjust(2),(range(1,lastday+1))))

def chop(l, n):
    """Yield successive n-sized chunks from l."""
    for i in range(0, len(l), n):
        yield l[i:i + n]

chopped = list(chop(inp,7))
chopped[-1] = chopped[-1] + [" "] * (7 - len(chopped[-1]))

ROFI_CMD = [
    "rofi", "-dmenu",
    "-p", f"{calendar.month_name[month]} {today.year}",
    "-xoffset", "48",
    "-columns", "7",
    "-theme-str", f"#listview{{lines:{len(chopped)};}}",
    "-theme-str", "#window{width:318;}"
]

transposed = list(map(list, zip(*chopped)))
flattened = list(itertools.chain.from_iterable(transposed))
active = flattened.index(str(today.day).rjust(2))
inp = "\n".join(flattened)
Popen(ROFI_CMD + [ "-a", str(active) ], stdin=PIPE, stdout=PIPE).communicate(input=inp.encode(ENC))[0].decode(ENC).strip()
#+end_src
** mons-rofi
#+begin_src sh :tangle ~/bin/mons-rofi :shebang "#!/bin/sh"
sel="$(echo -e "primary\nsecondary\nmirror\nright\nleft\ntop\nbottom" |
         rofi -dmenu -i -p 'display' \
              -location 3 -xoffset -350 \
              -theme-str '#window {width:200;}')"

case $sel in
    "primary") mons -o;;
    "secondary") mons -s;;
    "mirror") mons -m;;
    ,*) mons -e $sel;;
esac
#+end_src
** desktop-record
:PROPERTIES:
:header-args+: :tangle ~/bin/desktop-record :shebang "#!/usr/bin/bash"
:END:
#+begin_src sh
if [ -n "$1" ]; then
    NAME="$1"
else
    NAME="output"
fi
screenkey -f "Iosevka Term" --bg-color "#282828" --font-color "#FDF4C1" --opacity 1 --mods-mode emacs -p fixed -g 1000x47+780+0
guvcview --device=/dev/video2 > /dev/null 2>&1 &
notify-send desktop-record 'Starting recording in 10 seconds...'
sleep 10
ffmpeg -video_size 2560x1440 -framerate 30 -f x11grab -i :0.0+0,0 -f pulse -ac 2 -i default "$NAME.mp4"
pkill screenkey
pkill guvcview
#+end_src
** wm-exit-dmenu
:PROPERTIES:
:header-args+: :tangle ~/bin/wm-exit-dmenu :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
# message="Exit i3?"
response=$(echo -e "exit\nlock\nsuspend\nhibernate\nreboot\nshutdown" |
               rofi -dmenu)
if [ -n "$response" ]; then
    ~/bin/wm-exit $response
fi
#+end_src
** wm-exit
:PROPERTIES:
:header-args+: :tangle ~/bin/wm-exit :shebang "#!/bin/sh"
:END:
#+begin_src sh
[[ $(cat /proc/1/comm) == "systemd" ]] && logind=systemctl || logind=loginctl

case "$1" in
    lock)
        slock
        ;;
    exit)
        bspc quit
        ;;
    suspend)
        $logind suspend
        ;;
    hibernate)
        $logind hibernate
        ;;
    reboot)
        $logind reboot
        ;;
    shutdown)
        $logind poweroff
        ;;
    ,*)
        notify-send 'Invalid argument'
        exit 2
esac

exit 0
#+end_src
** ocrpdf
:PROPERTIES:
:header-args+: :tangle ~/bin/ocrpdf :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
if [[ -z $1 ]]; then
    echo "No input file provided."
elif [[ -z $2 ]]; then
    echo "No output file provided"
else
    echo "Converting pdf to tif..."
    \gs -dNOPAUSE -q -r500 \
        -sDEVICE=tiffg4 \
        -dBATCH \
        -sOutputFile=$TMPDIR/tempocr.tif \
        $1
    echo "Running tesseract on pngs..."
    tesseract $TMPDIR/tempocr.tif $2 >/dev/null 2>&1
    echo "Done."
fi
#+end_src
** ocrpdf2
:PROPERTIES:
:header-args+: :tangle ~/bin/ocrpdf2 :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
if [[ -z $1 ]]; then
    echo "No input file provided."
elif [[ -z $2 ]]; then
    echo "No output file provided"
else
    echo "Converting pdf to png..."
    convert -density 500 $1 $TMPDIR/tempocr.png
    count=0
    echo "Running tesseract on pngs..."
    while [ -f $TMPDIR/tempocr-$count.png ]; do
        echo "    Page $count"
        tesseract $TMPDIR/tempocr-$count.png $TMPDIR/tempocr >/dev/null 2>&1
        cat $TMPDIR/tempocr.txt >> $2
        let count=count+1
    done
    echo "Created output file $2"
fi
#+end_src
** pass
Extensions and utilities for [[https://www.passwordstore.org/][pass]] password manager.
*** pass-fzf
:PROPERTIES:
:header-args+: :tangle ~/.password-store/.extensions/fzf.bash :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
name=$(rg -g "*.gpg" "$HOME/.password-store" --files \
           | sed 's@'"$HOME"'/\.password-store/\(.\+\?\)\.gpg@\1@' \
           | fzf --reverse --prompt="[pass] ")

[[ -n "$name" ]] && pass -c $name
#+end_src
*** pass-rofi
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.password-store/.extensions/rofi.bash") :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
name=$(rg -g "*.gpg" "$HOME/.password-store" --files \
           | sed 's@'"$HOME"'/\.password-store/\(.\+\?\)\.gpg@\1@' \
           | sort \
           | rofi -dmenu -i -p "pass" -width 30)

pass -c $name
#+end_src
** rofi-files
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/rofi-files") :shebang "#!/usr/bin/env zsh"
:END:
A script to search all files using [[https://github.com/BurntSushi/ripgrep][ripgrep]] and [[https://github.com/DaveDavenport/rofi][rofi]].
#+begin_src sh
rg -a --files 2>/dev/null \
    | LC_ALL=C sort \
    | awk -v len=85 '{ if (length($0) > len) print "..." substr($0, length($0)-len, length($0)); else print; }' \
    | rofi -dmenu -i -width 50 -levenshtein-sort -matching regex -p '[files] '\
    | xargs -d '\n' xdg-open

#+end_src
** snapbackup
:PROPERTIES:
:header-args+: :tangle "~/bin/snapbackup" :shebang "#!/bin/bash"
:END:
#+begin_src sh
# if [ $(/usr/bin/id -u) -ne 0 ]; then
#     echo "Invalid Permissions. Are you root?"
#     exit
# fi
# Basic snapshot-style rsync backup script

# Config
if [ -d "/run/media/dieggsy/wd-passport/" ]; then
    echo "Backing up locally..."
    SSHOPT=""
    DEST="/run/media/dieggsy/wd-passport/backup"
    SSHDEST=""
else
    echo "Backing up over ssh..."
    SSHOPT="-e ssh -zz"
    SSHDEST="dieggsy@panda:"
    DEST="~/wd-passport/backup"
fi
OPT="-avAXh --delete --exclude-from=/home/dieggsy/.rsync-exclude"
LINK="--link-dest=../last"
SRC="/home/dieggsy/"
SNAP="$SSHDEST$DEST"
LAST="$DEST/last"
date=`date "+%Y-%m-%dT%H%M"`

notify-send "Backing up home directory" "to $SNAP"

# Run rsync to create snapshot
rsync $OPT $SSHOPT $LINK $SRC ${SNAP}/$date # | pv -lep -s $(rsync -n $OPT $SSHOPT $LINK $SRC ${SNAP}/$date | awk 'NF' | wc -l) > /dev/null

# Remove symlink to previous snapshot
# Create new symlink to latest snapshot for the next backup to hardlink
if [ -d "/run/media/dieggsy/wd-passport/" ]; then
    rm -f $LAST
    ln -s $DEST/$date $LAST
    find $DEST -maxdepth 1 -type d ! -path $DEST -mtime +30 -exec echo 'Removing' {} + -exec rm -vrf {} +
else
    ssh dieggsy@panda "rm -f $LAST && ln -s ${DEST}/$date $LAST"
    # ssh dieggsy@panda "find $DEST -maxdepth 1 -type d ! -path $DEST ! -path $DEST/$date -mtime -1 -exec echo 'Removing' {} + -exec rm -rf {} +"
    ssh dieggsy@panda "find $DEST -maxdepth 1 -type d ! -path $DEST -mtime +30 -exec echo 'Removing' {} + -exec rm -vrf {} +"
fi
#+end_src
** spectrum_ls
:PROPERTIES:
:header-args+: :tangle ~/bin/spectrum_ls :shebang "#!/usr/bin/env zsh"
:END:
Builds on oh-my-zsh's [[https://github.com/robbyrussell/oh-my-zsh/blob/master/lib/spectrum.zsh#L26][spectrum_ls]].
#+begin_src sh
if [ "$#" = 1 ]; then
  code="$(printf "%03d\n" $1)"
  print -P -- "$code: %F{$code}$code%f"
else;
    for code in $(seq -f "%03g" ${1:-000} ${2:-255}); do
        print -P -- "$code: %F{$code}$code%f"
    done
fi
#+end_src
** spotify
#+begin_src sh :tangle ~/bin/spotify :shebang "#!/bin/sh"
/usr/bin/spotify --force-device-scale-factor=2 $@
#+end_src
* Local vars
Tangles the files asynchronously on save.
#+begin_example
# Local Variables:
# eval: (add-hook 'after-save-hook 'd/async-babel-tangle 'append 'local)
# End:
#+end_example
