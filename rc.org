#+TITLE: rc.org
#+PROPERTY: header-args :comments link :mkdirp yes :results silent

* Intro

This is where I keep the bulk of my dotfiles (that aren't emacs). If it seems
like a bit of a mess to keep it all in one place, note that this is /much/ more
readable in org format than in rendered markdown.

* Contents                                                              :toc:
 - [[#intro][Intro]]
 - [[#config][Config]]
   - [[#profile][.profile]]
   - [[#bashrc][bashrc]]
   - [[#cookiecutterrc][cookiecutterrc]]
   - [[#cvimrc][cvimrc]]
   - [[#darktooththeme-cmus][darktooth.theme (cmus)]]
   - [[#emacsclientdesktop][emacsclient.desktop]]
   - [[#git][git]]
   - [[#hyperjs][hyper.js]]
   - [[#i3][i3]]
   - [[#khdrc][khdrc]]
   - [[#kwmrc][kwmrc]]
   - [[#nanorc][nanorc]]
   - [[#networkmanager_dmenu][networkmanager_dmenu]]
   - [[#peco][peco]]
   - [[#pythonrcpy][pythonrc.py]]
   - [[#rainbowstream][rainbowstream]]
   - [[#ssh][ssh]]
   - [[#termite][termite]]
   - [[#tmux][tmux]]
   - [[#zathurarc][zathurarc]]
   - [[#zsh][zsh]]
 - [[#scripts][Scripts]]
   - [[#dropmite][dropmite]]
   - [[#explorer][explorer]]
   - [[#i3blocks][i3blocks]]
   - [[#masterinstall][masterinstall]]
   - [[#org-tangle][org-tangle]]
   - [[#pass][pass]]
   - [[#playerctl-cmus][playerctl-cmus]]
   - [[#spotify][spotify]]
   - [[#text-pager][text-pager]]
   - [[#updates][updates]]
   - [[#wfname][wfname]]
 - [[#local-vars][Local vars]]

* Config
** .profile
:PROPERTIES:
:header-args+: :tangle ~/.profile
:END:
#+begin_src sh
# if running bash
if [ -n "$BASH_VERSION" ]; then
    # include .bashrc if it exists
    if [ -f "$HOME/.bashrc" ]; then
	. "$HOME/.bashrc"
    fi
fi

# set PATH so it includes user's private bin directories
PATH="$HOME/bin:$HOME/.local/bin:$PATH"

export PATH="$HOME/.cargo/bin:$PATH"
if [ "$(uname)" == "Linux" ]; then
    xcape -e 'Control_L=Escape'
    setxkbmap -option caps:ctrl_modifier
fi
#+end_src
** bashrc
:PROPERTIES:
:header-args+: :tangle ~/.bash_profile
:END:

*** Initial setup
Export hostname. Terminal.app used to get confused about this and show a folder
icon with a question mark. I don't use Terminal.app anymore, but oh well.
#+begin_src sh
#!/usr/bin/env bash
export HOSTNAME=`hostname`
#+END_SRC

Set up the prompt in the "sorin" style from zprezto
#+BEGIN_SRC sh
_dir_chomp () {
    local IFS=/ c=1 n d
    local p=(${1/#$HOME/\~}) r=${p[*]}
    local s=${#r}
    while ((s>$2&&c<${#p[*]}-1))
    do
        d=${p[c]}
        n=1;[[ $d = .* ]]&&n=2
        ((s-=${#d}-n))
        p[c++]=${d:0:n}
    done
    echo "${p[*]}"
}
export PS1='\[\e[1;91m\]$(_dir_chomp "$(pwd)" 1)\[\e[92m\] ❯\[\033[00m\] '
#+end_src

*** Bash options
Use case insensitive file matching and tab completion.
#+begin_src sh
shopt -s nocaseglob
bind 'set completion-ignore-case on'
#+end_src

*** Initialize and source some stuff
[[https://github.com/rupa/z][z]]
#+begin_src sh
source `brew --prefix`/etc/profile.d/z.sh
#+END_SRC

[[https://github.com/nvbn/thefuck][thefuck]]
#+BEGIN_SRC sh
if which thefuck > /dev/null; then eval $(thefuck --alias); fi
#+END_SRC

[[https://github.com/yyuu/pyenv/][pyenv]]
#+BEGIN_SRC sh
if which pyenv > /dev/null; then eval "$(pyenv init -)"; fi
#+end_src

*** Vars
#+begin_src sh
export LS_COLORS=$LS_COLORS:'di=0;36:ex=0;35:ln=1;31'
export CLICOLOR=1
export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx

kwm="koekeishiya/kwm/kwm"
khd="koekeishiya/khd/khd"

export python3version=3.6.0
export python2version=2.7.13
export PYTHONSTARTUP=$HOME/.pythonrc.py

export WWW_HOME='http://google.com'
export RTV_EDITOR='emacsclient -t'
export RTV_URLVIEWER='urlview'

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
    export EDITOR='vim'
else
    export EDITOR="emacsclient -n" # Set emacs as default editor
    export ALTERNATE_EDITOR="vim"
fi
#+end_src

*** Aliases
#+begin_src sh
alias apps="cd /Applications"
alias cask="brew cask"
alias config="$EDITOR ~/dotfiles/config/emacs.d/config.org"
alias def='dict -d gcide'
alias desk="cd /Users/diego/Desktop"
alias docs="cd /Users/diego/Documents/"
alias down="cd /Users/diego/Downloads/"
alias drive="cd /Users/diego/Google\ Drive"
alias drop="cd /Users/diego/Dropbox\ \(MIT\)"
alias edit="emacsclient -n"
alias editv="emacsclient -t"
alias f='find . -iname'
alias fd='find . -type d -iname'
alias ff='find . -type f -iname'
alias filecount="ls -1 | wc -l"
alias git=hub
alias startkwm="brew services start $kwm"
alias stopkwm="brew services stop $kwm"
alias restartkwm="brew services restart $kwm"
alias startkhd="brew services start $khd"
alias stopkhd="brew services stop $khd"
alias restartkhd="brew services restart $khd"
alias ls='ls -NX --group-directories-first --color=always'
alias lst="ls -t"
alias math='/Applications/Mathematica.app/Contents/MacOS/WolframKernel'
alias pep8="pep8 --first --ignore=E129,W503,E226"
alias piphere="pip install --target=./"
alias printers="lpstat -p | awk '{print $2}'"
alias resetb="source ~/.zshrc"
alias resetwifi="networksetup -setairportpower en0 off; sleep 2;"\
"networksetup -setairportpower en0 on"
alias starwars="telnet towel.blinkenlights.nl" # heh
alias sudo='sudo '                             # recognize aliases
alias sz="du -hs"                              # get folder/file size
alias zshrc="$EDITOR ~/dotfiles/config/zshrc"
alias vimrc="$ALTERNATE_EDITOR ~/dotfiles/config/vimrc"
#+end_src

*** Functions
#+begin_src sh
pip-fromfile() {
    <$1 xargs pip install
}

athena(){
    echo -n "Username: "
    read username
    ssh -Y "$username@athena.dialup.mit.edu"
}

mkexec(){
    chmod a+x "$@"
}

pythonexec(){
    touch "$*"
    echo '#!/usr/local/bin/python3' | cat - "$*" > temp && mv temp "$*"
    sudo chmod a+x "$*"
    emacsclient -n "$*"
}

# Create/edit python script
pythonscript(){
    touch "$*"
    echo '#!/usr/local/bin/python3' | cat - "$*" > temp && mv temp "$*"
    emacsclient -n "$*"
}

# View only mode in emacs
ev() {
    emacsclient -n --eval "(find-file-read-only \"$1\")"
}

# Edit Python 3 files
bam(){
    emacsclient -n "$1" \
                --eval '(and (split-window-right) (windmove-right))' \
                -f ipython \
                --eval '(windmove-left)'
}

# Edit Python 2 files
ham(){
    emacsclient -n "$1" \
                --eval '(and (split-window-right) (windmove-right))' \
                -f ipython2 \
                --eval '(windmove-left)'
}

pdftif() {
    gs -dNOPAUSE -q -r500 \
       -sDEVICE=tiffg4 \
       -dBATCH \
       -dFirstPage=$2 \
       -dLastPage=$3 \
       -sOutputFile=$4 \
       $1
}

ocrpdf(){
    echo "Converting pdf to png..."
    gs -dNOPAUSE -q -r500 \
       -sDEVICE=tiffg4 \
       -dBATCH \
       -sOutputFile=$TMPDIR/tempocr.tif \
       $1
    echo "Running tesseract on pngs..."
    tesseract $TMPDIR/tempocr.tif $2 >/dev/null 2>&1
}

ocrpdf2(){
    echo "Converting pdf to png..."
    convert -density 500 $1 $TMPDIR/tempocr.png
    count=0
    echo "Running tesseract on pngs..."
    while [ -f $TMPDIR/tempocr-$count.png ]; do
        echo "    Page $count"
        tesseract $TMPDIR/tempocr-$count.png $TMPDIR/tempocr >/dev/null 2>&1
        cat $TMPDIR/tempocr.txt >> $2
        let count=count+1
    done
    echo "Created output file $2"
}

psetzip (){
    zip -r "$1".zip $1\
        -x '*.git*' \
        -x '*.ipynb_checkpoints*' \
        -x '*.pyc*' \
        -x '*.DS_Store*' \
        -x '*~*' \
        -x "*__pycache__*"
}

calc(){
    emacs --batch --eval "(message (calc-eval \"$1\"))"
}
#+end_src

*** Path Stuff
#+begin_src sh
export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"
#+end_src
** cookiecutterrc
:PROPERTIES:
:header-args+: :tangle ~/.cookiecutterrc
:END:

#+begin_src conf
# -*- mode: conf -*-
default_context:
    full_name: "Diego A. Mundo"
    email: "diegoamundo@gmail.com"
    github_username: "therockmandolinist"
    bundle_id_root: "com.therockmandolinist"
cookiecutters_dir: "~/.cookiecutters/"
#+end_src
** cvimrc
:PROPERTIES:
:header-args+: :tangle ~/.cvimrc :comments no
:END:

#+begin_src vimrc
let configpath='/Users/diego/.cvimrc'
set localconfig
set smoothscroll
set noautofocus

let defaultengine = "duckduckgo"
let hintcharacters = "aoeuidhtns"
let homedirectory = "/Users/diego"
let searchlimit = 9

let blacklists = ['*://inbox.google.com/*']

map J nextTab
map K previousTab
#+end_src
** darktooth.theme (cmus)
:PROPERTIES:
:header-args+: :tangle ~/.config/cmus/darktooth.theme
:END:
#+begin_src conf
# Directory colors
set color_win_dir=108

# Normal text
set color_win_fg=default

# Window background color.
set color_win_bg=0

# Command line color.
set color_cmdline_bg=0
set color_cmdline_fg=6

# Color of error messages displayed on the command line.
set color_error=lightred

# Color of informational messages displayed on the command line.
set color_info=lightgreen

# Color of the separator line between windows in view (1).
set color_separator=246

# Color of window titles (topmost line of the screen).
set color_win_title_bg=234
set color_win_title_fg=12

# Status line color (shows remaining time and playback options).
set color_statusline_bg=0
set color_statusline_fg=10

# Color of currently playing track.
set color_win_cur=009

# Color of the line displaying currently playing track.
set color_titleline_bg=234
set color_titleline_fg=12

# Color of the selected row which is also the currently playing track in active window.
set color_win_cur_sel_bg=237
set color_win_cur_sel_fg=9

# Color of the selected row which is also the currently playing track in inactive window.
set color_win_inactive_cur_sel_bg=236
set color_win_inactive_cur_sel_fg=9

# Color of selected row in active window.
set color_win_sel_bg=237
set color_win_sel_fg=default

# Color of selected row in inactive window.
set color_win_inactive_sel_bg=236
set color_win_inactive_sel_fg=default
#+end_src
** emacsclient.desktop
:PROPERTIES:
:header-args+: tangle: (when (eq system-type 'gnu/linux)  "~/.local/share/applications/emacsclient.desktop")
:END:
#+begin_src conf
[Desktop Entry]
Name=Emacs Client
Exec=emacsclient -n %u
Icon=emacs-icon
Type=Application
Terminal=false
#+end_src
** git
*** gitconfig
:PROPERTIES:
:header-args+: :tangle ~/.gitconfig
:END:
**** media
#+begin_src conf
[filter "media"]
	required = true
	clean = git media clean %f
	smudge = git media smudge %f
#+end_src
**** user
#+begin_src conf
[user]
	name = therockmandolinist
	email = diegoamundo@gmail.com
	signingkey = AEAC5CE8E1F933F0
#+end_src
**** filter
#+begin_src conf
[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true
#+end_src
**** core
#+begin_src conf
[core]
	editor = emacsclient -t
	excludesfile = ~/.gitignore
	pager = "less"
#+end_src
**** credential
#+begin_src conf
[credential]
	helper = /usr/local/bin/pass-git-helper
#+end_src
**** alias
#+begin_src conf
[alias]
	add-commit = !git add -A && git commit
	eclipse = !git fetch upstream && git rebase -s recursive -X theirs upstream/master
	gconfig = config --global
	lconfig = config --local
	mypull = pull -s recursive -X ours
	myrebase = rebase -s recursive -X theirs
    optimize = "!f() { git reflog expire --all --expire=now && git gc --prune=now --aggressive; }; f"
	plog = log --graph --pretty=format:'%C(bold black)%h%Creset - %<(50,trunc)%C(bold normal)%s%Creset %<(20)%C(bold green)%an%Creset %<(15)%C(bold red)%cr%Creset%C(bold yellow)%d%Creset' --abbrev-commit
	plog-nocolor = log --graph --pretty=format:'%h - %<(50,trunc)%s %<(20)%an %<(15)%cr%d' --abbrev-commit
	update-from-upstream = pull --rebase -s recursive -X theirs upstream/master
	aliases = config --get-regexp '^alias\\.'
#+end_src
**** http
#+begin_src conf
[http]
	postBuffer = 524288000
#+end_src
**** color
#+begin_src conf
[color]
	ui = auto
[color "status"]
    added = green bold
    changed = red bold
    untracked = red bold
#+end_src
**** http
#+begin_src conf
[push]
	followTags = true
#+end_src
**** status
#+begin_src conf
[status]
	showUntrackedFiles = all
#+end_src
**** commit
#+begin_src conf
[commit]
	gpgsign = true
#+end_src
*** gitignore
:PROPERTIES:
:header-args+: :tangle ~/.gitignore
:END:

#+begin_src conf
.DS\_Store
*.pyc
__pychache__
*.alfredworkflow
#+end_src
** hyper.js
:PROPERTIES:
:header-args+: :tangle ~/.hyper.js
:END:

*** Font
#+BEGIN_SRC js
module.exports = {
    config: {
        // default font size in pixels for all tabs
        fontSize: 12,

        // font family with optional fallbacks
        fontFamily: 'Iosevka,Input, Menlo, "DejaVu Sans Mono", "Lucida Console", monospace',
#+END_SRC

*** Cursor
#+BEGIN_SRC js
        // terminal cursor background color and opacity (hex, rgb, hsl, hsv, hwb or cmyk)
        cursorColor: '#e6e5e5',

        // `BEAM` for |, `UNDERLINE` for _, `BLOCK` for █
        cursorShape: 'BEAM',

#+END_SRC

*** Basic colors
#+BEGIN_SRC js
        // color of the text
        foregroundColor: '#fdf4c1',

        // terminal background color
        backgroundColor: '#282828',

        // border color (window, tabs)
        borderColor: '#282828',
#+END_SRC

*** CSS
#+BEGIN_SRC js
        // custom css to embed in the main window
        css: `
        .tab_active {
            color: #fdf4c1 !important;
            // border-bottom: 1px solid #b8bb26 !important;
            border-bottom: 1px solid #d3869b !important;
        }

        .tab_tab{
            color: #fdf4c1 !important;
        }
        `,

        // custom css to embed in the terminal window
        termCSS: `
        .cursor-node{
            border: none !important;
            border-left: 1px solid #fdf4c1 !important;
        }
        `,

#+END_SRC

*** Padding
#+BEGIN_SRC js
        // custom padding (css format, i.e.: `top right bottom left`)
        padding: '5px 10px 0px 10px',
#+END_SRC

*** Color list
#+BEGIN_SRC js
        // the full list. if you're going to provide the full color palette,
        // including the 6 x 6 color cubes and the grayscale map, just provide
        // an array here instead of a color map object
        colors: {
            black: '#1a1a1a',
            red: '#9d0006',
            green: '#79740e',
            yellow: '#b57614',
            blue: '#076678',
            magenta: '#8f3f71',
            cyan: '#00a7af',
            white: '#bdae93',
            // black: '#686868',
            // red: '#fb4933',
            // green: '#b8bb26',
            // yellow: '#fabd2f',
            // blue: '#83a598',
            // magenta: '#d3869b',
            // cyan: '#3fd7e5',
            // white: '#fdf4c1',
            lightBlack: '#686868',
            lightRed: '#fb4933',
            lightGreen: '#b8bb26',
            lightYellow: '#fabd2f',
            lightBlue: '#83a598',
            lightMagenta: '#d3869b',
            lightCyan: '#3fd7e5',
            lightWhite: '#fdf4c1'
        },
#+END_SRC

*** Options
#+BEGIN_SRC js
        // the shell to run when spawning a new session (i.e. /usr/local/bin/fish)
        // if left empty, your system's login shell will be used by default
        shell: '',

        // for setting shell arguments (i.e. for using interactive shellArgs: ['-i'])
        // by default ['--login'] will be used
        shellArgs: ['--login'],

        // for environment variables
        env: {},

        // set to false for no bell
        bell: false,

        // if true, selected text will automatically be copied to the clipboard
        copyOnSelect: false,

        // URL to custom bell
        // bellSoundURL: 'http://example.com/bell.mp3',
#+END_SRC

*** [[https://github.com/rickgbw/hyperterm-overlay][overlay]]
#+BEGIN_SRC js
        // for advanced config flags please refer to https://hyper.is/#cfg
        overlay: {
            alwaysOnTop: true,
            animate: true,
            hasShadow: true,
            hideDock: false,
            hideOnBlur: true,
            hotkeys: ['Command+Space'],
            position: 'top',
            primaryDisplay: false,
            resizable: false,
            startAlone: false,
            startup: false,
            size: 0.4,
            tray: false,
            unique: false
        },
        },

#+END_SRC

*** Plugins
#+BEGIN_SRC js
    // a list of plugins to fetch and install from npm
    // format: [@org/]project[#version]
    // examples:
    //   `hyperpower`
    //   `@company/project`
    //   `project#1.0.1`
    plugins: [
        'hypercwd',
        'hyperterm-blink',
        'hyperterm-lastpass',
        'hyperterm-overlay'
    ],

#+END_SRC

*** Local Plugins
#+BEGIN_SRC js
    // in development, you can create a directory under
    // `~/.hyper_plugins/local/` and include it here
    // to load it and avoid it being `npm install`ed
    localPlugins: []
};
#+end_src
** i3
*** i3
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/i3/config")
:END:
#+begin_src sh
# This file has been auto-generated by i3-config-wizard(1).
# It will not be overwritten, so edit it as you like.
#
# Should you change your keyboard layout some time, delete
# this file and re-run i3-config-wizard(1).
#

# i3 config file (v4)
#
# Please see http://i3wm.org/docs/userguide.html for a complete reference!

set $mod Mod4

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
font pango:Iosevka 8

# This font is widely installed, provides lots of unicode glyphs, right-to-left
# text rendering and scalability on retina/hidpi displays (thanks to pango).
#font pango:DejaVu Sans Mono 8

# Before i3 v4.8, we used to recommend this one as the default:
# font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1
# The font above is very space-efficient, that is, it looks good, sharp and
# clear in small sizes. However, its unicode glyph coverage is limited, the old
# X core fonts rendering does not support right-to-left and this being a bitmap
# font, it doesn’t scale on retina/hidpi displays.

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# start a terminal
# bindsym $mod+Return exec 'termite'

# kill focused window
bindsym $mod+Shift+apostrophe kill

# start dmenu (a program launcher)
bindsym $mod+e exec rofi -show run -font "Iosevka 25"
bindsym Mod1+space exec "rofi -combi-modi window,run -show combi -modi combi -font 'Iosevka 25'"
bindsym $mod+p exec "~/.password-store/.extensions/rofi.bash"
bindsym $mod+c exec "rofi -modi 'clipboard:greenclip print' -show clipboard -font 'Iosevka 25'"
# bindsym $mod+c exec "rofi -switchers 'file:rofi-file-browser.sh' -show file -font 'Iosevka 25'"
# There also is the (new) i3-dmenu-desktop which only displays applications
# shipping a .desktop file. It is a wrapper around dmenu, so you need that
# installed.
# bindsym $mod+d exec --no-startup-id i3-dmenu-desktop

bindsym $mod+minus move scratchpad
bindsym $mod+shift+minus scratchpad show

for_window [title="^emacs@Ragnarok$"] floating enable;
for_window [title="^emacs@Ragnarok$"] move scratchpad; [title="^emacs@Ragnarok$"] scratchpad show; move scratchpad
bindsym $mod+space [title="^emacs@Ragnarok$"] scratchpad show

exec --no-startup-id termite --name=dropmite
for_window [instance="dropmite"] floating enable;
# for_window [instance="dropmite"] move scratchpad; [instance="dropmite"] scratchpad show; resize shrink height 95px; resize grow width 1400px; move position center; move up 420px; move scratchpad
for_window [instance="dropmite"] move scratchpad; [instance="dropmite"] scratchpad show; resize set 2446 607; move position center; move up 420px; move scratchpad
bindsym $mod+Return [instance="dropmite"] scratchpad show

exec --no-startup-id termite -t ranger -e ranger --name=explorer
for_window [instance="explorer"] floating enable;
for_window [instance="explorer"] move scratchpad; [instance="explorer"] scratchpad show; resize grow width 1000px; move position center; move scratchpad
bindsym $mod+f [instance="explorer"] scratchpad show
# bindsym $mod+f exec rofi -show fb -modi fb:~/bin/rofi-file-browser -font "Iosevka 25"

# change focus
bindsym $mod+h focus left
bindsym $mod+t focus down
bindsym $mod+n focus up
bindsym $mod+s focus right

# alternatively, you can use the cursor keys:
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# move focused window
bindsym $mod+Shift+h move left
bindsym $mod+Shift+t move down
bindsym $mod+Shift+n move up
bindsym $mod+Shift+s move right
bindsym $mod+Shift+c move position center

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# split in horizontal orientation
bindsym $mod+d split h

# split in vertical orientation
bindsym $mod+k split v

# enter fullscreen mode for the focused container
bindsym $mod+u fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+o layout stacking
bindsym $mod+comma layout tabbed
bindsym $mod+period layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
# bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent

# focus the child container
#bindsym $mod+d focus child

# switch to workspace
bindsym $mod+1 workspace 1
bindsym $mod+2 workspace 2
bindsym $mod+3 workspace 3
bindsym $mod+4 workspace 4
bindsym $mod+5 workspace 5
bindsym $mod+6 workspace 6
bindsym $mod+7 workspace 7
bindsym $mod+8 workspace 8
bindsym $mod+9 workspace 9
bindsym $mod+0 workspace 10

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace 1
bindsym $mod+Shift+2 move container to workspace 2
bindsym $mod+Shift+3 move container to workspace 3
bindsym $mod+Shift+4 move container to workspace 4
bindsym $mod+Shift+5 move container to workspace 5
bindsym $mod+Shift+6 move container to workspace 6
bindsym $mod+Shift+7 move container to workspace 7
bindsym $mod+Shift+8 move container to workspace 8
bindsym $mod+Shift+9 move container to workspace 9
bindsym $mod+Shift+0 move container to workspace 10

# reload the configuration file
bindsym $mod+Shift+j reload
# reload X11
bindsym $mod+Shift+x exec xrdb ~/.Xresources
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+p restart
# exit i3 (logs you out of your X session)
bindsym $mod+Shift+period exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -b 'Yes, exit i3' 'i3-msg exit'"

# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym h resize shrink width 10 px or 10 ppt
        bindsym t resize grow height 10 px or 10 ppt
        bindsym n resize shrink height 10 px or 10 ppt
        bindsym s resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape
        bindsym Return mode "default"
        bindsym Escape mode "default"
}

bindsym $mod+r mode "resize"

# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
bar {
    status_command i3blocks
    position top
    font pango:Iosevka, FontAwesome 8.5
    tray_output none
    colors {
        background #282828
        statusline #fdf4c1
        focused_workspace #076678 #076678 #FDF4c1
        active_workspace   #333333 #5f676a #FDF4c1
        inactive_workspace #222222 #222222 #888888
        urgent_workspace   #2f343a #901A1E #FDF4c1
        binding_mode       #2f343a #901A1E #FDF4c1
    }
}

client.focused #EBDBD2 #EBDBD2 #2D2D2D #3fd7e5
client.focused_inactive #2d2d2d #282828 #dcdcdc #484e50
client.unfocused        #2D2D2D #2d2d2d #dcdcdc #292d2e
client.urgent #2D2D2D #2D2D2D #dcdcdc #901A1E

gaps inner 30
gaps outer 0
new_window 1pixel

# some controls
bindsym XF86KbdBrightnessDown exec kb-light - && pkill -RTMIN+2 i3blocks
bindsym XF86KbdBrightnessUp exec kb-light + && pkill -RTMIN+2 i3blocks

bindsym XF86MonBrightnessUp exec xbacklight +2 && pkill -RTMIN+2 i3blocks
bindsym XF86MonBrightnessDown exec xbacklight -2 && pkill -RTMIN+2 i3blocks

bindsym XF86AudioMute exec amixer -D pulse sset Master toggle && pkill -RTMIN+3 i3blocks
bindsym XF86AudioLowerVolume exec amixer -D pulse sset Master 2%- && pkill -RTMIN+3 i3blocks
bindsym XF86AudioRaiseVolume exec amixer -D pulse sset Master 2%+ && pkill -RTMIN+3 i3blocks

bindsym XF86AudioPrev exec playerctl-cmus previous && pkill -RTMIN+1 i3blocks
bindsym XF86AudioNext exec playerctl-cmus next && pkill -RTMIN+1 i3blocks
bindsym XF86AudioPlay exec playerctl-cmus play-pause && pkill -RTMIN+1 i3blocks

bindsym --release XF86LaunchB exec "scrot -s ~/Pictures/Screenshots/%Y-%m-%d_%H:%M:%S.png"
bindsym Shift+XF86LaunchB exec "scrot -ub ~/Pictures/Screenshots/%Y-%m-%d_%H:%M:%S.png"
bindsym XF86LaunchA exec "scrot ~/Pictures/Screenshots/%Y-%m-%d_%H:%M:%S.png"

exec dropbox start
exec emacs
exec sh ~/.fehbg
exec greenclip daemon
exec nm-applet
exec --no-startup-id /home/diego/.ghq/github.com/olemartinorg/i3-alternating-layout/alternating_layouts.py
exec unclutter
exec xset s off
exec setxkbmap dvorak
#+end_src
*** i3blocks
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.i3blocks.conf")
:END:
#+begin_src conf
[focused window]
command=xtitle -s -t 75 -f "  %s\n"
interval=persist

[music]
command=~/bin/i3blocks/music
interval=5
signal=1

[separator]

[Disk]
command=~/bin/i3blocks/disk /
interval=20
# color=#766e6b

[separator]

[Brightness]
command=~/bin/i3blocks/bright
interval=once
signal=2

[separator]

[wifi]
command=~/bin/i3blocks/wifi
interval=10

[separator]


# [Ram]
# command=~/bin/i3blocks/mem.sh -m
# interval=3

[separator]

# [Temp]
# command=~/bin/i3blocks/temp.sh
# interval=1

[separator]

[Vol]
command=~/bin/i3blocks/volume
interval=once
signal=3

[separator]

[layout]
command=~/bin/i3blocks/layout
interval=once

[separator]

[Bat]
command=~/bin/i3blocks/battery
interval=30
# color=#3d97b8

[separator]

[Time]
command=~/bin/i3blocks/date
interval=10
#+end_src
*** i3status
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/i3status/config")
:END:
#+begin_src conf
# i3status configuration file.
# see "man i3status" for documentation.

# It is important that this file is edited as UTF-8.
# The following line should contain a sharp s:
# ß
# If the above line is not correctly displayed, fix your editor first!

general {
colors = true
interval = 5
color_good='#b8bb26'
color_bad='#fb4933'
color_degraded='#fabd2f'
}

# order += "ipv6"
order += "disk /"
# order += "run_watch DHCP"
# order += "run_watch VPN"
order += "wireless _first_"
# order += "ethernet _first_"
order+= "volume master"
order += "battery 0"
# order += "load"
order += "tztime local"

wireless _first_ {
# format_up = "  %essid %ip"
format_up = "  %essid"
format_down = " None"
}

ethernet _first_ {
# if you use %speed, i3status requires root privileges
format_up = "E: %ip (%speed)"
format_down = "E: down"
}

battery 0 {
# format = "%status  %percentage %remaining"
format = "%status  %percentage"
status_chr = ""
status_bat = ""
status_full = ""
integer_battery_capacity=true
last_full_capacity = true
threshold_type = time
low_threshold = 10
hide_seconds = true
# format = " %status %percentage %remaining"
}

run_watch DHCP {
pidfile = "/var/run/dhclient*.pid"
}

run_watch VPN {
pidfile = "/var/run/vpnc/pid"
}

tztime local {
format = "  %Y-%m-%d %H:%M"
}

load {
format = "%1min"
}

disk "/" {
format = "  %avail"
}

volume master {
format = " %volume"
format_muted = "  %volume"
device = "pulse:1"
}
#+end_src
** khdrc
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'darwin) "~/.khdrc")
:END:

*** Notes
#+begin_src conf
# -*- mode: conf -*-
# sample config for khd

# NOTE(koekeishiya): A bind is written in the form:
#                   <keysym> [!] [<app list>] [->] : <command>
#                   where
#                       <keysym>   = mode + mod + ... + mod - literal
#                       <keysym>   = mode + mod + ... + mod - keycode (must have 0x prefix)
#                       <keysym>   = mode + mod + ... + mod (modifier only binding)
#
#                       [<app,
#                         app,     = optional list '[app1, ..., appN]' of applications
#                         app>]      that this bind will be activated for. if the
#                                    focused application is not contained in this list,
#                                    the associated command will not be triggered, and
#                                    the keypress will be passed through as normal.
#
#                       [!]        = optional operator '!' negates the behaviour when a
#                                    list of applications is given. this marks the bind
#                                    as 'Hotkey_Exclude', causing the bind to not work
#                                    when the focused application is in the given list.
#
#                       [->]       = optional operator '->' that marks this bind as
#                                    'passthrough'. this causes the key to be passed
#                                    through to the system, instead of being consumed.
#
#                       <command>  = command is executed through '$SHELL -c' and
#                                    follows valid shell syntax. if the $SHELL environment
#                                    variable is not set, it will default to '/bin/bash'.
#                                    when bash is used, the ';' delimeter can be specified
#                                    to chain commands.
#
#                                    to allow a command to extend into multiple lines,
#                                    prepend '\' at the end of the previous line.
#
#                                    an EOL character signifies the end of the bind.

# NOTE(koekeishiya) Example of passthrough
# cmd - m -> : echo "alert and minimize window" | alerter -title Test passthrough -timeout 2

# NOTE(koekeishiya) Example of app list
# alt - e [
#           iTerm2,
#           Terminal,
#           HyperTerm
#         ]
#         : echo "so this is how deep the rabbit hole goes.." |\
#           alerter -title Test passthrough -timeout 2

# NOTE(koekeishiya) Example of negated app list
# alt - e [
#           iTerm2,
#           Terminal,
#           HyperTerm
#         ] !
#         : echo "blue pill, i choose you!" |\
#           alerter -title Test passthrough -timeout 2

# NOTE(koekeishiya) Modifier only binding
# left shift    -> (    right shift   -> )
# left cmd      -> {    right cmd     -> }

# khd mod_trigger_timeout 0.1
# lshift : khd -p "shift - 8"
# rshift : khd -p "shift - 9"
# lcmd   : khd -p "shift + alt - 8"
# rcmd   : khd -p "shift + alt - 9"

# TODO(koekeishiya): possibly allow combined syntax such as
# [switcher,ytd] + ctrl - f : khd -e "mode activate default"
#+end_src

*** Kwm
#+begin_src conf
# enable kwm compatibility mode
khd kwm on
#+end_src
**** Borders
#+begin_src conf
# set border color for different modes
# khd mode default color 0xddd5c4a1
khd mode default color 0x00d5c4a1
khd mode switcher color 0xddbdd322
khd mode swap color 0xdd458588
khd mode tree color 0xddfabd2f
khd mode space color 0xddb16286
khd mode info color 0xddcd950c
#+end_src

**** Toggle modes
#+begin_src conf
# toggle between modes
cmd + alt - f         :   khd -e "mode activate switcher"
switcher - escape     :   khd -e "mode activate default"
swap - escape         :   khd -e "mode activate default"
space - escape        :   khd -e "mode activate default"
tree - escape         :   khd -e "mode activate default"
info - escape          :   khd -e "mode activate default"

switcher - m            :   khd -e "mode activate swap"
switcher - s            :   khd -e "mode activate space"
switcher - t            :   khd -e "mode activate tree"
switcher - q            :   khd -e "mode activate info"
#+end_src
**** Switcher mode
#+begin_src conf
# switcher mode
switcher - r            :   khd -e "reload" # reload config

switcher - return       :   open -na /Applications/Hyper.app;\
                            khd -e "mode activate default"

switcher - h            :   kwmc window -f west
switcher - l            :   kwmc window -f east
switcher - j            :   kwmc window -f south
switcher - k            :   kwmc window -f north
switcher - n            :   kwmc window -fm prev
switcher - m            :   kwmc window -fm next

switcher - 1            :   kwmc space -fExperimental 1
switcher - 2            :   kwmc space -fExperimental 2
switcher - 3            :   kwmc space -fExperimental 3
switcher - 4            :   kwmc space -fExperimental 4
switcher - 5            :   kwmc space -fExperimental 5
switcher - 6            :   kwmc space -fExperimental 6

switcher - z            :   kwmc space -fExperimental left
switcher - c            :   kwmc space -fExperimental right
switcher - f            :   kwmc space -fExperimental previous

switcher + shift - z    :   kwmc window -m space left;\
                            kwmc space -fExperimental left

switcher + shift - c    :   kwmc window -m space right;\
                            kwmc space -fExperimental right

switcher + shift - 1    :   kwmc display -f 0
switcher + shift - 2    :   kwmc display -f 1
switcher + shift - 3    :   kwmc display -f 2
#+end_src
**** Swap mode
#+begin_src conf
# swap mode
swap - h                :   kwmc window -s west
swap - j                :   kwmc window -s south
swap - k                :   kwmc window -s north
swap - l                :   kwmc window -s east
swap - m                :   kwmc window -s mark

swap + shift - k        :   kwmc window -m north
swap + shift - l        :   kwmc window -m east
swap + shift - j        :   kwmc window -m south
swap + shift - h        :   kwmc window -m west
swap + shift - m        :   kwmc window -m mark

swap - 1                :   kwmc window -m space 1
swap - 2                :   kwmc window -m space 2
swap - 3                :   kwmc window -m space 3
swap - 4                :   kwmc window -m space 4
swap - 5                :   kwmc window -m space 5

swap - z                :   kwmc window -m space left
swap - c                :   kwmc window -m space right

swap + shift - 1        :   kwmc window -m display 0
swap + shift - 2        :   kwmc window -m display 1
swap + shift - 3        :   kwmc window -m display 2

#+end_src
**** Space mode
#+begin_src conf
# space mode
space - b               :   kwmc space -t bsp
space - m               :   kwmc space -t monocle
space - f               :   kwmc space -t float

space - x               :   kwmc space -g increase horizontal
space - y               :   kwmc space -g increase vertical

space + shift - x       :   kwmc space -g decrease horizontal
space + shift - y       :   kwmc space -g decrease vertical

space - left            :   kwmc space -p increase left
space - right           :   kwmc space -p increase right
space - up              :   kwmc space -p increase top
space - down            :   kwmc space -p increase bottom
space - p               :   kwmc space -p increase all

space + shift - left    :   kwmc space -p decrease left
space + shift - right   :   kwmc space -p decrease right
space + shift - up      :   kwmc space -p decrease top
space + shift - down    :   kwmc space -p decrease bottom
space + shift - p       :   kwmc space -p decrease all
#+end_src
**** Tree mode
#+begin_src conf
# tree mode
tree - f                :   kwmc window -z fullscreen
tree - d                :   kwmc window -z parent
tree - w                :   kwmc window -t focused
tree - r         	    :   kwmc tree rotate 90

tree - s                :   kwmc window -c split - mode toggle;\
                            khd -e "mode activate default"

tree - c                :   kwmc window -c type toggle;\
                            khd -e "mode activate default"

tree - h                :   kwmc window -c expand 0.05 west
tree - j                :   kwmc window -c expand 0.05 south
tree - k                :   kwmc window -c expand 0.05 north
tree - l                :   kwmc window -c expand 0.05 east
tree + shift - h        :   kwmc window -c reduce 0.05 west
tree + shift - j        :   kwmc window -c reduce 0.05 south
tree + shift - k        :   kwmc window -c reduce 0.05 north
tree + shift - l        :   kwmc window -c reduce 0.05 east

tree - p                :   kwmc tree -pseudo create
tree + shift - p        :   kwmc tree -pseudo destroy

tree - o                :   kwmc window -s prev
tree + shift - o        :   kwmc window -s next
#+end_src
**** Default
#+begin_src conf
# default
cmd + alt + ctrl - m    :   kwmc window -mk focused
cmd + alt + ctrl - h    :   kwmc window -mk west wrap
cmd + alt + ctrl - l    :   kwmc window -mk east wrap
cmd + alt + ctrl - j    :   kwmc window -mk south wrap
cmd + alt + ctrl - k    :   kwmc window -mk north wrap

cmd - 0x2A              :   khd -w "aasvi93@hotmail.com"
cmd - 7                 :   khd -w "\\"
cmd - 8                 :   khd -w "{"
cmd - 9                 :   khd -w "}"
#+end_src
** kwmrc
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'darwin) "~/.kwm/kwmrc")
:END:

*** Notes
#+begin_src conf
# -*- mode: conf -*-
# This is a sample config for Kwm

# The following statements can be used to set Kwms internal directory structure.

#     This is the root folder for Kwms files, the only thing this actually
#     specifies is the location of the 'init' script which Kwm runs upon startup.
#     Defaults to $HOME/.kwm

#         kwm_home /path/to/.kwm

#     This is the root folder in which all files included using 'include' must reside.
#     Defaults to $HOME/.kwm

#         kwm_include /path/to/.kwm/include

#     This is the folder in which all bsp-layouts managed by 'tree load' and 'tree save'
#     is loaded from / saved to. Defaults to $HOME/.kwm/layouts

#         kwm_layouts /path/to/.kwm/layouts

# Commands prefixed with 'kwmc' will call local functions corresponding to the
# kwmc syntax.

# To run an external program or command, use the prefix 'exec' followed by
# command.  e.g 'exec mvim' would open macvim

# Read file and execute commands as if they were written inside kwmrc.

# include filename

# e.g: window-rules in a separate file called 'rules'
#     include rules
#+end_src
*** Behavior
#+begin_src conf
# Default tiling mode for Kwm (bsp | monocle | float)
kwmc config tiling bsp

# Automatically float windows that fail to resize
kwmc config float-non-resizable on

# Automatically resize the window to its container
kwmc config lock-to-container on

# Center window when made floating
kwmc config center-on-float on

# Allow window focus to wrap-around
kwmc config cycle-focus on

# Override default settings for space 1 on screen 0

#    kwmc config space 0 1 mode monocle
#    kwmc config space 0 1 padding 100 100 100 100
#    kwmc config space 0 1 gap 40 40

# Override default settings for screen 1

#    kwmc config display 1 mode bsp
#    kwmc config display 1 padding 100 100 100 100
#    kwmc config display 1 gap 40 40

# Set default container split-ratio
kwmc config split-ratio 0.5

# New splits become the left leaf-node
kwmc config spawn left
#+end_src
*** Mouse
#+begin_src conf
# Set focus-follows-mouse-mode to autoraise
kwmc config focus-follows-mouse on

# Focus-follows-mouse is temporarily disabled when
# a floating window has focus
kwmc config standby-on-float on

# The mouse will automatically move to the center
# of the focused window
kwmc config mouse-follows-focus on

# Allows a window to be moved by dragging, when a modifier key and left-click
# is held down.

# Allows a window to be resized by dragging when a modifier key and right-click
# is held down.
kwmc config mouse-drag on

# The modifier keys to be held down to initiate mouse-drag
kwmc config mouse-drag mod shift+ctrl
#+end_src
*** Rules
#+begin_src conf
# Add custom tiling rules for applications that does not get tiled by Kwm by
# default.  This is because some applications do not have the AXWindowRole and
# AXStandardWindowSubRole
kwmc rule owner="iTerm2" properties={role="AXDialog"}
kwmc rule owner="Emacs" properties={role="AXStandardWindow"}

# The following commands create rules that blacklists an application from Kwms
# tiling

#     kwmc rule owner="Steam" properties={float="true"}
#     kwmc rule owner="Photoshop" properties={float="true"}
kwmc rule owner="LICEcap" properties={float="true"}

# The following command creates a rule that captures an application to the
# given screen, if the screen exists.

#    kwmc rule owner="iTunes" properties={display="1"}
#+end_src
*** Appearance
#+begin_src conf
# Set default values for screen padding
kwmc config padding 40 20 20 20

# Set default values for container gaps
kwmc config gap 15 15

# Enable border for focused window
kwmc config border focused off
kwmc config border focused size 2

# kwmc config border focused color 0xFFBDAE93
kwmc config border focused color 0xFFBDAE93
kwmc config border focused radius 6

# Enable border for marked window
kwmc config border marked on
kwmc config border marked size 2
# kwmc config border marked color 0xFFCC5577
kwmc config border marked color 0xFFCC5577
kwmc config border marked radius 6
#+end_src
** nanorc
:PROPERTIES:
:header-args+: :tangle ~/.nanorc
:END:
Lol
#+begin_src conf
include "~/.nano/*.nanorc"
#+end_src
** networkmanager_dmenu
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/networkmanager-dmenu/config.ini")
:END:
#+begin_src conf
[dmenu]
dmenu_command = rofi -font 'Iosevka 25'
p = [Networks]
# # Note that dmenu_command can contain arguments as well like `rofi -width 30`
# # Rofi and dmenu are set to case insensitive by default `-i`
# l = number of lines to display, defaults to number of total network options
# fn = font string
# nb = normal background (name, #RGB, or #RRGGBB)
# nf = normal foreground
# sb = selected background
# sf = selected foreground
# b =  (just set to empty value and menu will appear at the bottom
# m = number of monitor to display on
# p = Custom Prompt for the networks menu
# pinentry = Pinentry command

[editor]
terminal = termite
gui_if_available = True
# terminal = <name of terminal program>
# gui_if_available = <True or False>
#+end_src
** peco
:PROPERTIES:
:header-args+: :tangle ~/.config/peco/config.json :comments no
:END:
#+begin_src json
{
    "Prompt": "[peco]",
    "InitialFilter":"SmartCase",
    "SelectionPrefix":">",
    "Keymap": {
        "C-_": "peco.ToggleRangeMode"
    },
    "Style": {
        "Basic": ["on_default", "default"],
        "SavedSelection": ["bold", "on_yellow", "white"],
        "Selected": ["on_white","black"],
        "Query": ["cyan", "bold"],
        "Matched": ["bold", "blue", "on_black"]
    }
}
#+end_src
** pythonrc.py
:PROPERTIES:
:header-args+: :tangle ~/.pythonrc.py :padline no
:END:

#+begin_src python
# -*- coding: utf-8 -*-

from __future__ import print_function, unicode_literals, division

try:
    def progBar(i, total, length=50, kind=None):
        """A nice progress bar to use with for loops."""
        i += 1
        n = int(i*length/total)
        percent = i/total*100
        frame = ("{0:6.2f}% |{1}{2}|".format(percent, '█'*n, ' '*(length-n))
                if kind is None else
                "{0:6.2f}% [{1}{2}]".format(percent, str(kind)*n, ' '*(length-n)))
        endchar = ('\r' if i < total else ' Done!\n')
        print(frame, end=endchar)
except:
    pass

# def write_csv(path, rows):
#     "Write a list of iterables to a CSV, I think"
#     with open(path, 'w') as f:
#         writer = csv.writer(f)
#         writer.writerows(rows)
#+end_src
** rainbowstream
*** rainbow_config.json
:PROPERTIES:
:header-args+: :tangle ~/.rainbow_config.json
:END:

#+begin_src json :comments no
{
    "HEARTBEAT_TIMEOUT": 300,
    "IMAGE_ON_TERM": false,
    "IMAGE_RESIZE_TO_FIT": true,
    "THEME": "darktooth",
    "ASCII_ART": false,
    "HIDE_PROMPT": true,
    "PREFIX": "#owner#place#me#keyword",
    "SEARCH_TYPE": "mixed",
    "SEARCH_MAX_RECORD": 5,
    "HOME_TWEET_NUM": 5,
    "RETWEETS_SHOW_NUM": 5,
    "CONVERSATION_MAX": 30,
    "QUOTE_FORMAT": "#comment RT #owner: #tweet",
    "THREAD_META_LEFT": "(#id) #clock",
    "THREAD_META_RIGHT": "#clock (#id)",
    "THREAD_MIN_WIDTH": 20,
    "NOTIFY_FORMAT": "  #source_user #notify #clock",
    "MESSAGES_DISPLAY": 5,
    "TREND_MAX": 10,
    "LIST_MAX": 5,
    "ONLY_LIST": [],
    "IGNORE_LIST": [],
    "HISTORY_FILENAME": "completer.hist",
    "IMAGE_SHIFT": 2,
    "IMAGE_MAX_HEIGHT": 90,
    "STREAM_DELAY": 0,
    "USER_DOMAIN": "userstream.twitter.com",
    "PUBLIC_DOMAIN": "stream.twitter.com",
    "SITE_DOMAIN": "sitestream.twitter.com",
    "FORMAT": {
        "TWEET": {
            "CLOCK_FORMAT": "%Y/%m/%d %H:%M:%S",
            "DISPLAY": "\n  #name #nick #clock \n  \u20aa:#rt_count \u2665:#fa_count id:#id via #client #fav\n  #tweet"
        },
        "MESSAGE": {
            "CLOCK_FORMAT": "%Y/%m/%d %H:%M:%S",
            "DISPLAY": "\n  #sender_name #sender_nick #to #recipient_name #recipient_nick :\n  #clock message_id:#id\n  #message"
        }
    }
}
#+end_src
*** darktooth.json
:PROPERTIES:
:header-args+: :tangle ~/.pyenv/versions/3.6.0/lib/python3.6/site-packages/rainbowstream/colorset/darktooth.json
:END:
#+begin_src json :comments no
{
    /* Color config
    There are 16 basic colors supported :
        ,* default
        ,* black
        ,* red
        ,* green
        ,* yellow
        ,* blue
        ,* magenta
        ,* cyan
        ,* grey
        ,* light_red
        ,* light_green
        ,* light_yellow
        ,* light_blue
        ,* light_magenta
        ,* light_cyan
        ,* white
    and 256 terminal's colors from 0 to 255
    ,*/

    "DECORATED_NAME" : 64,
    "CYCLE_COLOR" :[124,32,64,66,130,23],
    "TWEET" : {
        "mynick"          : 66,
        "nick"            : 10,
        "clock"           : 32,
        "id"              : 130,
        "client"          : 23,
        "favorited"       : 64,
        "retweet_count"   : 64,
        "favorite_count"  : 124,
        "rt"              : 66,
        "link"            : 12,
        "hashtag"         : 64,
        "mytweet"         : 66,
        "keyword"         : "on_light_green"
    },

    "NOTIFICATION":{
        "source_nick"   : 64,
        "notify"        : 66,
        "clock"         : 32
    },

    "MESSAGE" : {
        "partner"       : 64,
        "me"            : 64,
        "partner_frame" : 124,
        "me_frame"      : 23,
        "sender"        : 64,
        "recipient"     : 64,
        "to"            : 130,
        "clock"         : 32,
        "id"            : 124
    },

    "PROFILE" : {
        "statuses_count"    : 124,
        "friends_count"     : 32,
        "followers_count"   : 130,
        "nick"              : 64,
        "profile_image_url" : 12,
        "description"       : 66,
        "location"          : 64,
        "url"               : 12,
        "clock"             : 32
    },

    "TREND" : {
        "url": 12
    },

    "CAL" : {
        "days": 64,
        "today": "light_green"
    },

    "GROUP" : {
        "name": 64,
        "member": 130,
        "subscriber": 32,
        "mode": 164,
        "description": 66,
        "clock": 32
    }
}
#+end_src
** ssh
:PROPERTIES:
:header-args+: :tangle ~/.ssh/config
:END:
#+begin_src conf
Host athena
    HostName athena.dialup.mit.edu
    User dmundo
    ForwardX11Trusted yes

Host racecar
     HostName 192.168.0.34
     User racecar
     ForwardX11 yes
#Default GitHub
Host github.com
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_rsa

Host github-MIT
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_rsa_MIT
#+end_src
** termite
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/termite/config")
:END:
#+begin_src conf
[options]
font = iosevka term 9.5
allow_bold=0
cursor_shape=ibeam
[colors]
background=#282828
foreground=#FDf4c1
color0=#282828
color1=#9d1306
color2=#79740e
color3=#b57614
color4=#076678
color5=#8f3f71
color6=#00a7af
color7=#bdae93
color8=#686868
color9=#fb4933
color10=#b8bb26
color11=#fabd2f
color12=#83a598
color13=#d3869b
color14=#3fd7e5
color15=#fdf4c1
#+end_src
** tmux
*** tmux.conf
:PROPERTIES:
:header-args+: :tangle ~/.tmux.conf
:END:
**** Initialize
#+begin_src conf
set -s escape-time 0
# set -g default-terminal "xterm-256color"
# set -ga terminal-overrides ",screen-256color:Tc"
# set -g lock-after-time 300
# set -g lock-command "/usr/bin/cmatrix -B"
set -g update-environment -r
set -g set-titles on
set -g set-titles-string '#W'
# set-option -g set-titles-string '#H:#S.#I.#P #W #T'
#+end_src
**** Prefix
#+begin_src conf
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix
#+end_src
**** Bindings
#+begin_src conf
set -g mouse on
set-window-option -g xterm-keys on
set-option -g status-keys vi
setw -g mode-keys vi
bind-key q detach-client
bind-key Q detach-client
bind-key Escape copy-mode
bind-key [ copy-mode
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "xclip -in -selection clipboard"
bind -n C-k clear-history
#+end_src
**** Windows/Panes
#+begin_src conf
setw -g monitor-activity on
set-option -g allow-rename off
set -g history-limit 3000
set -g base-index 1
set -g pane-base-index 1
set-option -g renumber-windows on

bind | split-window -h -c '#{pane_current_path}'
bind - split-window -v -c '#{pane_current_path}'
unbind '"'
unbind %

bind-key { swap-window -t -1
bind-key } swap-window -t +1
bind-key \ next-window

bind-key j select-pane -D
bind-key k select-pane -U
bind-key h select-pane -L
bind-key l select-pane -R
bind-key o swap-pane -D
bind-key < split-window -h \; choose-window 'kill-pane ; join-pane -hs %%'
bind-key > break-pane -d
bind-key ^ split-window -v \; choose-window 'kill-pane ; join-pane -vs %%'
bind-key = select-layout even-horizontal
bind-key + select-layout even-vertical
#+end_src
**** Bell
#+begin_src conf
set-option -g bell-action any
set-option -g visual-bell off
#+end_src
**** Reload config
#+begin_src conf
bind r source-file ~/.tmux.conf
#+end_src
**** Theming
#+begin_src conf
# panes
set -g pane-border-fg black
set -g pane-active-border-fg brightred

## Status bar design
# status line
set -g status-justify left
set -g status-bg default
set -g status-fg colour12
set -g status-interval 2

# messaging
set -g message-fg black
set -g message-bg yellow
set -g message-command-fg blue
set -g message-command-bg black

#window mode
setw -g mode-bg colour6
setw -g mode-fg colour0

# window status
setw -g window-status-format " #F#I:#W#F "
setw -g window-status-current-format " #F#I:#W#F "
setw -g window-status-format "#[fg=magenta]#[bg=black] #I #[bg=cyan]#[fg=colour8] #W "
setw -g window-status-current-format "#[bg=brightmagenta]#[fg=colour8] #I #[fg=colour8]#[bg=colour14] #W "
setw -g window-status-current-bg colour0
setw -g window-status-current-fg colour11
setw -g window-status-current-attr dim
setw -g window-status-bg green
setw -g window-status-fg black
setw -g window-status-attr reverse

# Info on left (I don't have a session display for now)
set -g status-left ''

# loud or quiet?
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-window-option -g monitor-activity off
set-window-option -g aggressive-resize on
set-option -g bell-action none

set -g default-terminal "screen-256color"

# The modes {
setw -g clock-mode-colour colour135
setw -g mode-attr none
setw -g mode-fg colour9
setw -g mode-bg colour237

# }
# The panes {

set -g pane-border-bg colour235
set -g pane-border-fg colour238
set -g pane-active-border-bg colour236
set -g pane-active-border-fg colour51

# }
# The statusbar {

set -g status-position bottom
set -g status-bg colour234
set -g status-fg colour137
set -g status-attr dim
set -g status-left ''
set -g status-right '#[fg=colour233,bg=colour241,bold] %Y-%d-%m #[fg=colour233,bg=colour245,bold] %H:%M '
set -g status-right-length 50
set -g status-left-length 20

setw -g window-status-current-fg colour81
setw -g window-status-current-bg colour238
setw -g window-status-current-attr bold
setw -g window-status-current-format ' #I#[fg=colour250]:#[fg=colour015]#W#[fg=colour6]#F '

setw -g window-status-fg colour13
setw -g window-status-bg colour235
setw -g window-status-attr none
setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour007]#W#[fg=colour244]#F '

setw -g window-status-bell-attr bold
setw -g window-status-bell-fg colour255
setw -g window-status-bell-bg colour1

# }
# The messages {

set -g message-attr bold
set -g message-fg colour232
set -g message-bg colour166

# }
#+end_src
**** osx-specific
#+begin_src conf :tangle (when (eq system-type 'darwin) "~/.tmux.conf")
set-option -g default-command "reattach-to-user-namespace -l zsh"
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
#+end_src
**** Plugins
#+begin_src conf
# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-urlview'
# set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @continuum-restore 'on'

set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-sidebar'
set -g @sidebar-tree-command 'exa -TL2 --color=always'
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
#+end_src
*** tmuxinator-hud
:PROPERTIES:
:header-args+: :tangle ~/.tmuxinator/hud.yml
:END:
#+begin_src yaml :comments no
# ~/.tmuxinator/hud.yml

name: hud

windows:
  - shell:
  - social:
      layout: even-horizontal
      panes:
        - weechat
        - rtv
  - music:
      layout: even-horizontal
      panes:
        - cmus
        - cava
#+end_src
** zathurarc
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/zathura/zathurarc")
:END:
#+begin_src conf
set font "Iosevka 9"
set default-bg "#282828"
set default-fg "#fdf4c1"
set inputbar-bg "#282828"
set inputbar-fg "#3FD7E5"
set statusbar-fg "#fdf4c1"
set first-page-column 1
set recolor-darkcolor "#fDf4c1"
set recolor-lightcolor "#282828"
#+end_src
** zsh
*** zshrc
:PROPERTIES:
:header-args+: :tangle ~/.zshrc
:END:
**** Initial setup
***** Prompt
#+begin_src sh
function prompt_sorin_pwd {
  local pwd="${PWD/#$HOME/~}"

  if [[ "$pwd" == (#m)[/~] ]]; then
    _prompt_sorin_pwd="$MATCH"
    unset MATCH
  else
    _prompt_sorin_pwd="${${${${(@j:/:M)${(@s:/:)pwd}##.#?}:h}%/}//\%/%%}/${${pwd:t}//\%/%%}"
  fi
  echo $_prompt_sorin_pwd
}

source $HOME/Code/zsh/zsh-git-prompt/zshrc.sh
setopt prompt_subst
GIT_PROMPT_EXECUTABLE="haskell"
ZSH_THEME_GIT_PROMPT_BRANCH="%{$fg_bold[green]%}"
ZSH_THEME_GIT_PROMPT_CHANGED="%{%F{009}✚%G%}"
ZSH_THEME_GIT_PROMPT_AHEAD="%{%F{013}↑%G%}"
ZSH_THEME_GIT_PROMPT_BEHIND="%{%F{013}↓%G%}"
ZSH_THEME_GIT_PROMPT_CLEAN="%{%F{010}✓%G%}"
ZSH_THEME_GIT_PROMPT_STAGED="%{%F{012}●%G%}"

# PROMPT='%B%F{9}$(prompt_sorin_pwd) %B%F{2}❯%f%b '
PROMPT='$(git_super_status) %F{7}$(prompt_sorin_pwd)%f%b '
# PROMPT='%B%F{9}$(prompt_sorin_pwd) %B%F{2}λ%f%b '
#+end_src
***** Rprompt
#+begin_src sh :tangle no
source $HOME/Code/zsh/zsh-git-prompt/zshrc.sh
setopt prompt_subst
GIT_PROMPT_EXECUTABLE="haskell"
ZSH_THEME_GIT_PROMPT_BRANCH="%{$fg_bold[green]%}"
ZSH_THEME_GIT_PROMPT_CHANGED="%{%F{009}✚%G%}"
ZSH_THEME_GIT_PROMPT_AHEAD="%{%F{013}↑%G%}"
ZSH_THEME_GIT_PROMPT_BEHIND="%{%F{013}↓%G%}"
ZSH_THEME_GIT_PROMPT_CLEAN="%{%F{010}✓%G%}"
ZSH_THEME_GIT_PROMPT_STAGED="%{%F{012}●%G%}"
RPROMPT='$(git_super_status)'
#+end_src
***** Cursor
#+begin_src sh
if [ "$(uname)" = "Darwin" ]; then
    zle-line-init () {
        zle -K viins
        echo -ne "\033]12;Gray\007"
        echo -ne "\033[\x35 q"
    }
    zle -N zle-line-init
    zle-keymap-select () {
        if [[ $KEYMAP == vicmd ]]; then
            if [[ -z $TMUX ]]; then
                printf "\033]12;Green\007"
                printf "\033[1 q"
            else
                printf "\033Ptmux;\033\033]12;red\007\033\\"
                printf "\033Ptmux;\033\033[1 q\033\\"
            fi
        else
            if [[ -z $TMUX ]]; then
                printf "\033]12;Grey\007"
                printf "\033[\x35 q"
            else
                printf "\033Ptmux;\033\033]12;grey\007\033\\"
                printf "\033Ptmux;\033\033[\x35 q\033\\"
            fi
        fi
    }
    zle -N zle-keymap-select
elif [ -z "$INSIDE_EMACS" ]; then
    # Modal cursor color for vi's insert/normal modes.
    # http://stackoverflow.com/questions/30985436/
    # https://bbs.archlinux.org/viewtopic.php?id=95078
    # http://unix.stackexchange.com/questions/115009/
    zle-line-init () {
        zle -K viins
        #echo -ne "\033]12;Grey\007"
        #echo -n 'grayline1'
        echo -ne "\033]12;white\007"
        echo -ne "\033[5 q"
        #print 'did init' >/dev/pts/16
    }
    zle -N zle-line-init
    zle-keymap-select () {
        if [[ $KEYMAP == vicmd ]]; then
            if [[ -z $TMUX ]]; then
                printf "\033]12;white\007"
                printf "\033[2 q"
            else
                printf "\033Ptmux;\033\033]12;white\007\033\\"
                printf "\033Ptmux;\033\033[2 q\033\\"
            fi
        else
            if [[ -z $TMUX ]]; then
                printf "\033]12;white\007"
                printf "\033[5 q"
            else
                printf "\033Ptmux;\033\033]12;white\007\033\\"
                printf "\033Ptmux;\033\033[5 q\033\\"
            fi
        fi
        #print 'did select' >/dev/pts/16
    }
    zle -N zle-keymap-select
fi
#+end_src
***** Setup help
#+begin_src sh
autoload -Uz run-help
if [ "alias" = $(whence -w run-help | sed 's/run-help: //') ]; then
    unalias run-help
fi
alias help=run-help
#+end_src
**** Modules
#+begin_src sh
for file ($HOME/.zmodules/*.zsh(N)); do
    source $file
done
#+end_src
**** Functions
#+begin_src sh
for file ($HOME/bin/zfuncs/*(N)); do
    if [[ -a "$file" ]]; then
        autoload -Uz "${file:t}"
    fi
done
#+end_src
**** Zsh options
#+begin_src sh
setopt glob_complete
setopt auto_cd
setopt histignoredups
setopt autonamedirs
setopt clobber
unsetopt correct
autoload -Uz compinit && compinit -i
autoload -Uz cool-peco
cool-peco
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' menu select
zstyle ':completion:*' list-dirs-first true
zstyle ':completion:*' squeeze-slashes true
zstyle ':completion:*' _expand_alias
#+end_src
**** Initialize and source some things
***** [[https://github.com/b4b4r07/enhancd][enhancd]]
#+begin_src sh
source ~/Code/zsh/enhancd/init.sh
# export ENHANCD_DISABLE_HOME=1
export ENHANCD_FILTER=peco
#+end_src
***** [[https://github.com/junegunn/fzf][fzf]]
#+begin_src sh :tangle no
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
#+end_src
***** [[https://github.com/yyuu/pyenv/][pyenv]]
#+begin_src sh
if which pyenv > /dev/null; then eval "$(pyenv init -)"; fi
#+end_src
***** [[https://github.com/nvbn/thefuck][thefuck]]
#+begin_src sh
if which thefuck > /dev/null; then eval $(thefuck --alias); fi
#+end_src
***** [[https://github.com/rupa/z][z]]
#+begin_src sh
if which brew > /dev/null; then
    source $(brew --prefix)/etc/profile.d/z.sh
else
    source $HOME/Code/zsh/z/z.sh
fi
#+end_src
***** [[https://github.com/zsh-users/zsh-syntax-highlighting/][zsh-syntax-highlighting]]
#+begin_src sh
if which brew > /dev/null; then
    source $(brew --prefix)/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
else
    source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

ZSH_HIGHLIGHT_STYLES[globbing]='fg=208'
ZSH_HIGHLIGHT_STYLES[command]='fg=010'
ZSH_HIGHLIGHT_STYLES[alias]='fg=010'
ZSH_HIGHLIGHT_STYLES[builtin]='fg=010'
ZSH_HIGHLIGHT_STYLES[function]='fg=010'
#+end_src
***** [[https://github.com/zsh-users/zsh-history-substring-search][zsh-history-substring-search]]
#+begin_src sh
if which brew > /dev/null; then
    source $(brew --prefix)/opt/zsh-history-substring-search/zsh-history-substring-search.zsh
else
    source $HOME/Code/zsh/zsh-history-substring-search/zsh-history-substring-search.zsh
fi

HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND=''
HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND=''
#+end_src
***** [[https://github.com/zsh-users/zsh-autosuggestions][zsh-autosuggestions]]
#+begin_src sh
# source $HOME/Code/zsh-autosuggestions/zsh-autosuggestions.zsh
#+end_src
**** Keys
#+begin_src sh
bindkey -v
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down
export KEYTIMEOUT=1
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char
bindkey '^r' cool-peco-history
bindkey '^t' cool-peco-filename-search
zle -N e
bindkey '^e' e
bindkey -M vicmd '/' cool-peco-history
bindkey '^h' cool-peco-ssh
bindkey '^p' cool-peco-ps
bindkey '^F' cool-peco-all-funcs
#+end_src
**** Vars
#+begin_src sh
[ "$(uname)" = "Linux" ] && [ -z $TMUX ] && export TERM=xterm-256color

# some ls colors i've gotten used to
export LS_COLORS=$LS_COLORS:'di=0;36:ex=0;35:ln=1;31'

# kwm/khd
kwm="koekeishiya/formulae/kwm"
khd="koekeishiya/formulae/khd"

# Emacs
export switchmacs="emacs"

# Python
export python3version=3.6.0
export python2version=2.7.13

export SURFRAW_text_browser=/usr/local/bin/lynx
# export SURFRAW_graphical=no


# GPG
GPG_TTY=$(tty)
export GPG_TTY

# pass
export PASSWORD_STORE_ENABLE_EXTENSIONS=true

# Named dirs
hash -d config=~/.config
hash -d emacs=~/dotfiles/emacs.d
#+end_src
**** Aliases
***** Simple aliases
#+begin_src sh
if which brew > /dev/null; then
    alias startkwm="brew services start $kwm"
    alias stopkwm="brew services stop $kwm"
    alias restartkwm="brew services restart $kwm"
    alias startkhd="brew services start $khd"
    alias stopkhd="brew services stop $khd"
    alias restartkhd="brew services restart $khd"
    alias cask="brew cask"
fi
alias -g ...='../..'
alias -g ....='../../..'
alias -g .....='../../../..'
alias -g ......='../../../../..'
alias -- -='cd -'
alias cpg="cool-peco-ghq"
alias cpwd="pwd | tr -d '\n' | pbcopy"
alias ddg='surfraw duckduckgo -j'
alias def='dict -d wn'
alias ed="ed -p:"
alias edit="emacsclient -n"
alias editv="emacsclient -t"
alias encrypt="gpg2 --armor --encrypt"
alias lock="gpg2 -c --armor"
alias encryptdir="gpg-zip --encrypt"
alias lockdir="gpg-zip -c"
alias gpg="gpg2"
alias decrypt="gpg2 -d"
alias decryptdir="gpg-zip -d"
alias fcolor="spectrum_ls | rg --color=never -N"
alias filecount="ls -1 | wc -l"
alias history-stat="history 0 | awk '{print \$2}' | sort | uniq -c | sort -n -r | head"
which hub > /dev/null && alias git=hub
[ "$(uname)" = "Linux" ] && compdef hub=git
[ "$(uname)" = "Linux" ] && which nautilus > /dev/null && alias nautilus="nautilus > /dev/null 2>&1"
alias gls='gls -X --group-directories-first --color=always'
alias ls='exa --group-directories-first --sort=extension'
alias glst="gls -t"
if [ -d /Applications/Mathematica.app ]; then
    alias mathematica='/Applications/Mathematica.app/Contents/MacOS/WolframKernel'
fi
alias mux='tmuxinator'
alias pass="EDITOR='emacsclient -nw' pass"
alias pep8="pep8 --first --ignore=E129,W503,E226"
alias piphere="pip install --target=./"
alias printers="lpstat -p | awk '{print $2}'"
alias resetb="source ~/.zshrc"
alias resetwifi="networksetup -setairportpower en0 off; sleep 2;"\
"networksetup -setairportpower en0 on"
alias rg="rg -i -g '!archive-contents' --colors 'line:style:bold' --colors 'path:style:bold'"
alias rtv='PAGER=text-pager rtv --enable-media'
alias starwars="telnet towel.blinkenlights.nl" # heh
alias sudo='sudo '                             # recognize aliases
alias sz="du -hs"                              # get folder/file size
alias toshredsyousay='shred -zvun 10'
alias wiki="wiki -w 80"
#+end_src
***** Function "aliases"
#+begin_src sh
ff() { find . -type f -iname "*$1*" | peco --prompt "[find-file]" }

fd() { find . -type d -iname "*$1*" | peco --prompt="[find-dir]"}

f() { find . -iname "*$1*" | peco --prompt="[find]"}

fsz() { find ./ -type f -iname "*$1*" -exec du -sh {} + |
            sort -rh |
            peco --prompt="[find-sizes]"}

calc() { emacs --batch --eval "(message (calc-eval \"$1\"))" }
alias calc="noglob calc"

erg () { emacsclient -n $(rg -n $1 |
                              peco --prompt="[erg]" |
                              awk -F\: '{print "+"$2,$1}') > /dev/null 2>&1}
#+end_src
**** Use gnu coreutils
#+begin_src sh
if [ "$(uname)" = "Darwin" ]; then
    path=(
        /usr/local/opt/coreutils/libexec/gnubin
        $path
    )

    export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"
fi
#+end_src
**** VM
#+begin_src sh :tangle no
[ "$(uname)" = "Linux" ] && source ~/diego_racecarsetup.sh
#+end_src
*** zshenv
:PROPERTIES:
:header-args+: :tangle ~/.zshenv
:END:

#+begin_src sh
# Ensure that a non-login, non-interactive shell has a defined environment.
if [[ "$SHLVL" -eq 1 && ! -o LOGIN && -s "${ZDOTDIR:-$HOME}/.zprofile" ]]; then
    source "${ZDOTDIR:-$HOME}/.zprofile"
fi
#+end_src
**** Path
#+begin_src sh
export GOPATH="$HOME/go"
export GOROOT=/usr/lib/go-1.8

export PYENV_ROOT="$HOME/.pyenv"
path=(
    $HOME/.cargo/bin
    $PYENV_ROOT/bin
    $HOME/bin
    $HOME/.local/bin
    /usr/local/{bin,sbin}
    $path
    $GOPATH/bin
)

fpath=(
    ~/bin/zfuncs
    /usr/share/zsh/site-functions/
    /usr/local/share/zsh-completions
    $HOME/Code/zsh/zsh-completions/src
    $HOME/Code/zsh/cool-peco
    $fpath
)
typeset -gU path manpath cdpath fpath
#+end_src
**** Variables
#+begin_src sh
export PYTHONSTARTUP=$HOME/.pythonrc.py

export WWW_HOME='https://duckduckgo.com'
export RTV_EDITOR='emacsclient -t'
export RTV_URLVIEWER='urlview'

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
    export EDITOR='vim'
else
    export EDITOR="emacsclient -n" # Set emacs as default editor
    export ALTERNATE_EDITOR="vim"
fi

export PAGER="less"
export LESS='-g-i-M-R-S-w-z-4'
if (( $#commands[(i)lesspipe(|.sh)] )); then
    export LESSOPEN="| /usr/bin/env $commands[(i)lesspipe(|.sh)] %s 2>&-"
fi

if [[ "$OSTYPE" == darwin* ]]; then
    export BROWSER='open'
fi

if [[ -z "$LANG" ]]; then
    export LANG='en_US.UTF-8'
fi

if [[ -n "$GTK_MODULES" ]]; then
    export GTK_MODULES="$GTK_MODULES:s/pantheon-filechooser-module//"
fi
#+end_src
*** zprofile
:PROPERTIES:
:header-args+: :tangle ~/.zprofile
:END:
#+begin_src sh
if [ "$(uname)" = "Darwin" ]; then
    if [ -f ~/.gnupg/.gpg-agent-info ] && [ -n "$(pgrep gpg-agent)" ]; then
        source ~/.gnupg/.gpg-agent-info
        export GPG_AGENT_INFO
    else
        eval $(gpg-agent --daemon --write-env-file ~/.gnupg/.gpg-agent-info)
    fi
    export GOROOT=/usr/local/Cellar/go/1.8/libexec
fi
#+end_src
*** Modules
**** environment
:PROPERTIES:
:header-args+: :tangle ~/.zmodules/environment.zsh
:END:
#+begin_src sh
# Smart URLs
autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic

# General
setopt BRACE_CCL          # Allow brace character class list expansion.
setopt COMBINING_CHARS    # Combine zero-length punctuation characters (accents)
                          # with the base character.
setopt RC_QUOTES          # Allow 'Henry''s Garage' instead of 'Henry'\''s Garage'.
unsetopt MAIL_WARNING     # Don't print a warning message if a mail file has been accessed.

# Jobs
setopt LONG_LIST_JOBS     # List jobs in the long format by default.
setopt AUTO_RESUME        # Attempt to resume existing job before creating a new process.
setopt NOTIFY             # Report status of background jobs immediately.
unsetopt BG_NICE          # Don't run all background jobs at a lower priority.
unsetopt HUP              # Don't kill jobs on shell exit.
unsetopt CHECK_JOBS       # Don't report on jobs when shell exit.

# Termcap
if zstyle -t ':prezto:environment:termcap' color; then
  export LESS_TERMCAP_mb=$'\E[01;31m'      # Begins blinking.
  export LESS_TERMCAP_md=$'\E[01;31m'      # Begins bold.
  export LESS_TERMCAP_me=$'\E[0m'          # Ends mode.
  export LESS_TERMCAP_se=$'\E[0m'          # Ends standout-mode.
  export LESS_TERMCAP_so=$'\E[00;47;30m'   # Begins standout-mode.
  export LESS_TERMCAP_ue=$'\E[0m'          # Ends underline.
  export LESS_TERMCAP_us=$'\E[01;32m'      # Begins underline.
fi
#+end_src
**** history
:PROPERTIES:
:header-args+: :tangle ~/.zmodules/history.zsh
:END:
#+begin_src sh
# Variables
HISTFILE="${ZDOTDIR:-$HOME}/.zhistory"       # The path to the history file.
HISTSIZE=10000                   # The maximum number of events to save in the internal history.
SAVEHIST=10000                   # The maximum number of events to save in the history file.

# Options
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ':start:elapsed;command' format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire a duplicate event first when trimming history.
setopt HIST_IGNORE_DUPS          # Do not record an event that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete an old recorded event if a new event is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a previously found event.
setopt HIST_IGNORE_SPACE         # Do not record an event starting with a space.
setopt HIST_SAVE_NO_DUPS         # Do not write a duplicate event to the history file.
setopt HIST_VERIFY               # Do not execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing non-existent history.

# Aliases
# Lists the ten most used commands.
alias history-stat="history 0 | awk '{print \$2}' | sort | uniq -c | sort -n -r | head"
#+end_src
**** directory
:PROPERTIES:
:header-args+: :tangle ~/.zmodules/directory.zsh
:END:
#+begin_src sh
# Options
setopt AUTO_CD              # Auto changes to a directory without typing cd.
setopt AUTO_PUSHD           # Push the old directory onto the stack on cd.
setopt PUSHD_IGNORE_DUPS    # Do not store duplicates in the stack.
setopt PUSHD_SILENT         # Do not print the directory stack after pushd or popd.
setopt PUSHD_TO_HOME        # Push to home directory when no argument is given.
setopt CDABLE_VARS          # Change directory to a path stored in a variable.
setopt AUTO_NAME_DIRS       # Auto add variable-stored paths to ~ list.
setopt MULTIOS              # Write to multiple descriptors.
setopt EXTENDED_GLOB        # Use extended globbing syntax.
unsetopt CLOBBER            # Do not overwrite existing files with > and >>.
                            # Use >! and >>! to bypass.

# Aliases
alias d='dirs -v'
for index ({1..9}) alias "$index"="cd +${index}"; unset index
#+end_src
**** spectrum
:PROPERTIES:
:header-args+: :tangle ~/.zmodules/spectrum.zsh
:END:
#+begin_src sh
# Return if requirements are not found.
if [[ "$TERM" == 'dumb' ]]; then
  return 1
fi

typeset -gA FX FG BG

FX=(
                                        none                         "\e[00m"
                                        normal                       "\e[22m"
  bold                      "\e[01m"    no-bold                      "\e[22m"
  faint                     "\e[02m"    no-faint                     "\e[22m"
  standout                  "\e[03m"    no-standout                  "\e[23m"
  underline                 "\e[04m"    no-underline                 "\e[24m"
  blink                     "\e[05m"    no-blink                     "\e[25m"
  fast-blink                "\e[06m"    no-fast-blink                "\e[25m"
  reverse                   "\e[07m"    no-reverse                   "\e[27m"
  conceal                   "\e[08m"    no-conceal                   "\e[28m"
  strikethrough             "\e[09m"    no-strikethrough             "\e[29m"
  gothic                    "\e[20m"    no-gothic                    "\e[22m"
  double-underline          "\e[21m"    no-double-underline          "\e[22m"
  proportional              "\e[26m"    no-proportional              "\e[50m"
  overline                  "\e[53m"    no-overline                  "\e[55m"

                                        no-border                    "\e[54m"
  border-rectangle          "\e[51m"    no-border-rectangle          "\e[54m"
  border-circle             "\e[52m"    no-border-circle             "\e[54m"

                                        no-ideogram-marking          "\e[65m"
  underline-or-right        "\e[60m"    no-underline-or-right        "\e[65m"
  double-underline-or-right "\e[61m"    no-double-underline-or-right "\e[65m"
  overline-or-left          "\e[62m"    no-overline-or-left          "\e[65m"
  double-overline-or-left   "\e[63m"    no-double-overline-or-left   "\e[65m"
  stress                    "\e[64m"    no-stress                    "\e[65m"

                                        font-default                 "\e[10m"
  font-first                "\e[11m"    no-font-first                "\e[10m"
  font-second               "\e[12m"    no-font-second               "\e[10m"
  font-third                "\e[13m"    no-font-third                "\e[10m"
  font-fourth               "\e[14m"    no-font-fourth               "\e[10m"
  font-fifth                "\e[15m"    no-font-fifth                "\e[10m"
  font-sixth                "\e[16m"    no-font-sixth                "\e[10m"
  font-seventh              "\e[17m"    no-font-seventh              "\e[10m"
  font-eigth                "\e[18m"    no-font-eigth                "\e[10m"
  font-ninth                "\e[19m"    no-font-ninth                "\e[10m"
)

FG[none]="$FX[none]"
BG[none]="$FX[none]"
colors=(black red green yellow blue magenta cyan white)
for color in {0..255}; do
  if (( $color >= 0 )) && (( $color < $#colors )); then
    index=$(( $color + 1 ))
    FG[$colors[$index]]="\e[38;5;${color}m"
    BG[$colors[$index]]="\e[48;5;${color}m"
  fi

  FG[$color]="\e[38;5;${color}m"
  BG[$color]="\e[48;5;${color}m"
done
unset color{s,} index
#+end_src
**** colored-man
:PROPERTIES:
:header-args+: :tangle ~/.zmodules/colored-man.zsh
:END:
#+begin_src sh
if [[ "$OSTYPE" = solaris* ]]
then
	if [[ ! -x "$HOME/bin/nroff" ]]
	then
		mkdir -p "$HOME/bin"
		cat > "$HOME/bin/nroff" <<EOF
#!/bin/sh
if [ -n "\$_NROFF_U" -a "\$1,\$2,\$3" = "-u0,-Tlp,-man" ]; then
	shift
	exec /usr/bin/nroff -u\$_NROFF_U "\$@"
fi
#-- Some other invocation of nroff
exec /usr/bin/nroff "\$@"
EOF
		chmod +x "$HOME/bin/nroff"
	fi
fi

man() {
	env \
		LESS_TERMCAP_mb=$(printf "\e[1;31m") \
		LESS_TERMCAP_md=$(printf "\e[1;31m") \
		LESS_TERMCAP_me=$(printf "\e[0m") \
		LESS_TERMCAP_se=$(printf "\e[0m") \
		LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
		LESS_TERMCAP_ue=$(printf "\e[0m") \
		LESS_TERMCAP_us=$(printf "\e[1;32m") \
		PAGER="${commands[less]:-$PAGER}" \
		_NROFF_U=1 \
		PATH="$HOME/bin:$PATH" \
			man "$@"
}
#+end_src
**** sudo
:PROPERTIES:
:header-args+: :tangle ~/.zmodules/sudo.zsh
:END:
#+begin_src sh
sudo-command-line() {
    [[ -z $BUFFER ]] && zle up-history
    if [[ $BUFFER == sudo\ * ]]; then
        LBUFFER="${LBUFFER#sudo }"
    elif [[ $BUFFER == $EDITOR\ * ]]; then
        LBUFFER="${LBUFFER#$EDITOR }"
        LBUFFER="sudoedit $LBUFFER"
    elif [[ $BUFFER == sudoedit\ * ]]; then
        LBUFFER="${LBUFFER#sudoedit }"
        LBUFFER="$EDITOR $LBUFFER"
    else
        LBUFFER="sudo $LBUFFER"
    fi
    zle && zle vi-add-next
}
zle -N sudo-command-line
# Defined shortcut keys: [Esc] [Esc]
bindkey -M vicmd "\e" sudo-command-line
#+end_src
*** Functions
**** apps
:PROPERTIES:
:header-args+: :tangle ~/bin/zfuncs/apps
:END:
#+begin_src sh
open -a "$(find /Applications -maxdepth 2 -type d -name '*.app' \
                        | sed -r 's@/Applications/(Utilities/)?(.+?).app?@\2@' \
                        | peco)" > /dev/null 2>&1
#+end_src
**** e
:PROPERTIES:
:header-args+: :tangle ~/bin/zfuncs/e
:END:
#+begin_src sh
if [ -z "$1" ]; then
    dir="."
else
    dir="$1"
fi
emacsclient -n $(rg -g '!Applications' -g '!Movies' -g '!Music' \
                    -g '!Library' -g '!Pictures' -g '!*.png' \
                    -g '!*.jpg' "$dir" --files \
                     | peco --prompt '[edit]') > /dev/null 2>&1
#+end_src
**** ev
:PROPERTIES:
:header-args+: :tangle ~/bin/zfuncs/ev
:END:
#+begin_src sh
files=$(rg -g '!Applications' \
           -g '!Movies' -g '!Music' -g '!Library' \
           -g '!Pictures' -g '!*.png' -g '!*.jpg' \
           "$1" --files \
            | peco --prompt '[edit]')
emacsclient -n --eval "(let ((inhibit-message t)) (dolist (file (split-string \"$files\")) (find-file-read-only file)))" > /dev/null 2>&1
#+end_src
**** ghq
:PROPERTIES:
:header-args+: :tangle ~/bin/zfuncs/ghq
:END:
#+begin_src sh
if [ "$1" = look -a -n "$2" ]; then
    cd $(command ghq list -p $2)
    return
fi

command ghq "$@"
#+end_src
**** pdftif
:PROPERTIES:
:header-args+: :tangle ~/bin/zfuncs/pdftif
:END:
#+begin_src sh
\gs -dNOPAUSE -q -r500 \
    -sDEVICE=tiffg4 \
    -dBATCH \
    -dFirstPage=$2 \
    -dLastPage=$3 \
    -sOutputFile=$4 \
    $1
#+end_src
**** ocrpdf
:PROPERTIES:
:header-args+: :tangle ~/bin/zfuncs/ocrpdf
:END:
#+begin_src sh
if [[ -z $1 ]]; then
    echo "No input file provided."
elif [[ -z $2 ]]; then
    echo "No output file provided"
else
    echo "Converting pdf to png..."
    \gs -dNOPAUSE -q -r500 \
        -sDEVICE=tiffg4 \
        -dBATCH \
        -sOutputFile=$TMPDIR/tempocr.tif \
        $1
    echo "Running tesseract on pngs..."
    tesseract $TMPDIR/tempocr.tif $2 >/dev/null 2>&1
    echo "Done."
fi
#+end_src
**** ocrpdf2
:PROPERTIES:
:header-args+: :tangle ~/bin/zfuncs/ocrpdf2
:END:
#+begin_src sh
if [[ -z $1 ]]; then
    echo "No input file provided."
elif [[ -z $2 ]]; then
    echo "No output file provided"
else
    echo "Converting pdf to png..."
    convert -density 500 $1 $TMPDIR/tempocr.png
    count=0
    echo "Running tesseract on pngs..."
    while [ -f $TMPDIR/tempocr-$count.png ]; do
        echo "    Page $count"
        tesseract $TMPDIR/tempocr-$count.png $TMPDIR/tempocr >/dev/null 2>&1
        cat $TMPDIR/tempocr.txt >> $2
        let count=count+1
    done
    echo "Created output file $2"
fi
#+end_src
**** spectrum_ls
:PROPERTIES:
:header-args+: :tangle ~/bin/zfuncs/spectrum_ls
:END:
#+begin_src sh
if [ "$#" = 1 ]; then
  code="$(printf "%03d\n" $1)"
  print -P -- "$code: %F{$code}$code%f"
else;
    for code in $(seq -f "%03g" ${1:-000} ${2:-255}); do
        print -P -- "$code: %F{$code}$code%f"
    done
fi
#+end_src
**** pixelate
:PROPERTIES:
:header-args+: :tangle ~/bin/zfuncs/pixelate
:END:
#+begin_src sh
AMOUNT=$(echo "1.001 - $1" | bc -l)
INFILE=$2
OUFILE=$3

COEFF1=$(echo "100 * $AMOUNT" | bc -l)
COEFF2=$(echo "100 / $AMOUNT" | bc -l)

convert -scale $COEFF1% -scale $COEFF2% $INFILE $OUFILE
#+end_src
* Scripts
** dropmite
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/dropmite") :shebang "!/usr/bin/env bash"
:END:
A wrapper to open termite with the name "dropmite," used by i3wm to make it my
floating terminal.
#+begin_src sh
termite --name=dropmite
#+end_src
** explorer
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/explorer")  :shebang "!/usr/bin/env bash"
:END:
Wrapper for floating ranger window with i3wm.
#+begin_src sh
termite -t ranger -e ranger --name=explorer
#+end_src
** i3blocks
i3blocks scripts taken from/inspired by [[https://github.com/yeungocanh/archdot/tree/master/.config/i3blocks][yeungocanh/archdot]].
*** battery
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/battery") :shebang "#!/bin/bash"
:END:
#+begin_src sh
if [ "$BLOCK_BUTTON" = "1" ]; then
    notify-send "$(upower -i /org/freedesktop/UPower/devices/battery_BAT0)"
fi
Bat=$(acpi | cut -d " " -f4 | tr -d "%,")
Adapt=$(acpi -a | cut -d " " -f3)

touch /tmp/battery-status
if [ "$Bat" -lt 11 ] && [ "$(</tmp/battery-status)" != "critically-low" ]; then
    espeak -vf4 "Battery critically low, consider charging." &
    notify-send "Battery critically low, consider charging." &
    echo "critically-low" > /tmp/battery-status
else
    echo "fine" > /tmp/battery-status
fi

if [ "$Adapt" = "on-line" ];then
    icon0=""
    icon1=""
    icon2=""
    icon3=""
    icon4=""
else
    icon0=""
    icon1=""
    icon2=""
    icon3=""
    icon4=""
fi

if [ -z "$Bat" ];then
    bat=""
elif [ "$Bat" -gt "95" ];then
    bat=" $icon4 Full "
    icon="$icon4"
    color="#B8BB26"
elif [ "$Bat" -gt "75" ];then
    bat=" $icon3 $Bat% "
    icon="$icon3"
    color="#B8BB26"
elif [ "$Bat" -gt "50" ];then
    bat=" $icon2 $Bat% "
    icon="$icon2"
    color="#B8BB26"
elif [ "$Bat" -gt "25" ];then
    bat=" $icon1 $Bat% "
    icon="$icon1"
    color="#FABD2F"
elif [ "$Bat" -lt "25" ];then
    bat=" $icon0 $Bat% "
    icon="$icon0"
    color="#FB4933"
fi

echo -e "$bat"
echo -e "$icon"
echo -e "$color"
#+end_src
*** bright
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/bright") :shebang "#!/bin/bash"
:END:
#+begin_src sh
mode="$(<~/bin/i3blocks/brightness.txt)"

if [ "$BLOCK_BUTTON" = "1" ] && [ "$mode" = "screen" ]; then
    pkill -RTMIN+1 i3blocks
    echo "backlight" > ~/bin/i3blocks/brightness.txt
    mode="screen"
    brightness="$(kb-light)"
    printf "   %.0f%%" "$brightness"
elif [ "$BLOCK_BUTTON" = "1" ] && [ "$mode" = "backlight" ]; then
    pkill -RTMIN+1 i3blocks
    echo "screen" > ~/bin/i3blocks/brightness.txt
    mode="backlight"
    brightness="$(xbacklight)"
    printf "   %.0f%%" "$brightness"
elif [ "$mode" = "screen" ]; then
    if [ "$BLOCK_BUTTON" = "5" ]; then
        xbacklight +2 > /dev/null 2>&1
    elif [ "$BLOCK_BUTTON" = "4" ]; then
        xbacklight -2 > /dev/null 2>&1
    fi
    brightness="$(xbacklight)"
    printf "   %.0f%%" "$brightness"
elif [ "$mode" = "backlight" ]; then
    if [ "$BLOCK_BUTTON" = "5" ]; then
        kb-light + > /dev/null 2>&1
    elif [ "$BLOCK_BUTTON" = "4" ]; then
        kb-light - > /dev/null 2>&1
    fi
    brightness="$(kb-light)"
    printf "   %.0f%%" "$brightness"
fi
#+end_src
*** date
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/date") :shebang "#!/bin/bash"
:END:
#+begin_src sh
if [ "$BLOCK_BUTTON" = "1" ]; then
    notify-send "$(cal -h | head -n-1 | cut -c -20)"
fi
echo -e "   $(date +%Y-%m-%d\ %R) "
echo -e "   $(date +%R) "
#+end_src
*** disk
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/disk") :shebang "#!/bin/bash"
:END:
#+begin_src sh
if [ "$BLOCK_BUTTON" = "1" ]; then
    notify-send "$(df -h)"
fi
Disk=$(df -h "$1" | grep -v "^[A-Z]" | awk '{print $4-G"/"$2}')
Short=$(df -h "$1" | grep -v "^[A-Z]" | awk '{print $4}')

if [ -z "$1" ];then
    echo -e "Enter Your Mounted Point Name Ex : \"/\" "
else
    echo -e "  $Disk "
    echo -e "  $Short "
fi
#+end_src
*** layout
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/layout") :shebang "#!/bin/bash"
:END:
#+begin_src sh
layout="$(setxkbmap -query | grep layout | cut -d' ' -f6)"

if [ "$BLOCK_BUTTON" = "1" ] && [ "$layout" = "dvorak" ]; then
    setxkbmap us
    layout="QW"
    notify-send "  Qwerty"
elif [ "$BLOCK_BUTTON" = "1" ] && [ "$layout" = "us" ]; then
    setxkbmap dvorak
    layout="DV"
    notify-send "  Dvorak"
elif [ "$layout" = "us" ]; then
    layout="QW"
elif [ "$layout" = "dvorak" ]; then
    layout="DV"
fi

echo "   $layout "
echo "  "
#+end_src
*** music
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/music") :shebang "#!/bin/bash"
:END:
#+begin_src sh
if [ "$BLOCK_BUTTON" = "1" ]; then
    playerctl-cmus play-pause
elif [ "$BLOCK_BUTTON" = "5" ]; then
    playerctl-cmus next
elif [ "$BLOCK_BUTTON" = "4" ]; then
    playerctl-cmus previous
fi

spotify=$(ps axc | grep 'spotify')
spotplaying="$([ -n "$spotify" ] && pacmd list-sink-inputs | grep -B16 'application.name = "spotify"' | head -1 | awk '{print $2}')"
cmus=$(ps axc | grep 'cmus')
cmusplaying="$([ -n "$cmus" ] && cmus-remote -Q | head -1 | awk '{print $2}')"

if [ -n "$spotify" ] && [ "$spotplaying" = "RUNNING" ]; then
    artist="$(sp current | grep -E '^Artist' | cut -d' ' -f8-)"
    title="$(sp current | grep Title | cut -d' ' -f9-)"
    color="#B8BB26"
elif [ -n "$cmus" ] && [ "$cmusplaying" = "playing" ]; then
    title="$(cmus-remote -Q | grep "tag title" | cut -d" " -f3-)"
    artist="$(cmus-remote -Q | grep "tag artist" | cut -d" " -f3-)"
    color="#B8BB26"
elif [ -n "$spotify" ]; then
    artist="$(sp current | grep -E '^Artist' | cut -d' ' -f8-)"
    title="$(sp current | grep Title | cut -d' ' -f9-)"
    color="#FB4922"
elif [ -n "$cmus" ]; then
    title="$(cmus-remote -Q | grep "tag title" | cut -d" " -f3-)"
    artist="$(cmus-remote -Q | grep "tag artist" | cut -d" " -f3-)"
    color="#FB4922"
fi

if [ -n "$artist" ] && [ -n "$title" ]; then
    echo -e "   $artist - $title "
    echo -e "   $title "
    echo -e "$color"
else
    echo -e "  "
    echo -e " "
    echo -e "$color"
fi
#+end_src
*** volume
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/volume") :shebang "#!/bin/bash"
:END:
#+begin_src sh

if [ "$BLOCK_BUTTON" = "1" ]; then
    amixer -D pulse sset Master toggle > /dev/null 2>&1
elif [ "$BLOCK_BUTTON" = "5" ]; then
    amixer -D pulse sset Master 2%+ > /dev/null 2>&1
elif [ "$BLOCK_BUTTON" = "4" ]; then
    amixer -D pulse sset Master 2%- > /dev/null 2>&1
fi

Vol=$(amixer -D pulse get Master | grep "Left: Playback" | awk '{print $5}' | tr -d "[ %]")
Mute=$(amixer -D pulse get Master | grep "Left: Playback" | awk '{print $6}' | tr -d "[-]")

if [ "$Mute" = "off" ];then
    echo -e "  $Vol% "
    echo
    echo "#FABD2F"
else
    if [ "$Vol" -ge "50" ];then
        echo -ne "  $Vol% "
    else
        echo -ne "  $Vol% "
    fi
fi

unset Vol
unset Mute
#+end_src
*** wifi
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/wifi") :shebang "#!/bin/bash"
:END:
#+begin_src sh
if [ "$BLOCK_BUTTON" = "1" ]; then
    networkmanager_dmenu
fi
name="$(iwgetid -r)"
if [ -n "$name" ]; then
    strength="$(nmcli device wifi list | grep '*' | tail -1 | awk -F '[[:space:]][[:space:]]+' '{print $6}')"
    echo -e "   $name $strength%"
    echo -e "   $strength%"
    echo "#B8BB26"
else
    echo -e "   None "
    echo
    echo "#FB4933"
fi
#+end_src
** masterinstall
:PROPERTIES:
:header-args+: :tangle ~/bin/masterinstall :shebang "#!/usr/bin/env bash"
:END:
A work in progress to reinstall programs post apocalpyse.
*** macOS
**** Xcode
#+begin_src sh :tangle (when (eq system-type 'darwin) "~/bin/masterinstall")
if  [ ! -d /Applications/Xcode.app ]; then
    echo "Please install Xcode and try again."
    exit 1
else
    echo "\e[1;34mInstalling: \e[91mXcode command line tools\e[0;97m"
    xcode-select --install
fi
#+end_src
**** homebrew
#+begin_src sh :tangle (when (eq system-type 'darwin) "~/bin/masterinstall")
echo "\n\e[1;34mInstalling: \e[91mhomebrew\e[0;97m"
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

# Install brew bundle
echo "\n\e[1;34mInstalling: \e[91mhomebrew programs\e[0;97m"
/usr/local/bin/brew tap Homebrew/bundle
/usr/local/bin/brew bundle --file=~/dotfiles/installed-programs/brew.rb
#+end_src
**** Install alfred workflow utils
#+begin_src sh :tangle (when (eq system-type 'darwin) "~/bin/masterinstall")
echo "\n\e[1;34mInstalling: \e[91mAlfred workflow utils\e[0;97m"
curl -o  ~/bin/workflow-build.py https://gist.githubusercontent.com/deanishe/b16f018119ef3fe951af/raw/
curl -o  ~/bin/workflow-install.py https://gist.githubusercontent.com/deanishe/35faae3e7f89f629a94e/raw/
chmod a+x ~/bin/workflow-build.py
chmod a+x ~/bin/workflow-install.py
echo -e "\e[1;34mDone"
#+end_src
*** Linux
**** apt-get packages
#+begin_src sh :tangle (when (eq system-type 'gnu/linux) "~/bin/masterinstall")
<~/dotfiles/installed-programs/apt.txt xargs sudo apt-get install
#+end_src
**** golang
#+begin_src sh :tangle (when (eq system-type 'gnu/linux) "~/bin/masterinstall")
sudo add-apt-repository ppa:ubuntu-lxc/lxd-stable
sudo apt-get update
sudo apt-get install golang
go get github.com/motemen/ghq
#+end_src
**** hub
#+begin_src sh :tangle (when (eq system-type 'gnu/linux) "~/bin/masterinstall")
ghq get github/hub
cd .ghq/github.com/github/hub
sudo make install prefix=/usr/local
cd ~
#+end_src
**** stack
#+begin_src sh :tangle (when (eq system-type 'gnu/linux) "~/bin/masterinstall")
curl -sSL https://get.haskellstack.org/ | sh
#+end_src
**** rust
#+begin_src sh :tangle (when (eq system-type 'gnu/linux) "~/bin/masterinstall")
curl https://sh.rustup.rs -sSf | sh
cargo install ripgrep
cargo install --git https://github.com/ogham/exa
#+end_src
**** pyenv
#+begin_src sh :tangle (when (eq system-type 'gnu/linux) "~/bin/masterinstall")
curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash
pyenv update
#+end_src
*** Python versions
#+begin_src sh
echo "\n\e[1;34mInstalling: \e[91mpython\e[0;97m"
# Pyenv setup
usr/local/bin/pyenv install $python3version
usr/local/bin/pyenv rehash
usr/local/bin/pyenv install $python2version
usr/local/bin/pyenv rehash
#+end_src
*** Pip
#+begin_src sh
pyenv global $python3version
echo "\n\e[1;34mInstalling: \e[91mpip3 programs\e[0;97m"
<~/dotfiles/installed-programs/pip3.txt xargs pip install

pyenv global $python2version
echo "\n\e[1;34mInstalling: \e[91mpip2 programs\e[0;97m"
<~/dotfiles/installed-programs/pip2.txt xargs pip install

pyenv global $python3version
#+end_src
*** Symlink dirs
#+begin_src sh
echo "\n\e[1;34mSymlinking: \e[91m.emacs.d, .vim\e[0;97m"
ln -s ~/dotfiles/emacs.d ~/.emacs.d
ln -s ~/dotfiles/vim ~/.vim
#+end_src
*** Tangle rc.org
#+begin_src sh
echo "\n\e[1;34mTangling: \e[91mrc.org\e[0;97m"
~/dotfiles/org-tangle ~/dotfiles/rc.org > /dev/null 2>&1
#+end_src
*** Tangle config.org
#+begin_src sh
echo "\n\e[1;34mTangling: \e[91mconfig.org\e[0;97m"
~/dotfiles/org-tangle ~/dotfiles/emacs.d/config.org > /dev/null 2>&1
#+end_src
** org-tangle
:PROPERTIES:
:header-args+: :tangle ~/dotfiles/org-tangle :shebang "#!/usr/bin/env emacs --script"
:END:
Standalone emacs-lisp script to tangle rc.org and config.org.
#+begin_src emacs-lisp
(if (> (length command-line-args) 4)
    (message "too many args!")
  (require 'org)
  (org-babel-tangle-file (expand-file-name (nth 3 command-line-args))))
#+end_src
** pass
Extensions and utilities for [[https://www.passwordstore.org/][pass]] password manager.
*** peco
:PROPERTIES:
:header-args+: :tangle ~/.password-store/.extensions/peco.bash :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
name=$(rg -g "*.gpg" "$HOME/.password-store" --files \
           | sed 's@'"$HOME"'/\.password-store/\(.\+\?\)\.gpg@\1@' \
           | peco --prompt="[pass]")

[[ -n "$name" ]] && pass -c $name
#+end_src
*** rofi
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.password-store/.extensions/rofi.bash") :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
name=$(rg -g "*.gpg" "$HOME/.password-store" --files \
           | sed 's@'"$HOME"'/\.password-store/\(.\+\?\)\.gpg@\1@' \
           | rofi -dmenu -p "[pass] " -font "Iosevka 25")

if [[ -n "$name" ]]; then
    ps axf | grep 'greenclip daemon' | grep -v grep | awk '{print $1}' | xargs kill -20
    pass -c $name
    sleep 45
    greenclip print ' '
    ps axf | grep 'greenclip daemon' | grep -v grep | awk '{print $1}' | xargs kill -18
fi
#+end_src
** playerctl-cmus
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/playerctl-cmus") :shebang "#!/usr/bin/env bash"
:END:
Wrapper around playerctl to control cmus as well.
#+begin_src sh
other=$(ps axc | grep 'spotify')
if [ ! -z "$other" ]; then
    playerctl $1
else
    if [ "$1" = "play-pause" ]; then
        if [ "$(cmus-remote -Q | grep status)" = "status paused" ]; then
           cmus-remote -p
        elif [ "$(cmus-remote -Q | grep status)" = "status playing" ]; then
            cmus-remote -u
        fi
    elif [ "$1" = "next" ]; then
        cmus-remote -n
    elif [ "$1" = "previous" ]; then
        cmus-remote -r
    fi

fi
#+end_src
** spotify
:PROPERTIES:
:header-args+:  :tangle (when (eq system-type 'gnu/linux) "~/bin/spotify") :shebang "#!/usr/bin/env bash"
:END:
Wrapper script around ~/usr/bin/spotify/~, taking advantage of path precedence to
always call spotify with command line arguments that fix odd UI scaling on i3wm.
#+begin_src sh
/usr/bin/spotify --force-device-scale-factor=2 > /dev/null 2>&1 &
#+end_src
** text-pager
:PROPERTIES:
:header-args+: :tangle ~/bin/text-pager :shebang "#!/usr/bin/env bash"
:END:
A pager that wraps words at the 80th column, useful for [[https://github.com/michael-lazar/rtv][michael-lazar/rtv]].
#+begin_src sh
[ $# -ge 1 -a -f "$1" ] && input="$1" || input="-"
cat $input | fold -w 80 -s | less
#+end_src
** updates
:PROPERTIES:
:header-args+: :tangle ~/bin/updates :shebang "#!/usr/bin/env bash"
:END:
A script to update pip, apt, and homebrew packages.
*** Initialize
Make sure not in a virtualenv and track pyenv python version.
#+begin_src sh
if [ -n "$VIRTUAL_ENV" ]; then
  echo 'Exit virtualenv first'
elif [ -n "$PYTHONPATH" ]; then
  echo 'Not updating, PYTHONPATH is set.'
else
	# Track global python version
	globalpython=$(echo $(pyenv version) | cut -d' ' -f1)
#+end_src
*** Python 2 pip
#+begin_src sh
# Update pip for python 2
pyenv global $python2version
echo -e "\e[1;34mUpdating: \e[91mpip2\e[0;97m"
IFS=$'\n'
echo  $'Getting outdated pip2 packages...'
res=$(pip list -o --format=legacy | sed 's/ .*//')

if [ -z "$res" ]; then
    echo $'All packages up to date.'
else
    echo $res | xargs pip install --upgrade
fi
pip freeze > ~/dotfiles/installed-programs/pip2.txt
sed -i -e 's/=.*//' ~/dotfiles/installed-programs/pip2.txt
#+end_src
*** Python 3 pip
#+begin_src sh
# Update pip for python 3
pyenv global $python3version
echo -e "\n\e[1;34mUpdating: \e[91mpip3\e[0;97m"
IFS=$'\n'
echo  $'Getting outdated pip3 packages...'
res=$(pip list -o --format=legacy | sed 's/ .*//' | sed '/\(^$\|requests\)/d')

if [ -z "$res" ]; then
    echo $'All packages up to date.'
else
    echo $res | xargs pip install --upgrade
fi
pip freeze > ~/dotfiles/installed-programs/pip3.txt
sed -i -e 's/=.*//' ~/dotfiles/installed-programs/pip3.txt
#+end_src
*** Package manager
**** Darwin
#+begin_src sh :tangle (when (eq system-type 'darwin) "~/bin/updates")
pyenv global system
echo -e "\n\e[1;34mUpdating: \e[91mHomebrew\e[0;97m"
brew update
brew upgrade
brew cleanup
brew prune
brew doctor

brew bundle dump --force --file=~/dotfiles/installed-programs/brew.rb
#+end_src

**** GNU/Linux
#+begin_src sh :tangle (when (eq system-type 'gnu/linux) "~/bin/updates")
echo -e "\n\e[1;34mUpdating: \e[91mapt-get\e[0;97m"
sudo apt-get update
sudo apt-get upgrade

apt list --installed | sed 's@/.*@@' | tail -n+2 > ~/dotfiles/installed-programs/apt.txt
#+end_src
*** Finalize
#+begin_src sh
echo " "
echo -e "\e[1;34mDone"

pyenv global $globalpython # Set python version back to original
fi
#+end_src
** wfname
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'darwin) "~/bin/wfname") :shebang "#!/usr/bin/env python"
:END:
Get the name of the current Alfred workflow (since last I checked Alfred
doesn't store workflows in directories with logical names).
#+begin_src python
from __future__ import print_function
import plistlib,sys

try:
    print('\nWorkflow: '+plistlib.readPlist('info.plist')['name'])
except IOError:
    print('No \'info. plist\' file. ')
#+end_src
* Local vars
Tangles the files asynchronously on save.
#+begin_example
# Local Variables:
# after-save-hook: (git-gutter diego/async-babel-tangle)
# org-pretty-entities: nil
# End:
#+end_example
