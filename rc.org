#+TITLE: rc.org
#+PROPERTY: header-args :comments link :mkdirp yes :results silent

* Intro

This is where I keep the bulk of my dotfiles (that aren't emacs or zsh). If it
seems like a bit of a mess to keep it all in one place, note that this is /much/
more readable in org format than in rendered markdown.

* Contents                                                              :toc:
- [[#intro][Intro]]
- [[#config][Config]]
  - [[#bashrc][bashrc]]
  - [[#bspwm][bspwm]]
  - [[#comptonconf][compton.conf]]
  - [[#darktooththeme][darktooth.theme]]
  - [[#dunstrc][dunstrc]]
  - [[#fish][fish]]
  - [[#fontsconf][fonts.conf]]
  - [[#git][git]]
  - [[#networkmanager_dmenu][networkmanager_dmenu]]
  - [[#polybar][polybar]]
  - [[#profile][profile]]
  - [[#pythonrcpy][pythonrc.py]]
  - [[#rofi][rofi]]
  - [[#rsync-exclude][rsync-exclude]]
  - [[#termite][termite]]
  - [[#tmuxconf][tmux.conf]]
  - [[#xresources][Xresources]]
  - [[#xterm-24bitterminfo][xterm-24bit.terminfo]]
  - [[#zathurarc][zathurarc]]
- [[#scripts][Scripts]]
  - [[#desktop-record][desktop-record]]
  - [[#wm-exit-rofi][wm-exit-rofi]]
  - [[#wm-exit][wm-exit]]
  - [[#no-lock-fullscreen][no-lock-fullscreen]]
  - [[#ocrpdf][ocrpdf]]
  - [[#ocrpdf2][ocrpdf2]]
  - [[#pass][pass]]
  - [[#playerctl-cmus][playerctl-cmus]]
  - [[#rofi-files][rofi-files]]
  - [[#snapbackup][snapbackup]]
  - [[#spectrum_ls][spectrum_ls]]
  - [[#text-pager][text-pager]]
  - [[#updates][updates]]
  - [[#update-volume][update-volume]]
- [[#desktop-files][Desktop files]]
  - [[#cmusdesktop][cmus.desktop]]
  - [[#emacs][emacs]]
  - [[#firefoxdesktop][firefox.desktop]]
  - [[#spotifydesktop][spotify.desktop]]
  - [[#vlc-dvddesktop][vlc-dvd.desktop]]
- [[#local-vars][Local vars]]

* Config
** bashrc
:PROPERTIES:
:header-args+: :tangle ~/.bashrc
:END:
#+begin_src sh
# source ~/.profile >& /dev/null
# [ -z "$EMACS" ] && exec fish
# exec fish
#+end_src
** bspwm
*** bspwmrc
:PROPERTIES:
:header-args+: :tangle ~/.config/bspwm/bspwmrc :shebang "#!/bin/sh"
:END:
#+begin_src sh
xsetroot -cursor_name left_ptr
killall -q sxhkd; sxhkd &

killall -q polybar
while pgrep -u $UID -x polybar >/dev/null; do sleep 1; done
polybar simple &
ln -sf /tmp/polybar_mqueue.$! /tmp/ipc-polybar-simple
killall -q udiskie; udiskie &
nitrogen --restore &
setxkbmap dvorak -option ctrl:nocaps &
# dropbox-cli start &
killall unclutter; unclutter &
killall -q xautolock; xautolock -corners ---- -time 5 -locker "slock" &
killall -q xss-lock; xss-lock -- slock &
xcape -e 'Control_L=Escape' &
pactl subscribe | ~/bin/update-volume &
killall syncthing; syncthing -no-browser &

xset r rate 300 50 &

# bspc config initial_polarity     second_child
bspc config focus_follows_pointer  true
bspc config external_rules_command "$HOME/.config/bspwm/rules.scm"

bspc monitor -d 1 2 3 4 5 6 7 8 9

bspc config border_width   5
bspc config window_gap     30
bspc config left_padding   30
bspc config bottom_padding 30
bspc config right_padding  30
bspc config top_padding    70
bspc config split_ratio    0.5

bspc config focused_border_color "#928374"
bspc config normal_border_color  "#504945"

bspc rule -a Nitrogen    state=floating
bspc rule -a Screenkey   manage=off
bspc rule -a Pavucontrol state=floating
bspc rule -a D-feet      state=floating
bspc rule -a Pcmanfm     state=floating
bspc rule -a Zathura     state=tiled

st -T st-float -e tmux &
#+end_src
*** rules
:PROPERTIES:
:header-args+: :tangle ~/.config/bspwm/rules.scm :shebang "#!/usr/bin/csi -s"
:END:
#+begin_src scheme
(use scsh-process)

(define args (command-line-arguments))

(define wid (car args))
(define class (cadr args))
(define instance (caddr args))
(define title (string-chomp (run/string (xtitle ,wid))))

(cond ((substring-index "emacs" instance)
       (cond ((equal? title "*eshell: floating*")
              (with-output-to-file "/tmp/esh-float"
                (lambda () (display wid) (newline)))
              (display "state=floating hidden=on sticky=on")
              (run (wmctrl -i -r ,wid -e "0,120,160,2320,540")))
             ;; ((equal? title "* eshell")
             ;;  (display "state=floating")
             ;;  (run (wmctrl -i -r ,wid -e "0,,,1085,603")))
             ((equal? title "*erc: floating*")
              (with-output-to-file "/tmp/erc-float"
                (lambda () (display wid) (newline)))
              (display "state=floating hidden=on sticky=on")
              (run (wmctrl -i -r ,wid -e "0,120,770,1085,560")))
             (else (display "state=tiled desktop=^2"))))
      ((equal? instance "st-256color")
       (when (equal? title "htop")
         (display "state=floating"))
       (when (equal? title "st-float")
         (with-output-to-file "/tmp/st-float"
           (lambda () (display wid) (newline)))
         (display "state=floating hidden=on sticky=on")
         (run (wmctrl -i -r ,wid -e "0,1350,770,1085,540")))))
#+end_src
*** sxhkdrc
:PROPERTIES:
:header-args+: :tangle ~/.config/sxhkd/sxhkdrc
:END:
#+begin_src conf
#
# wm independent hotkeys
#

# terminal emulator
super + Return
    emacsclient --eval '(d/eshell-floating)' && \
    id=$(</tmp/esh-float) && \
    bspc node $id --flag hidden && \
    bspc node -f $id

super + space
    emacsclient --eval '(d/erc-floating)' && \
    id=$(</tmp/erc-float) && \
    bspc node $id --flag hidden && \
    bspc node -f $id

super + z
    id=$(</tmp/st-float) && \
    bspc node $id --flag hidden && \
    bspc node -f $id
# program launcher

alt + space
    rofi -combi-modi window,drun -show combi -modi combi # -display-combi ''
    # rofi -show drun -sidebar-mode

# passwords
super + p
    ~/.password-store/.extensions/rofi.bash

# make sxhkd reload its configuration files:
super + Escape
    pkill -USR1 -x sxhkd

#
# bspwm hotkeys
#

# quit bspwm normally
super + shift + period
    wm-exit-rofi

super + shift + p
   ~/.config/bspwm/bspwmrc

# close and kill
super + {_,shift + }apostrophe
    bspc node -{c,k}

# alternate between the tiled and monocle layout
super + m
    bspc desktop -l next

# if the current node is automatic, send it to the last manual, otherwise pull
# the last leaf
super + y
    bspc query -N -n focused.automatic && \
    bspc node -n last.!automatic || bspc node last.leaf -n focused



# swap the current node and the biggest node
super + g
    bspc node -s biggest

# rotate
super + r
    bspc node @/ -R 90

super + R
    bspc node @/ -R -90
#
# state/flags
#

# set the window state
super + {period,u,f}
    bspc node -t {tiled,~fullscreen,~floating}

# set the node flags
super + ctrl + {x,y,z}
    bspc node -g {locked,sticky,private}


# focus/swap
#

# focus the node in the given direction
super + {_,shift + }{h,t,n,s}
    bspc node -{f,s} {west,south,north,east}

# focus the node for the given path jump
# super + {p,b,comma,period}
#     bspc node -f @{parent,brother,first,second}

# focus the next/previous node in the current desktop
super + {_,shift + }c
    bspc node -f {next,prev}.local

# focus the next/previous desktop in the current monitor
super + bracket{left,right}
    bspc desktop -f {prev,next}.local

# focus the last node/desktop
super + {grave,Tab}
    bspc {node,desktop} -f last

# focus the older or newer node in the focus history
super + {o,i}
    bspc wm -h off; \
    bspc node {older,newer} -f; \
    bspc wm -h on

# focus or send to the given desktop
super + {_,shift + }{1-9,0}
    bspc {desktop -f,node -d} '^{1-9,10}'

#
# preselect
#

# preselect the direction
super + ctrl + {h,t,n,s}
    bspc node -p {west,south,north,east}

# preselect the ratio
super + ctrl + {1-9}
    bspc node -o 0.{1-9}

# move into preselection
super + l
    bspc node -n last.!automatic.local

# cancel the preselection for the focused node
super + ctrl + space
    bspc node -p cancel

# cancel the preselection for the focused desktop
super + ctrl + shift + space
    bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

#
# move/resize
#

# expand a window by moving one of its side outward
super + alt + {h,t,n,s}
    bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}

# contract a window by moving one of its side inward
super + alt + shift + {h,t,n,s}
    bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

# move a floating window
super + {Left,Down,Up,Right}
    bspc node -v {-20 0,0 20,0 -20,20 0}

XF86MonBrightnessUp
#     # ~/bin/blocks/xbacklight +
    light -A 5
XF86MonBrightnessDown
#     # ~/bin/blocks/xbacklight -
    light -U 5
# XF86LaunchA
#     scrot ~/Pictures/Screenshots/%Y-%m-%d_%H:%M:%S.png
# @XF86LaunchB
#     scrot -s ~/Pictures/Screenshots/%Y-%m-%d_%H:%M:%S.png
# shift + XF86LaunchB
#     scrot -ub ~/Pictures/Screenshots/%Y-%m-%d_%H:%M:%S.png
# XF86KbdBrightnessDown
#     ~/bin/blocks/kbdbacklight -
# XF86KbdBrightnessUp
#     ~/bin/blocks/kbdbacklight +
# XF86AudioPrev
#     playerctl previous
# XF86AudioNext
#     playerctl next
# XF86AudioPlay
#     playerctl play-pause
super + F1
    playerctl play-pause
super + F2
    playerctl previous
super + F3
    playerctl next
XF86AudioMute
    amixer -D pulse sset Master toggle && \
    echo hook:module/volume1 > /tmp/ipc-polybar-simple
XF86AudioLowerVolume
    amixer -D pulse sset Master 5%- && \
    echo hook:module/volume1 > /tmp/ipc-polybar-simple
XF86AudioRaiseVolume
    amixer -D pulse sset Master 5%+ && \
    echo hook:module/volume1 > /tmp/ipc-polybar-simple
XF86AudioMicMute
    amixer set Capture toggle
XF86Display
    slock
#+end_src
** compton.conf
:PROPERTIES:
:header-args+: :tangle ~/.config/compton.conf
:END:
#+begin_src conf
# Shadow
shadow = true;
# no-dnd-shadow = true;
# no-dock-shadow = true;
clear-shadow = true;
detect-rounded-corners = true;
shadow-radius = 10;
# shadow-offset-x = -96;
# shadow-offset-y = -60;
# shadow-opacity = .8;
shadow-offset-x = -15;
shadow-offset-y = -15;
shadow-opacity = .8;
shadow-ignore-shaped = false;
shadow-exclude = [
    "name = 'Notification'",
    "name = 'screenkey'",
# workaround for conky until it provides window properties:
    "override_redirect = 1 && !WM_CLASS@:s",
#   "class_g ?= 'Dunst'",
# disable shadows for hidden windows:
    "_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'",
    "_GTK_FRAME_EXTENTS@:c",
# disables shadows on sticky windows:
#   "_NET_WM_STATE@:32a *= '_NET_WM_STATE_STICKY'",
# disables shadows on i3 frames
    "class_g ?= 'i3-frame'"
];

# shadow-exclude-reg = "x10+0+0";
# xinerama-shadow-crop = true;

menu-opacity = 0.95;
# inactive-opacity = 0.8;
inactive-opacity = 1;
active-opacity = 1;
alpha-step = 0.01;
inactive-dim = .4;
blur-background = false;
blur-kern = "3x3box";

fading = true;
fade-delta = 3;
fade-in-step = 0.03;
fade-out-step = 0.03;
fade-exclude = [ ];

backend = "xrender";
mark-wmwin-focused = true;
mark-ovredir-focused = false;
detect-client-opacity = true;
unredir-if-possible = true;
refresh-rate = 0;
vsync = "none";
dbe = false;
paint-on-overlay = true;
focus-exclude = [
"class_g = 'Cairo-clock'",
"_NET_WM_NAME@:s = 'rofi'",
"_NET_WM_NAME@:s = 'screenkey'",
"name *?= 'i3lock'"
];

detect-transient = true;
detect-client-leader = true;
invert-color-include = [ ];
glx-copy-from-front = false;
glx-swap-method = "undefined";

opacity-rule = [
"100:class_g = 'screenkey'",
"0:_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'",
"100:_NET_WM_STATE@:32a *= '_NET_WM_STATE_STICKY'"
];

wintypes :
{
  tooltip :
  {
    fade = true;
    shadow = false;
    opacity = 0.85;
    focus = true;
  };
  fullscreen :
  {
    fade = true;
    shadow = false;
    opacity = 1;
    focus = true;
  };
};
#+end_src
** darktooth.theme
:PROPERTIES:
:header-args+: :tangle ~/.config/cmus/darktooth.theme
:END:
A theme for cmus based on [[https://github.com/emacsfodder/emacs-theme-darktooth][darktooth]].
#+begin_src conf
# Directory colors
set color_win_dir=108

# Normal text
set color_win_fg=default

# Window background color.
set color_win_bg=0

# Command line color.
set color_cmdline_bg=0
set color_cmdline_fg=6

# Color of error messages displayed on the command line.
set color_error=lightred

# Color of informational messages displayed on the command line.
set color_info=lightgreen

# Color of the separator line between windows in view (1).
set color_separator=246

# Color of window titles (topmost line of the screen).
set color_win_title_bg=234
set color_win_title_fg=12

# Status line color (shows remaining time and playback options).
set color_statusline_bg=0
set color_statusline_fg=10

# Color of currently playing track.
set color_win_cur=009

# Color of the line displaying currently playing track.
set color_titleline_bg=234
set color_titleline_fg=12

# Color of the selected row which is also the currently playing track in active window.
set color_win_cur_sel_bg=237
set color_win_cur_sel_fg=9

# Color of the selected row which is also the currently playing track in inactive window.
set color_win_inactive_cur_sel_bg=236
set color_win_inactive_cur_sel_fg=9

# Color of selected row in active window.
set color_win_sel_bg=237
set color_win_sel_fg=default

# Color of selected row in inactive window.
set color_win_inactive_sel_bg=236
set color_win_inactive_sel_fg=default
#+end_src
** dunstrc
:PROPERTIES:
:header-args+: :tangle ~/.config/dunst/dunstrc
:END:
#+begin_src conf
# -*- mode: conf -*-
[global]
    font = Iosevka Term 9

    # Allow a small subset of html markup:
    #   <b>bold</b>
    #   <i>italic</i>
    #   <s>strikethrough</s>
    #   <u>underline</u>
    #
    # For a complete reference see
    # <http://developer.gnome.org/pango/stable/PangoMarkupFormat.html>.
    # If markup is not allowed, those tags will be stripped out of the
    # message.
    allow_markup = yes

    # The format of the message.  Possible variables are:
    #   %a  appname
    #   %s  summary
    #   %b  body
    #   %i  iconname (including its path)
    #   %I  iconname (without its path)
    #   %p  progress value if set ([  0%] to [100%]) or nothing
    # Markup is allowed
    format = "<b>%s</b> %p\n%b"

    # Sort messages by urgency.
    sort = yes

    # Show how many messages are currently hidden (because of geometry).
    indicate_hidden = yes

    # Alignment of message text.
    # Possible values are "left", "center" and "right".
    alignment = left

    # The frequency with wich text that is longer than the notification
    # window allows bounces back and forth.
    # This option conflicts with "word_wrap".
    # Set to 0 to disable.
    bounce_freq = 5


    # Show age of message if message is older than show_age_threshold
    # seconds.
    # Set to -1 to disable.
    show_age_threshold = 60

    # Split notifications into multiple lines if they don't fit into
    # geometry.
    word_wrap = no

    # Ignore newlines '\n' in notifications.
    ignore_newline = no


    # The geometry of the window:
    #   [{width}]x{height}[+/-{x}+/-{y}]
    # The geometry of the message window.
    # The height is measured in number of notifications everything else
    # in pixels.  If the width is omitted but the height is given
    # ("-geometry x2"), the message window expands over the whole screen
    # (dmenu-like).  If width is 0, the window expands to the longest
    # message displayed.  A positive x is measured from the left, a
    # negative from the right side of the screen.  Y is measured from
    # the top and down respectevly.
    # The width can be negative.  In this case the actual width is the
    # screen width minus the width defined in within the geometry option.
    geometry = "700x5-30+70"

    # Shrink window if it's smaller than the width.  Will be ignored if
    # width is 0.
    shrink = yes

    # The transparency of the window.  Range: [0; 100].
    # This option will only work if a compositing windowmanager is
    # present (e.g. xcompmgr, compiz, etc.).
    # transparency = 15

    # Don't remove messages, if the user is idle (no mouse or keyboard input)
    # for longer than idle_threshold seconds.
    # Set to 0 to disable.
    # default 120
    idle_threshold = 120

    # Which monitor should the notifications be displayed on.
    monitor = 0

    # Display notification on focused monitor.  Possible modes are:
    #   mouse: follow mouse pointer
    #   keyboard: follow window with keyboard focus
    #   none: don't follow anything
    #
    # "keyboard" needs a windowmanager that exports the
    # _NET_ACTIVE_WINDOW property.
    # This should be the case for almost all modern windowmanagers.
    #
    # If this option is set to mouse or keyboard, the monitor option
    # will be ignored.
    follow = mouse

    # Should a notification popped up from history be sticky or timeout
    # as if it would normally do.
    sticky_history = yes

    # Maximum amount of notifications kept in history
    history_length = 20

    # Display indicators for URLs (U) and actions (A).
    show_indicators = yes

    # The height of a single line.  If the height is smaller than the
    # font height, it will get raised to the font height.
    # This adds empty space above and under the text.
    line_height = 0

    # Draw a line of "separator_height" pixel height between two
    # notifications.
    # Set to 0 to disable.
    separator_height = 1

    # Padding between text and separator.
    # padding = 8
    padding = 8

    # Horizontal padding.
    horizontal_padding = 10

    # Define a color for the separator.
    # possible values are:
    #  * auto: dunst tries to find a color fitting to the background;
    #  * foreground: use the same color as the foreground;
    #  * frame: use the same color as the frame;
    #  * anything else will be interpreted as a X color.
    separator_color = #454947

    # Print a notification on startup.
    # This is mainly for error detection, since dbus (re-)starts dunst
    # automatically after a crash.
    startup_notification = false

    # dmenu path.
    dmenu = /usr/bin/dmenu -p dunst:

    # Browser for opening urls in context menu.
    browser = firefox-nightly

    # Align icons left/right/off
    # icon_position = left

    # Paths to default icons.
    # icon_folders = /usr/share/icons/Adwaita/48x48/status/:/usr/share/icons/Adwaita/48x48/devices/

    # Limit icons size.
    max_icon_size=128

[frame]
    width = 5
    color = "#504945"

[shortcuts]

    # Shortcuts are specified as [modifier+][modifier+]...key
    # Available modifiers are "ctrl", "mod1" (the alt-key), "mod2",
    # "mod3" and "mod4" (windows-key).
    # Xev might be helpful to find names for keys.

    # Close notification.
    close = mod1+space

    # Close all notifications.
    # close_all = ctrl+shift+space
    close_all = ctrl+mod1+space

    # Redisplay last message(s).
    # On the US keyboard layout "grave" is normally above TAB and left
    # of "1".
    history = ctrl+mod4+h

    # Context menu.
    context = ctrl+mod1+c

[urgency_low]
    # IMPORTANT: colors have to be defined in quotation marks.
    # Otherwise the "#" and following would be interpreted as a comment.
    background = "#282828"
    foreground = "#FDF4C1"
    timeout = 10

[urgency_normal]
    background = "#282828"
    foreground = "#FDF4C1"
    timeout = 10

[urgency_critical]
    background = "#D62929"
    foreground = "#F9FAF9"
    timeout = 0


# Every section that isn't one of the above is interpreted as a rules to
# override settings for certain messages.
# Messages can be matched by "appname", "summary", "body", "icon", "category",
# "msg_urgency" and you can override the "timeout", "urgency", "foreground",
# "background", "new_icon" and "format".
# Shell-like globbing will get expanded.
#
# SCRIPTING
# You can specify a script that gets run when the rule matches by
# setting the "script" option.
# The script will be called as follows:
#   script appname summary body icon urgency
# where urgency can be "LOW", "NORMAL" or "CRITICAL".
#
# NOTE: if you don't want a notification to be displayed, set the format
# to "".
# NOTE: It might be helpful to run dunst -print in a terminal in order
# to find fitting options for rules.

#[espeak]
#    summary = "*"
#    script = dunst_espeak.sh

#[script-test]
#    summary = "*script*"
#    script = dunst_test.sh

#[ignore]
#    # This notification will not be displayed
#    summary = "foobar"
#    format = ""

#[signed_on]
#    appname = Pidgin
#    summary = "*signed on*"
#    urgency = low
#
#[signed_off]
#    appname = Pidgin
#    summary = *signed off*
#    urgency = low
#
#[says]
#    appname = Pidgin
#    summary = *says*
#    urgency = critical
#
#[twitter]
#    appname = Pidgin
#    summary = *twitter.com*
#    urgency = normal
#
#[Claws Mail]
#    appname = claws-mail
#    category = email.arrived
#    urgency = normal
#    background = "#2F899E"
#    foreground = "#FFA247"
#
#[mute.sh]
#     appname = mute
#     category = mute.sound
#     script = mute.sh
#
#[JDownloader]
#    appname = JDownloader
#    category = JD
#    background = "#FFA247"
#    foreground = "#FFFFFF"
#
#[newsbeuter]
#    summary = *Feeds*
#    background = "#A8EB41"
#    foreground = "#FFFFFF"
#
[irc]
        appname = weechat
        timeout = 0
        background = "#0033bb"
        foreground = "#dddddd"
#
[weechat hl]
     appname = weechat
     category = weechat.HL
     background = "#FF5C47"
     foreground = "#FFFFFF"
#
[weechat pn]
     appname = weechat
     category = weechat.PM
     background = "#D53B84"
     foreground = "#FFFFFF"
#
#[CMUS]
#    appname = CMUS
#    category = cmus
#    background = "#6C4AB7"
#    foreground = "#FFE756"
#
#
#     background = "#30AB70"
#     foreground = "#F67245"
#
# vim: ft=cfg
#+end_src
** fish
*** config.fish
:PROPERTIES:
:header-args+: :tangle ~/.config/fish/config.fish :comments no
:END:
**** defaults
#+begin_src fish
if [ $TERM = "eterm-256color" ];
    set fish_term24bit 0
else;
    if [ $TERM = "linux" ];
        set oldterm "linux"
    end
    set -gx TERM xterm-256color
    if [ "$oldterm" = "linux" ];
        set -g fish_color_autosuggestion 282828
    end
end
#+end_src
**** prompt
***** disable vi prompt
#+begin_src fish
function fish_mode_prompt
  # NOOP - Disable vim mode indicator
end
#+end_src
***** git prompt
#+begin_src fish
set __fish_git_prompt_show_informative_status 1
set __fish_git_prompt_hide_untrackedfiles 1
set __fish_git_prompt_showupstream "informative"
set __fish_git_prompt_color_branch brgreen
set __fish_git_prompt_color_dirtystate brred
set __fish_git_prompt_color_stagedstate brblue
set __fish_git_prompt_color_untrackedfiles $fish_color_normal
set __fish_git_prompt_color_cleanstate brgreen
set __fish_git_prompt_color_invalidstate brred
set __fish_git_prompt_color_upstream brmagenta

# # Status Chars
set __fish_git_prompt_char_untrackedfiles "…"
set __fish_git_prompt_char_dirtystate "✚"
set __fish_git_prompt_char_stagedstate '●'
set __fish_git_prompt_char_upstream_ahead '↑'
set __fish_git_prompt_char_upstream_behind '↓'
set __fish_git_prompt_char_upstream_prefix ""
set __fish_git_prompt_char_conflictedstate "✖"
set __fish_git_prompt_char_cleanstate "✔"
#+end_src
***** prompt
#+begin_src fish
set __fish_prompt_normal (set_color normal)
function fish_prompt --description 'Write out the prompt'
    set -l last_status $status
    printf '%s' (string trim (__fish_vcs_prompt))
    set_color BDAE93
    printf '%s ' (prompt_pwd)
    set_color DD6F48
    echo -n "λ "
    set_color normal
end
#+end_src
**** alias
#+begin_src fish
# alias ls='exa --group-directories-first --sort=extension'
alias rg="rg -M 200 -i -g '!archive-contents' --colors 'line:style:bold' --colors 'path:style:bold'"
alias fzf='fzf --reverse'
#+end_src
*** fishfile
:PROPERTIES:
:header-args+: :tangle ~/.config/fish/fishfile :comments no
:END:
Extensions
#+begin_src text fish-colored-man
done
getopts
pyenv
z
omf/plugin-foreign-env
decors/fish-colored-man
#+end_src
*** functions
**** fish_user_key_bindings.fish
:PROPERTIES:
:header-args+: :tangle ~/.config/fish/functions/fish_user_key_bindings.fish :comments no
:END:
#+begin_src fish
function fish_user_key_bindings
    fish_vi_key_bindings
    bind -M insert \cp cool-ps
    bind -M insert \cr cool-history
    bind -M insert \cc kill-whole-line force-repaint
    bind -M normal \e insert-sudo
    bind -M insert \c_ "if commandline -P; commandline -f cancel; else; set fish_bind_mode default; commandline -f backward-char force-repaint; end"
    for mode in insert default visual
        bind -M $mode \cf forward-char
    end
end
#+end_src
**** fuck.fish
:PROPERTIES:
:header-args+: :tangle ~/.config/fish/functions/fuck.fish :comments no
:END:
#+begin_src fish
function fuck -d "Correct your previous console command"
  set -l fucked_up_command $history[1]
  env TF_ALIAS=fuck PYTHONIOENCODING=utf-8 thefuck $fucked_up_command | read -l unfucked_command
  if [ "$unfucked_command" != "" ]
    eval $unfucked_command
    builtin history delete --exact --case-sensitive -- $fucked_up_command
    builtin history merge ^ /dev/null
  end
end
#+end_src
**** cool-ps.fish
:PROPERTIES:
:header-args+: :tangle ~/.config/fish/functions/cool-ps.fish :comments no
:END:
#+begin_src fish
function cool-ps
    ps axco user,pid,%cpu,%mem,start,time,command | \
    tail -n +2 | \
    fzf --reverse --prompt "[ps] " | \
    awk '{print $2}' | \
    read -l pid

    if test $pid
        commandline -i $pid
    end
end
#+end_src
**** cool-history.fish
:PROPERTIES:
:header-args+: :tangle ~/.config/fish/functions/cool-history.fish :comments no
:END:
#+begin_src fish
function cool-history
    history | fzf --reverse --prompt "[history] " -q (commandline -b) | read -l hist_item
    if test $hist_item
        commandline -r $hist_item
    end
end
#+end_src
**** insert-sudo.sh
:PROPERTIES:
:header-args+: :tangle ~/.config/fish/functions/insert-sudo.fish :comments no
:END:
#+begin_src fish
function insert-sudo
    set -l pos commandline -C
    commandline -C 0
    commandline -i "sudo "
    commandline -C $pos
end
#+end_src
*** universal vars
#+begin_src fish
set -U man_bold -o brred
set -U man_underline -o brgreen
set -U man_standout bryellow -b blue
set -U __done_min_cmd_duration 10000
set -U fish_color_autosuggestion 7C6F64
set -U fish_color_command brgreen
set -U fish_color_param normal
set -U fish_color_comment 7C6F64
set -U fish_greeting
set -U fish_cursor_insert line
set -U fish_cursor_replace_one underscore
#+end_src
** fonts.conf
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/fontconfig/fonts.conf") :comments no
:END:
#+begin_src xml
<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
  <alias>
    <family>Iosevka Term</family>
    <default>
      <family>monospace</family>
    </default>
    <prefer>
      <family>FontAwesome</family>
    </prefer>
  </alias>
  <match>
    <test compare="eq" name="family">
      <string>sans-serif</string>
    </test>
    <test compare="eq" name="family">
      <string>monospace</string>
    </test>
    <edit mode="delete" name="family"/>
  </match>
</fontconfig>
#+end_src
** git
*** gitconfig
:PROPERTIES:
:header-args+: :tangle ~/.gitconfig
:END:
I know, it probably doesn't make sense to keep my gitconfig here.
**** media
#+begin_src conf
[filter "media"]
    required = true
    clean = git media clean %f
    smudge = git media smudge %f
#+end_src
**** user
#+begin_src conf
[user]
    name = dieggsy
    email = dieggsy@protonmail.com
    signingkey = 1DF81CB1
#+end_src
**** filter
#+begin_src conf
[filter "lfs"]
    clean = git-lfs clean %f
    smudge = git-lfs smudge %f
    required = true
#+end_src
**** core
#+begin_src conf
[core]
    editor = emacsclient -t
    excludesfile = ~/.gitignore
    pager = "less"
#+end_src
**** gpg
#+begin_src conf
[gpg]
    program = gpg2
#+end_src
**** alias
#+begin_src conf
[alias]
    eclipse = !git fetch upstream && git rebase -s recursive -X theirs upstream/master
    gconfig = config --global
    lconfig = config --local
    mypull = pull -s recursive -X ours
    myrebase = rebase -s recursive -X theirs
    optimize = "!f() { git reflog expire --all --expire=now && git gc --prune=now --aggressive; }; f"
    plog = log --graph --pretty=format:'%C(bold black)%h%Creset - %<(50,trunc)%C(bold normal)%s%Creset %<(20)%C(bold green)%an%Creset %<(15)%C(bold red)%cr%Creset%C(bold yellow)%d%Creset' --abbrev-commit
    plog-nocolor = log --graph --pretty=format:'%h - %<(50,trunc)%s %<(20)%an %<(15)%cr%d' --abbrev-commit
    update-from-upstream = pull --rebase -s recursive -X theirs upstream/master
    aliases = config --get-regexp '^alias\\.'
    a = add
    s = status
    sl = status --long
    c = checkout
    cb = checkout -b
    b = branch
    r = rebase
    p = pull
    pr = pull --rebase
    ps = push
    psf = push --force
#+end_src
**** http
#+begin_src conf
[http]
    postBuffer = 524288000
#+end_src
**** color
#+begin_src conf
[color]
    ui = auto
[color "status"]
    added = green bold
    changed = red bold
    untracked = red bold
[color "branch"]
    current = green bold
    remote = magenta bold
[color "diff"]
    new = green bold
    old = red bold
#+end_src
**** http
#+begin_src conf
[push]
    followTags = true
#+end_src
**** status
#+begin_src conf
[status]
    showUntrackedFiles = all
    short=true
    branch=true
#+end_src
**** commit
#+begin_src conf
[commit]
    gpgsign = true
#+end_src
**** push
#+begin_src conf
[push]
    followTags = true
#+end_src
**** github
#+begin_src conf
[github]
	user = dieggsy
#+end_src
*** gitignore
:PROPERTIES:
:header-args+: :tangle ~/.gitignore
:END:

#+begin_src conf
.DS\_Store
*.pyc
__pychache__
#+end_src
** networkmanager_dmenu
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/networkmanager-dmenu/config.ini")
:END:
#+begin_src conf
[dmenu]
dmenu_command = rofi
p = [Networks]
l = 10
rofi_highlight=True
# # Note that dmenu_command can contain arguments as well like `rofi -width 30`
# # Rofi and dmenu are set to case insensitive by default `-i`
# l = number of lines to display, defaults to number of total network options
# fn = font string
# nb = normal background (name, #RGB, or #RRGGBB)
# nf = normal foreground
# sb = selected background
# sf = selected foreground
# b =  (just set to empty value and menu will appear at the bottom
# m = number of monitor to display on
# p = Custom Prompt for the networks menu
# pinentry = Pinentry command

[editor]
terminal = termite
gui_if_available = True
# terminal = <name of terminal program>
# gui_if_available = <True or False>
#+end_src
** polybar
:PROPERTIES:
:header-args+: :tangle ~/.config/polybar/config
:END:
#+begin_src conf-windows
[colors]
background = #282828
foreground = #FDF4C1
black = ${colors.background}
white = ${colors.foreground}
green = #B8BB26
red = #FB4933
yellow = #FABD2F
blue = #83A598
purple = #D3869B
aqua = #8EC07C
orange = #FE8019
cyan = #3FD7E5
sienna = #DD6F48
light4 = #A89984
dark2 = #504945
alert = ${colors.red}

[bar/simple]
monitor = eDP-1
width = 2560
height = 40
; offset-x = 60
; offset-y = 60
fixed-center = true
border-bottom-size=5
border-bottom-color=${colors.dark2}
; bottom = true

background = ${colors.background}
foreground = ${colors.foreground}

; padding-left = 1

module-margin=1

font-0 = Iosevka Term:size=17;3
font-1 = fontawesome:size=17;3
font-2 = Weather Icons:size=17;3

; modules-left = date network bluez xwindow
modules-left = bspwm date network bluetooth xwindow
; modules-center = i3 bspwm
; modules-right = dropbox spotify cmus inbox-reddit github xkb weather xbacklight volume battery
modules-right = xkb weather xbacklight volume bat1 bat0

wm-restack = bspwm

cursor-click = pointer
cursor-scroll = ns-resize
click-left = ~/bin/blocks/xkb -toggle
enable-ipc = true

[module/xwindow]
type = internal/xwindow
label = %{F#BDAE93}%title:0:30:...%%{F-}

label-mounted =  %free%
label-unmounted = %mountpoint% not mounted

[module/bspwm]
type = internal/bspwm
format =<label-state>
; index-sort = true
wrapping-scroll = false
enable-click = false
enable-scroll = false
reverse-scroll = false

; Only show workspaces on the same output as the bar
pin-workspaces = true

; label-mode-padding = 1

; focused = Active workspace on focused monitor
label-focused = %name%
; label-separator =
label-focused-padding = 1
label-focused-foreground = #BDAE93
label-focused-background = ${colors.dark2}

; unfocused = Inactive workspace on any monitor
label-occupied =
; label-occupied-background=${colors.dark2}
; label-occupied-foreground=#BDAE93
; label-occupied-padding = 1

; visible = Active workspace on unfocused monitor
; label-visible = ●
; label-visible-padding = ${self.label-focused-padding}

; urgent = Workspace with urgency hint set
; label-urgent =
label-urgent-background = ${colors.alert}
label-urgent-foreground = ${colors.black}
label-urgent-padding = 1

label-empty =

[module/xbacklight]
type = internal/backlight
card = intel_backlight
; format-background = ${colors.dark2}
format-foreground = #BDAE93
; format-padding = 1
format =  <label>
label = %percentage%

[module/network]
click-left = networkmanager_dmenu
type = custom/script
exec = ~/bin/blocks/networkmanager
format-background = ${colors.dark2}
format-foreground = #BDAE93
format-padding = 1
interval = 2

[module/bluetooth]
type = custom/script
exec = rfkill list bluetooth | grep yes > /dev/null && echo '' || echo 
format-foreground = #BDAE93

[module/bluez]
click-left = blueman-manager
type = custom/script
exec = ~/bin/blocks/bluez
format-background = #076678
format-foreground = ${colors.white}
format-padding = 1
format-prefix = " "
interval = 4

[module/date]
type = custom/script
exec = date +'%%{F#665C54} %a %Y-%m-%d%%{F-} %%{F#BDAE93}%H:%M%%{F-}'
; format =  <label>
; format-background = ${colors.light4}
; format-foreground = ${colors.dark2}
; format-padding = 1
interval = 60
click-left = notify-send "$(cal --color=never | cut -c -20)"

[module/bat0]
type = internal/battery
format-full-background = ${colors.dark2}
format-full-foreground = #BDAE93
format-full-padding = 1
format-charging-background = ${colors.dark2}
format-charging-foreground = #BDAE93
format-charging-padding = 1
format-discharging-background = ${colors.dark2}
format-discharging-foreground = #BDAE93
format-discharging-padding = 1
battery = BAT0
adapter = ADP1
full-at = 100

format-full = %{A1:notify-send "$(upower -i /org/freedesktop/UPower/devices/battery_BAT0)":} <label-full>%{A}
format-charging = %{A1:notify-send "$(upower -i /org/freedesktop/UPower/devices/battery_BAT0)":}<animation-charging> <label-charging>%{A}
format-discharging = %{A1:notify-send "$(upower -i /org/freedesktop/UPower/devices/battery_BAT0)":}<ramp-capacity> <label-discharging>%{A}

label-full = %percentage%
label-charging = %percentage%
label-discharging = %percentage%

ramp-capacity-0 = 
ramp-capacity-1 = 
ramp-capacity-2 = 
ramp-capacity-3 = 
ramp-capacity-4 = 

animation-charging-0 = 
animation-charging-1 = 
animation-charging-2 = 
animation-charging-3 = 
animation-charging-4 = 
animation-charging-framerate = 750

[module/bat1]
type = internal/battery
; format-full-background = ${colors.dark2}
format-full-foreground = #BDAE93
; format-full-padding = 1
; format-charging-background = ${colors.dark2}
format-charging-foreground = #BDAE93
; format-charging-padding = 1
; format-discharging-background = ${colors.dark2}
format-discharging-foreground = #BDAE93
; format-discharging-padding = 1
battery = BAT1
adapter = ADP1
full-at = 100

format-full = %{A1:notify-send "$(upower -i /org/freedesktop/UPower/devices/battery_BAT0)":} <label-full>%{A}
format-charging = %{A1:notify-send "$(upower -i /org/freedesktop/UPower/devices/battery_BAT0)":}<animation-charging> <label-charging>%{A}
format-discharging = %{A1:notify-send "$(upower -i /org/freedesktop/UPower/devices/battery_BAT0)":}<ramp-capacity> <label-discharging>%{A}

label-full = %percentage%
label-charging = %percentage%
label-discharging = %percentage%

ramp-capacity-0 = 
ramp-capacity-1 = 
ramp-capacity-2 = 
ramp-capacity-3 = 
ramp-capacity-4 = 

animation-charging-0 = 
animation-charging-1 = 
animation-charging-2 = 
animation-charging-3 = 
animation-charging-4 = 
animation-charging-framerate = 750

[module/cpu]
type = internal/cpu

; Seconds to sleep between updates
; Default: 1
interval = 0.5
format-foreground = #BDAE93
; format = <label> <ramp-coreload>
format = <label>
label =  %percentage%%

ramp-coreload-0 = ▁
ramp-coreload-1 = ▂
ramp-coreload-2 = ▃
ramp-coreload-3 = ▄
ramp-coreload-4 = ▅
ramp-coreload-5 = ▆
ramp-coreload-6 = ▇
ramp-coreload-7 = █

[module/weather]
type = custom/script
exec = ~/bin/blocks/darksky
format-background = ${colors.dark2}
format-foreground = #BDAE93
format-padding = 1
click-left = xdg-open https://darksky.net
interval = 120
label-font = 3

[module/cmus]
type = custom/script
exec = ~/bin/blocks/mpris cmus
tail = true
click-left = playerctl --player=cmus play-pause
scroll-up = playerctl --player=cmus previous
scroll-down = playerctl --player=cmus next
format-prefix = " "
format-prefix-foreground = ${colors.green}

[module/spotify]
type = custom/script
exec = ~/bin/blocks/mpris spotify
tail = true
format-prefix = " "
format-prefix-foreground = ${colors.green}
click-left = playerctl --player=spotify play-pause
scroll-up = playerctl --player=spotify previous
scroll-down = playerctl --player=spotify next

[module/dropbox]
type = custom/script
exec = ~/bin/blocks/dropbox
interval = 2
format-prefix = " "
format-prefix-foreground = ${colors.cyan}

[module/github]
type = custom/script
exec = ~/bin/blocks/github-unread
interval = 10
format-prefix = " "
click-left = xdg-open https://github.com/notifications

[module/volume]
type = custom/ipc
hook-0 = ~/bin/blocks/amixer-pulse -display
initial = 1
scroll-down = ~/bin/blocks/amixer-pulse +
scroll-up = ~/bin/blocks/amixer-pulse -
click-left = ~/bin/blocks/amixer-pulse toggle
format-background = ${colors.dark2}
format-foreground = #BDAE93
format-padding = 1
; click-right = polybar-msg -p %pid% hook demo 2
; double-click-left = polybar-msg -p %pid% hook demo 3

[module/inbox-reddit]
type = custom/script
exec = ~/bin/blocks/reddit-unread
interval = 10
click-left = xdg-open https://reddit.com/message/unread
format-prefix = " "
format-prefix-foreground = #FF3F18

[module/xkb]
type = custom/ipc
hook-0 = ~/bin/blocks/xkb -display
initial = 1
format-prefix = " "

[settings]
screenchange-reload = true
;compositing-background = xor
;compositing-background = screen
;compositing-foreground = source
;compositing-border = over

[global/wm]
margin-top = 5
margin-bottom = 5
#+end_src
** profile
:PROPERTIES:
:header-args+: :tangle ~/.profile
:END:
#+begin_src sh
[ -d $HOME/.nix-profile ] && source ~/.nix-profile/etc/profile.d/nix.sh
if [ -d $HOME/.guix-profile ]; then
    export PATH=$HOME/.guix-profile/bin:$PATH
    export INFOPATH=$HOME/.guix-profile/share/info:$INFOPATH
fi

[ -d $HOME/.local/bin ] && export PATH=$HOME/.local/bin:$PATH
[ -d $HOME/.pyenv/bin ] && export PATH=$HOME/.pyenv/bin:$PATH
[ -d $HOME/.pyenv/shims ] && export PATH=$HOME/.pyenv/shims:$PATH
[ -d $HOME/bin ] && export PATH=$HOME/bin:$PATH
[ -d $HOME/.evm/bin ] && export PATH=$HOME/.evm/bin:$PATH

[ -d $HOME/.guix-profile/lib/locale/ ] && export GUIX_LOCPATH=$HOME/.guix-profile/lib/locale

[ -d $HOME/dotfiles/guix/ ] && export GUIX_PACKAGE_PATH="$HOME/dotfiles/guix/packages"
export XDG_DATA_DIRS="$HOME/.local/share:$HOME/.nix-profile/share:/usr/local/share:/usr/share"
export CHICKEN_REPOSITORY=~/.local/lib/chicken/8

gpgconf --launch gpg-agent
export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
gpg-connect-agent updatestartuptty /bye >&/dev/null

# if [ "$TERM" = "linux" ]; then
#     exec fish
# fi
#+end_src
** pythonrc.py
:PROPERTIES:
:header-args+: :tangle ~/.pythonrc.py :padline no
:END:

#+begin_src python
# -*- coding: utf-8 -*-

from __future__ import print_function, unicode_literals, division

try:
    def progBar(i, total, length=50, kind=None):
        """A nice progress bar to use with for loops."""
        i += 1
        n = int(i*length/total)
        percent = i/total*100
        frame = ("{0:6.2f}% |{1}{2}|".format(percent, '█'*n, ' '*(length-n))
                if kind is None else
                "{0:6.2f}% [{1}{2}]".format(percent, str(kind)*n, ' '*(length-n)))
        endchar = ('\r' if i < total else ' Done!\n')
        print(frame, end=endchar)
except:
    pass

# def write_csv(path, rows):
#     "Write a list of iterables to a CSV, I think"
#     with open(path, 'w') as f:
#         writer = csv.writer(f)
#         writer.writerows(rows)
#+end_src
** rofi
*** config
:PROPERTIES:
:header-args+: :tangle ~/.config/rofi/config
:END:
#+begin_src conf
rofi.theme: ~/.config/rofi/darktooth.rasi
rofi.modi: window,run,ssh,drun
rofi.combi-modi: window, drun
rofi.lines: 10
#+end_src
*** darktooth.rasi
:PROPERTIES:
:header-args+: :tangle ~/.config/rofi/darktooth.rasi
:END:
#+begin_src css
,* {
    backgroundcolor: #282828;
    bg1: #504945;
    backgroundcoloralternate: #282828;
    separatorcolor: #504945;
    scrollbarcolor: #504945;
    foregroundcolor: #ebdbb2;
    foregroundcolorinverse: #ebdbb2;
    selectioncolor: #504945;

    font: "Iosevka Term 20";
    border-color: @separatorcolor;
    background-color: @backgroundcolor;
    text-color: @foregroundcolor;
    margin: 0;
    margin-bottom: 0;
    margin-top: 0;
    spacing: 0;
}

#listview {
    spacing: 0;
    scrollbar: true;
    margin: 0;
    dynamic: true;
    padding-top: 500;
    /* lines: 10; */
}

#window {
    background-color: @backgroundcolor;
    border-color: @separatorcolor;
    border-color: #928374;
    border: 4;
    border-radius: 0;
    width: 800;
}

#mainbox {
    border: 0;
    padding: 0;
    background-color: @backgroundcoloralternate;
}

#element {
    padding: 16;
    border: 0 0 1 0;
    border-color: @separatorcolor;
    background-color: @backgroundcoloralternate;
}

#element.selected.normal {
    background-color: @selectioncolor;
    text-color: @foregroundcolorinverse;
    border-radius: 0;

    border: 0 0 1 0;
    border-color: @separatorcolor;
}

#element.alternate.normal {
    background-color: @backgroundcoloralternate;
}

#element.normal.active {
    background-color: #7c6f64;
}

#element.alternate.active {
    background-color: #7c6f64;
}

#element.selected.active {
    background-color: @selectioncolor;
    text-color: @foregroundcolorinverse;
    border-radius: 0;

    border: 0 0 1 0;
    border-color: @separatorcolor;
}

#inputbar {
    border: 0 solid 0 solid 1 solid 0 solid;
    margin: 0;
    spacing: 0;
    border-color: @separatorcolor;
}

#prompt {
    padding: 16;
    background-color: @backgroundcoloralternate;
    border: 0 1 0 0;
}

#entry {
    padding: 16;
}

#scrollbar {
    border: 0;
    width: 0;
    handle-color: @scrollbarcolor;
    handle-width: 0;
    background-color: @backgroundcoloralternate;
}

/* vim: set ft=css : */

#+end_src
** rsync-exclude
:PROPERTIES:
:header-args+: :tangle ~/.rsync-exclude :comments no
:END:
#+begin_src text
.cache
Dropbox
.dropbox
.dropbox-dist
syncthing
dotfiles/emacs.d/straight/repos
dotfiles/emacs.d/straight/build
pkg/emacs
#+end_src
** termite
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/termite/config")
:END:
#+begin_src conf
[options]
font = iosevka term 9.5
allow_bold=0
cursor_shape=ibeam
cursor=#FDF4C1
[colors]
background=#282828
foreground=#FDf4c1
color0=#282828
color1=#9d1306
color2=#79740e
color3=#b57614
color4=#076678
color5=#8f3f71
color6=#00a7af
color7=#bdae93
color8=#686868
color9=#fb4933
color10=#b8bb26
color11=#fabd2f
color12=#83a598
color13=#d3869b
color14=#3fd7e5
color15=#fdf4c1
#+end_src
** tmux.conf
:PROPERTIES:
:header-args+: :tangle ~/.tmux.conf
:END:
*** Initialize
#+begin_src conf
set -s escape-time 0
set -g default-command /usr/bin/fish
# set -g default-terminal "xterm-256color"
# set -ga terminal-overrides ",screen-256color:Tc"
# set -g lock-after-time 300
# set -g lock-command "/usr/bin/cmatrix -B"
set -g update-environment -r
set -g set-titles on
set -g set-titles-string '#W'
# set-option -g set-titles-string '#H:#S.#I.#P #W #T'
#+end_src
*** Prefix
#+begin_src conf
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix
#+end_src
*** Bindings
#+begin_src conf
bind r source-file ~/.tmux.conf

set -g mouse on
set-window-option -g xterm-keys on
set-option -g status-keys vi
setw -g mode-keys vi
bind-key x kill-pane
bind-key q detach-client
bind-key Q detach-client
bind-key Escape copy-mode
bind-key [ copy-mode
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-pipe 'xclip -i -sel c' \; send -X clear-selection
set-option -s set-clipboard off
bind -n C-k clear-history
#+end_src
*** Windows/Panes
#+begin_src conf
setw -g monitor-activity on
set-option -g allow-rename off
set -g history-limit 5000
set -g base-index 1
set -g pane-base-index 1
set-option -g renumber-windows on

bind | split-window -h -c '#{pane_current_path}'
bind - split-window -v -c '#{pane_current_path}'
unbind '"'
unbind %

bind-key { swap-window -t -1
bind-key } swap-window -t +1
bind-key \ next-window

bind-key j select-pane -D
bind-key k select-pane -U
bind-key h select-pane -L
bind-key l select-pane -R
bind-key o swap-pane -D
bind-key < split-window -h \; choose-window 'kill-pane ; join-pane -hs %%'
bind-key > break-pane -d
bind-key ^ split-window -v \; choose-window 'kill-pane ; join-pane -vs %%'
bind-key = select-layout even-horizontal
bind-key + select-layout even-vertical
#+end_src
*** Bell
#+begin_src conf
set-option -g bell-action any
set-option -g visual-bell off
#+end_src
*** Theming
#+begin_src conf
# panes
set -g pane-border-fg black
set -g pane-active-border-fg brightred

## Status bar design
# status line
set -g status-justify left
set -g status-bg default
set -g status-fg colour12
set -g status-interval 2

# messaging
set -g message-fg black
set -g message-bg yellow
set -g message-command-fg blue
set -g message-command-bg black

#window mode
setw -g mode-bg colour6
setw -g mode-fg colour0

# window status
setw -g window-status-format " #F#I:#W#F "
setw -g window-status-current-format " #F#I:#W#F "
setw -g window-status-format "#[fg=magenta]#[bg=black] #I #[bg=cyan]#[fg=colour8] #W "
setw -g window-status-current-format "#[bg=brightmagenta]#[fg=colour8] #I #[fg=colour8]#[bg=colour14] #W "
setw -g window-status-current-bg colour0
setw -g window-status-current-fg colour11
setw -g window-status-current-attr dim
setw -g window-status-bg green
setw -g window-status-fg black
setw -g window-status-attr reverse

# Info on left (I don't have a session display for now)
set -g status-left ''

# loud or quiet?
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-window-option -g monitor-activity off
set-window-option -g aggressive-resize on
set-option -g bell-action none

set -g default-terminal "screen-256color"

# The modes {
setw -g clock-mode-colour colour135
setw -g mode-attr none
setw -g mode-fg colour9
setw -g mode-bg colour237

# }
# The panes {

set -g pane-border-bg colour0
set -g pane-border-fg colour238
set -g pane-active-border-bg colour0
set -g pane-active-border-fg colour6

# }
# The statusbar {

set -g status-position bottom
set -g status-bg colour234
set -g status-fg colour137
set -g status-attr dim
set -g status-left ''
set -g status-right '#[fg=colour233,bg=colour241,bold] %Y-%d-%m #[fg=colour233,bg=colour245,bold] %H:%M '
set -g status-right-length 50
set -g status-left-length 20

setw -g window-status-current-fg colour81
setw -g window-status-current-bg colour238
setw -g window-status-current-attr bold
setw -g window-status-current-format ' #I#[fg=colour250]:#[fg=colour015]#W#[fg=colour6]#F '

setw -g window-status-fg colour13
setw -g window-status-bg colour235
setw -g window-status-attr none
setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour007]#W#[fg=colour244]#F '

setw -g window-status-bell-attr bold
setw -g window-status-bell-fg colour255
setw -g window-status-bell-bg colour1

# }
# The messages {

set -g message-attr bold
set -g message-fg colour232
set -g message-bg colour166

# }
#+end_src
*** osx-specific
#+begin_src conf :tangle (when (eq system-type 'darwin) "~/.tmux.conf")
set-option -g default-command "reattach-to-user-namespace -l zsh"
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
#+end_src
*** Plugins
#+begin_src conf
# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-urlview'
# set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @continuum-restore 'on'

set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-sidebar'
set -g @sidebar-tree-command 'exa -TL2 --color=always'
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
#+end_src
** Xresources
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.Xresources")
:END:
#+begin_src conf-xdefaults
#if __has_include(".extend.Xresources")
#include ".extend.Xresources"
#endif

Xft.dpi: 172
Xft.antialias: 1
Xft.hinting: 1
Xft.rgba: rgb
Xft.autohint: false
Xft.hintstyle: hintslight
Xft.lcdfilter: lcddefault

Xcursor.size: 32

Emacs.fontBackend: xft
Emacs.internalBorder: 15
Emacs.font: Iosevka Term-9.5:weight=book
Emacs.geometry: 105x41
Emacs.menuBar: off
Emacs.toolBar: off
Emacs.verticalScrollBars: off
Emacs.cursorBlink: off
Emacs.foreground: #fdf4c1
Emacs.background: #282828
Emacs.mode-line.attributeForeground: #EBDBB2
Emacs.mode-line.attributeBackground: #1D2021
Emacs.mode-line.attributeBox: nil
#+end_src
** xterm-24bit.terminfo
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/xterm-24bit.terminfo")
:END:
#+begin_src text :comments no :tangle no
# Use colon separators.
xterm-24bit|xterm with 24-bit direct color mode,
  use=xterm-256color,
  setb24=\E[48:2:%p1%{65536}%/%d:%p1%{256}%/%{255}%&%d:%p1%{255}%&%dm,
  setf24=\E[38:2:%p1%{65536}%/%d:%p1%{256}%/%{255}%&%d:%p1%{255}%&%dm,
# Use semicolon separators.
xterm-24bits|xterm with 24-bit direct color mode,
  use=xterm-256color,
  setb24=\E[48;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%&%d;%p1%{255}%&%dm,
  setf24=\E[38;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%&%d;%p1%{255}%&%dm,
#+end_src
** zathurarc
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/zathura/zathurarc")
:END:
#+begin_src conf
set font "Iosevka Term 9"
set default-bg "#282828"
set default-fg "#fdf4c1"
set inputbar-bg "#282828"
set inputbar-fg "#3FD7E5"
set statusbar-fg "#fdf4c1"
set first-page-column 1
set recolor-darkcolor "#fDf4c1"
set recolor-lightcolor "#282828"
set smooth-scroll true
#+end_src
* Scripts
** desktop-record
:PROPERTIES:
:header-args+: :tangle ~/bin/desktop-record :shebang "#!/usr/bin/bash"
:END:
#+begin_src sh
screenkey -mf "Iosevka Term" --bg-color "#282828" --font-color "#FDF4C1" --opacity 1 --mods-mode emacs -p fixed -g 2560x129+0+0
# emacsclient --eval '(increase-all-fonts)'
recordmydesktop --device pulse
# emacsclient ---eval '(decrease-all-fonts)'
pkill -f screenkey
#+end_src
** wm-exit-rofi
:PROPERTIES:
:header-args+: :tangle ~/bin/wm-exit-rofi :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
# message="Exit i3?"
response=$(echo -e "exit\nlock\nsuspend\nhibernate\nreboot\nshutdown" | rofi -l 6 -width 30 -dmenu -i -p "")
if [ -n "$response" ]; then
    ~/bin/wm-exit $response
fi
#+end_src
** wm-exit
:PROPERTIES:
:header-args+: :tangle ~/bin/wm-exit :shebang "#!/bin/sh"
:END:
#+begin_src sh
[[ $(cat /proc/1/comm) == "systemd" ]] && logind=systemctl || logind=loginctl

case "$1" in
    lock)
        slock
        ;;
    exit)
        bspc quit
        ;;
    suspend)
        $logind suspend
        ;;
    hibernate)
        $logind hibernate
        ;;
    reboot)
        $logind reboot
        ;;
    shutdown)
        $logind poweroff
        ;;
    ,*)
        notify-send 'Invalid argument'
        exit 2
esac

exit 0
#+end_src
** no-lock-fullscreen
:PROPERTIES:
:header-args+: :tangle ~/bin/no-lock-fullscreen :shebang "#!/usr/bin/env bash"
:END:
This goes in a cron job using ~crontab -e~ like so:
#+begin_example
*/2 * * * * /home/dieggsy/bin/no-lock-fullscreen
#+end_example
#+begin_src sh
active_id=`xprop -display :0 -root _NET_ACTIVE_WINDOW`
fullscreen="$(xprop -display :0 -id ${active_id:40:9} | grep _NET_WM_STATE_FULLSCREEN)"
if [ -n "$fullscreen" ]; then
    echo "RESTARTING XAUTOLOCK"
    export DISPLAY=":0"
    xautolock -disable; xautolock -enable
fi
#+end_src
** ocrpdf
:PROPERTIES:
:header-args+: :tangle ~/bin/ocrpdf :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
if [[ -z $1 ]]; then
    echo "No input file provided."
elif [[ -z $2 ]]; then
    echo "No output file provided"
else
    echo "Converting pdf to tif..."
    \gs -dNOPAUSE -q -r500 \
        -sDEVICE=tiffg4 \
        -dBATCH \
        -sOutputFile=$TMPDIR/tempocr.tif \
        $1
    echo "Running tesseract on pngs..."
    tesseract $TMPDIR/tempocr.tif $2 >/dev/null 2>&1
    echo "Done."
fi
#+end_src
** ocrpdf2
:PROPERTIES:
:header-args+: :tangle ~/bin/ocrpdf2 :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
if [[ -z $1 ]]; then
    echo "No input file provided."
elif [[ -z $2 ]]; then
    echo "No output file provided"
else
    echo "Converting pdf to png..."
    convert -density 500 $1 $TMPDIR/tempocr.png
    count=0
    echo "Running tesseract on pngs..."
    while [ -f $TMPDIR/tempocr-$count.png ]; do
        echo "    Page $count"
        tesseract $TMPDIR/tempocr-$count.png $TMPDIR/tempocr >/dev/null 2>&1
        cat $TMPDIR/tempocr.txt >> $2
        let count=count+1
    done
    echo "Created output file $2"
fi
#+end_src
** pass
Extensions and utilities for [[https://www.passwordstore.org/][pass]] password manager.
*** pass-fzf
:PROPERTIES:
:header-args+: :tangle ~/.password-store/.extensions/fzf.bash :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
name=$(rg -g "*.gpg" "$HOME/.password-store" --files \
           | sed 's@'"$HOME"'/\.password-store/\(.\+\?\)\.gpg@\1@' \
           | fzf --reverse --prompt="[pass] ")

[[ -n "$name" ]] && pass -c $name
#+end_src
*** pass-rofi
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.password-store/.extensions/rofi.bash") :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
name=$(rg -g "*.gpg" "$HOME/.password-store" --files \
           | sed 's@'"$HOME"'/\.password-store/\(.\+\?\)\.gpg@\1@' \
           | sort \
           | rofi -dmenu -i -p "pass" -width 30)

pass -c $name
#+end_src
** playerctl-cmus
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/playerctl-cmus") :shebang "#!/usr/bin/env bash"
:END:
Wrapper around playerctl to control cmus as well.
#+begin_src sh
other=$(ps axc | grep 'spotify')
if [ -n "$other" ]; then
    playerctl $1
else
    if [ "$1" = "play-pause" ]; then
        if [ "$(cmus-remote -Q | grep status)" = "status paused" ]; then
           cmus-remote -p
        elif [ "$(cmus-remote -Q | grep status)" = "status playing" ]; then
            cmus-remote -u
        fi
    elif [ "$1" = "next" ]; then
        cmus-remote -n
    elif [ "$1" = "previous" ]; then
        cmus-remote -r
    fi

fi
#+end_src
** rofi-files
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/rofi-files") :shebang "#!/usr/bin/env zsh"
:END:
A script to search all files using [[https://github.com/BurntSushi/ripgrep][ripgrep]] and [[https://github.com/DaveDavenport/rofi][rofi]].
#+begin_src sh
rg -a --files 2>/dev/null \
    | LC_ALL=C sort \
    | awk -v len=85 '{ if (length($0) > len) print "..." substr($0, length($0)-len, length($0)); else print; }' \
    | rofi -dmenu -i -width 50 -levenshtein-sort -matching regex -p '[files] '\
    | xargs -d '\n' xdg-open

#+end_src
** snapbackup
:PROPERTIES:
:header-args+: :tangle "~/bin/snapbackup" :shebang "#!/bin/bash"
:END:
#+begin_src sh
# if [ $(/usr/bin/id -u) -ne 0 ]; then
#     echo "Invalid Permissions. Are you root?"
#     exit
# fi
# Basic snapshot-style rsync backup script

# Config
if [ -d "/run/media/dieggsy/wd-passport/" ]; then
    echo "Backing up locally..."
    SSHOPT=""
    DEST="/run/media/dieggsy/wd-passport/backup"
else
    echo "Backing up over ssh..."
    SSHOPT="-e ssh"
    DEST="dieggsy@panda:~/wd-passport/backup"
fi
OPT="-avAXh --delete --exclude-from=/home/dieggsy/.rsync-exclude"
LINK="--link-dest=../last"
SRC="/home/dieggsy/"
SNAP="$DEST"
LAST="$DEST/last"
date=`date "+%Y-%m-%dT%H%M"`

# Run rsync to create snapshot
rsync $OPT $SSHOPT $LINK $SRC ${SNAP}/$date # | pv -lep -s $(rsync -n $OPT $SSHOPT $LINK $SRC ${SNAP}/$date | awk 'NF' | wc -l) > /dev/null

# Remove symlink to previous snapshot
# Create new symlink to latest snapshot for the next backup to hardlink
if [ -d "/run/media/dieggsy/wd-passport/" ]; then
    rm -f $LAST
    ln -s ${SNAP}/$date $LAST
else
    ssh dieggsy@panda "rm ~/wd-passport/backup/last && ln -s ~/wd-passport/backup/$date ~/wd-passport/backup/last"
fi

#+end_src
** spectrum_ls
:PROPERTIES:
:header-args+: :tangle ~/bin/spectrum_ls :shebang "#!/usr/bin/env zsh"
:END:
Builds on oh-my-zsh's [[https://github.com/robbyrussell/oh-my-zsh/blob/master/lib/spectrum.zsh#L26][spectrum_ls]].
#+begin_src sh
if [ "$#" = 1 ]; then
  code="$(printf "%03d\n" $1)"
  print -P -- "$code: %F{$code}$code%f"
else;
    for code in $(seq -f "%03g" ${1:-000} ${2:-255}); do
        print -P -- "$code: %F{$code}$code%f"
    done
fi
#+end_src
** text-pager
:PROPERTIES:
:header-args+: :tangle ~/bin/text-pager :shebang "#!/usr/bin/env bash"
:END:
A pager that wraps words at the 80th column, useful for [[https://github.com/michael-lazar/rtv][michael-lazar/rtv]].
#+begin_src sh
[ $# -ge 1 -a -f "$1" ] && input="$1" || input="-"
cat $input | fold -w 80 -s | less
#+end_src
** updates
:PROPERTIES:
:header-args+: :tangle ~/bin/updates :shebang "#!/usr/bin/env bash"
:END:
A script to update pip, apt, and homebrew packages.
*** Initialize
Make sure not in a virtualenv and track pyenv python version.
#+begin_src sh
if [ -n "$VIRTUAL_ENV" ]; then
    echo 'Exit virtualenv first'
elif [ -n "$PYTHONPATH" ]; then
    echo 'Not updating, PYTHONPATH is set.'
else
    # Track global python version
    eval "$(pyenv init -)"
    globalpython=$(echo $(pyenv version) | cut -d' ' -f1)
#+end_src
*** Python 2 pip
#+begin_src sh
# Update pip for python 2
pyenv global $python2version
echo -e "\e[1;34mUpdating: \e[91mpip2\e[0;97m"
IFS=$'\n'
echo  $'Getting outdated pip2 packages...'
res=$(pip list -o --format=legacy | sed 's/ .*//')

if [ -z "$res" ]; then
    echo $'All packages up to date.'
else
    echo $res | xargs pip install --upgrade
fi
pip freeze > ~/Dropbox/installed-programs/pip2.txt
sed -i -e 's/=.*//' ~/Dropbox/installed-programs/pip2.txt
#+end_src
*** Python 3 pip
#+begin_src sh
# Update pip for python 3
pyenv global $python3version
echo -e "\n\e[1;34mUpdating: \e[91mpip3\e[0;97m"
IFS=$'\n'
echo  $'Getting outdated pip3 packages...'
res=$(pip list -o --format=legacy | sed 's/ .*//')

if [ -z "$res" ]; then
    echo $'All packages up to date.'
else
    echo $res | xargs pip install --upgrade
fi
pip freeze > ~/Dropbox/installed-programs/pip3.txt
sed -i -e 's/=.*//' ~/Dropbox/installed-programs/pip3.txt
#+end_src
*** Package manager
**** Darwin
#+begin_src sh :tangle (when (eq system-type 'darwin) "~/bin/updates")
pyenv global system
echo -e "\n\e[1;34mUpdating: \e[91mHomebrew\e[0;97m"
brew update
brew upgrade
brew cleanup
brew prune
brew doctor

brew bundle dump --force --file=~/Dropbox/installed-programs/brew.rb
#+end_src

**** Debian
#+begin_src sh :tangle (when (eq system-type 'gnu/linux) "~/bin/updates")
echo -e "\n\e[1;34mUpdating: \e[91mapt-get\e[0;97m"
sudo apt-get update
sudo apt-get upgrade

mkdir -p ~/Dropbox/installed-programs/apt
dpkg --get-selections > ~/Dropbox/installed-programs/apt/package.list
sudo cp -R /etc/apt/sources.list* ~/Dropbox/installed-programs/apt/
sudo apt-key exportall > ~/Dropbox/installed-programs/apt/repo.keys
#+end_src
*** Finalize
#+begin_src sh
echo " "
echo -e "\e[1;34mDone"

pyenv global $globalpython # Set python version back to original
fi
#+end_src
** update-volume
:PROPERTIES:
:header-args+: :tangle "~/bin/update-volume.scm"
:END:
#+begin_src scheme
(use posix
     scsh-process)

(define adjust-volume
  (do ((line (read-line) (read-line)))
      ((eof-object? line))
    (when line
      (with-output-to-file "/tmp/ipc-polybar-simple"
        (lambda () (display "hook:module/volume1"))))))

(pipe (pactl subscribe) (begin (adjust-volume)))
#+end_src
* Desktop files
** cmus.desktop
:PROPERTIES:
:header-args+: :tangle ~/.local/share/applications/cmus.desktop
:END:
#+begin_src conf
[Desktop Entry]
Name = Cmus
GenericName=Music Player
Terminal=true
Exec=cmus
TryExec=cmus
Type=Application
Categories=Audio;Music;Player;AudioVideo;
Icon=multimedia-player
#+end_src
** emacs
*** emacsclient.desktop
:PROPERTIES:
:header-args+: :tangle ~/.local/share/applications/emacsclient.desktop
:END:
This lets you open files with a running instance of emacs. Kinda nifty.
#+begin_src conf
[Desktop Entry]
Name=Emacs Client
Exec=emacsclient -n %u
Icon=emacs
Type=Application
Terminal=false
#+end_src
*** emacs-q.desktop
:PROPERTIES:
:header-args+: :tangle ~/.local/share/applications/emacs-q.desktop
:END:
#+begin_src conf
[Desktop Entry]
Name=Emacs -q
GenericName=Text Editor
Comment=Edit text
MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
Exec=emacs -q %F
Icon=emacs
Type=Application
Terminal=false
Categories=Development;TextEditor;
StartupWMClass=Emacs
Keywords=Text;Editor;
#+end_src
*** emacs-debug-init.desktop
:PROPERTIES:
:header-args+: :tangle ~/.local/share/applications/emacs-debug-init.desktop
:END:
#+begin_src conf
[Desktop Entry]
Name=Emacs -debug-init
GenericName=Text Editor
Comment=Edit text
MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
Exec=emacs -debug-init %F
Icon=emacs
Type=Application
Terminal=false
Categories=Development;TextEditor;
StartupWMClass=Emacs
Keywords=Text;Editor;
#+end_src
** firefox.desktop
:PROPERTIES:
:header-args+: :tangle ~/.local/share/applications/firefox.desktop
:END:
#+begin_src conf
[Desktop Entry]
Version=1.0
Name=Firefox
Comment=Browse the Web
Exec=env GTK_THEME=Arc /usr/lib/firefox/firefox %u
Icon=firefox
Terminal=false
Type=Application
MimeType=text/html;text/xml;application/xhtml+xml;application/vnd.mozilla.xul+xml;text/mml;x-scheme-handler/http;x-scheme-handler/https;
StartupNotify=true
StartupWMClass=Firefox
Categories=Network;WebBrowser;
Keywords=web;browser;internet;
Actions=new-window;new-private-window;

[Desktop Action new-window]
Name=New Window
Exec=/usr/lib/firefox/firefox --private-window %u
#+end_src
** spotify.desktop
:PROPERTIES:
:header-args+: :tangle ~/.local/share/applications/spotify.desktop
:END:
On high dpi displays with linux, the spotify UI is way too small. This scales
it up
#+begin_src conf
[Desktop Entry]
Name=Spotify
GenericName=Music Player
Comment=Spotify streaming music client
Icon=spotify-client
Exec=spotify --force-device-scale-factor=2  %U
TryExec=spotify
Terminal=false
Type=Application
Categories=Audio;Music;Player;AudioVideo;
MimeType=x-scheme-handler/spotify;
#+end_src
** vlc-dvd.desktop
:PROPERTIES:
:header-args+: :tangle ~/.local/share/applications/vlc-dvd.desktop
:END:
#+begin_src conf
[Desktop Entry]
Version=1.0
Name=VLC DVD player
Exec=vlc dvd://
TryExec=vlc
Icon=vlc
Terminal=false
Type=Application
Categories=AudioVideo;Player;Recorder;
X-KDE-Protocols=ftp,http,https,mms,rtmp,rtsp,sftp,smb
Keywords=Player;Capture;DVD;Audio;Video;Server;Broadcast;
#+end_src
* Local vars
Tangles the files asynchronously on save.
#+begin_example
# Local Variables:
# eval: (add-hook 'after-save-hook 'd/async-babel-tangle 'append 'local)
# End:
#+end_example
