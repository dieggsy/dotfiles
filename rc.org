#+TITLE: rc.org
#+PROPERTY: header-args :comments no :mkdirp yes :results silent

* Intro

This is where I keep the bulk of my dotfiles (that aren't emacs or zsh). If it
seems like a bit of a mess to keep it all in one place, note that this is /much/
more readable in org format than in rendered markdown.

* Config
** bspwm
*** [[file:bspwm/.config/bspwm/bspwmrc][bspwmrc]]
*** [[file:bspwm/.config/bspwm/rules.scm][rules]]
*** [[file:bspwm/.config/sxhkd/sxhkdrc][sxhkdrc]]
** [[file:chicken/.csirc][csirc]]
** cmus
*** [[file:cmus/.config/cmus/darktooth.theme][darktooth.theme]]
** dunst
*** [[file:dunst/.config/dunst/dunstrc][dunstrc]]
** fontconfig
*** [[file:fontconfig/.config/fontconfig/fonts.conf][fonts.conf]]
** git
*** gitconfig
:PROPERTIES:
:header-args+: :tangle ~/.gitconfig
:END:
I know, it probably doesn't make sense to keep my gitconfig here.
**** media
#+begin_src conf
[filter "media"]
    required = true
    clean = git media clean %f
    smudge = git media smudge %f
#+end_src
**** user
#+begin_src conf
[user]
    name = dieggsy
    email = dieggsy@protonmail.com
    signingkey = 1DF81CB1
#+end_src
**** filter
#+begin_src conf
[filter "lfs"]
    clean = git-lfs clean %f
    smudge = git-lfs smudge %f
    required = true
#+end_src
**** core
#+begin_src conf
[core]
    editor = emacsclient -t
    excludesfile = ~/.gitignore
    pager = "less"
#+end_src
**** gpg
#+begin_src conf
[gpg]
    program = gpg2
#+end_src
**** alias
#+begin_src conf
[alias]
    eclipse = !git fetch upstream && git rebase -s recursive -X theirs upstream/master
    gconfig = config --global
    lconfig = config --local
    mypull = pull -s recursive -X ours
    myrebase = rebase -s recursive -X theirs
    optimize = "!f() { git reflog expire --all --expire=now && git gc --prune=now --aggressive; }; f"
    plog = log --graph --pretty=format:'%C(bold black)%h%Creset - %<(50,trunc)%C(bold normal)%s%Creset %<(20)%C(bold green)%an%Creset %<(15)%C(bold red)%cr%Creset%C(bold yellow)%d%Creset' --abbrev-commit
    plog-nocolor = log --graph --pretty=format:'%h - %<(50,trunc)%s %<(20)%an %<(15)%cr%d' --abbrev-commit
    update-from-upstream = pull --rebase -s recursive -X theirs upstream/master
    aliases = config --get-regexp '^alias\\.'
#+end_src
**** http
#+begin_src conf
[http]
    postBuffer = 524288000
#+end_src
**** color
#+begin_src conf
[color]
    ui = auto
[color "status"]
    added = green bold
    changed = red bold
    untracked = red bold
[color "branch"]
    current = green bold
    remote = magenta bold
[color "diff"]
    new = green bold
    old = red bold
#+end_src
**** push
#+begin_src conf
[push]
    followTags = true
#+end_src
**** status
#+begin_src conf
[status]
    showUntrackedFiles = all
    short=true
    branch=true
#+end_src
**** commit
#+begin_src conf
[commit]
    gpgsign = true
#+end_src
**** push
#+begin_src conf
[push]
    followTags = true
#+end_src
**** github
#+begin_src conf
[github]
	user = dieggsy
#+end_src
*** gitignore
:PROPERTIES:
:header-args+: :tangle ~/.gitignore
:END:

#+begin_src conf
.DS\_Store
*.pyc
__pychache__
#+end_src
** inputrc
#+begin_src sh :tangle ~/.inputrc
set keymap vi-insert
"(": "\C-v(\C-v)\e[D"
"\"": "\C-v\"\C-v\"\e[D"
set editing-mode vi
set show-mode-in-prompt on
set colored-completion-prefix on
set blink-matching-paren on
set menu-complete-display-prefix on
set keyseq-timeout 1
set vi-ins-mode-string \1\e[6 q\2
set vi-cmd-mode-string \1\e[2 q\2
#+end_src
** neovim
#+begin_src vimrc :tangle ~/.config/nvim/init.vim :comments no
call plug#begin('~/.config/nvim/plugged')

Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'itchyny/lightline.vim'
Plug 'morhetz/gruvbox'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'w0rp/ale'
Plug 'airblade/vim-gitgutter'
Plug 'jiangmiao/auto-pairs'
Plug 'osyo-manga/vim-anzu'
Plug 'sheerun/vim-polyglot'
Plug 'jceb/vim-orgmode'
Plug 'michaeljsmith/vim-indent-object'
Plug 'tommcdo/vim-lion'
Plug 'easymotion/vim-easymotion'
Plug 'SirVer/ultisnips'

call plug#end()

" Plugin settings
filetype plugin indent on
colorscheme gruvbox
let g:deoplete#enable_at_startup = 1
let g:lightline = {'colorscheme' : 'gruvbox'}

" Defaults
set laststatus=2
set relativenumber
set cursorline
set hlsearch
set backspace=2
set tabstop=4
set shiftwidth=4
set expandtab
set splitbelow
set splitright
set inccommand=nosplit
set termguicolors

" Bindings
noremap <C-g> <C-c>
inoremap <C-g> <C-c>
imap <C-_> <Esc>
let mapleader=" "
nnoremap <leader>ff :Files <CR>
" nnoremap <leader>ff :Files <C-R>=expand('%:h')<CR><CR>
nnoremap <leader>fl :Locate <space>
nnoremap <leader>bb :Buffers <CR>
" Don't let easymotion get in the way of <leader><leader>
nmap <leader>j <Plug>(easymotion-prefix)
nnoremap <leader><leader> :Commands <CR>
nnoremap <leader>sr :Rg <space>

nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)
command DeleteTrailingWhitespace :%s/\s\+$//e
cnoreabbrev dtw DeleteTrailingWhitespace

au VimLeave * set guicursor=a:ver1-blinkon0
#+end_src
** networkmanager_dmenu
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/networkmanager-dmenu/config.ini")
:END:
#+begin_src conf
[dmenu]
# l = 10
dmenu_command = rofi -xoffset 348 -no-fixed-num-lines -theme-str "* {highlightcolor: #83A598;}" -theme-str "#window {width: 330;}"
rofi_highlight = True
# # Note that dmenu_command can contain arguments as well like `rofi -width 30`
# # Rofi and dmenu are set to case insensitive by default `-i`
# l = number of lines to display, defaults to number of total network options
# fn = font string
# nb = normal background (name, #RGB, or #RRGGBB)
# nf = normal foreground
# sb = selected background
# sf = selected foreground
# b =  (just set to empty value and menu will appear at the bottom
# m = number of monitor to display on
# p = Custom Prompt for the networks menu
# pinentry = Pinentry command

[editor]
terminal = termite
gui_if_available = True
# terminal = <name of terminal program>
# gui_if_available = <True or False>
#+end_src
** polybar
:PROPERTIES:
:header-args+: :tangle ~/.config/polybar/config
:END:
#+begin_src conf-windows
[colors]
black = #282828
white = #FDF4C1
green = #B8BB26
red = #FB4933
yellow = #FABD2F
blue = #83A598
purple = #D3869B
aqua = #8EC07C
orange = #FE8019
cyan = #3FD7E5
sienna = #DD6F48
light3 = #BDAE93
light4 = #A89984
dark2 = #504945

background = ${colors.black}
foreground = ${colors.white}
alert = ${colors.red}
comment = #665C54

[bar/simple]
monitor = ${env:MONITOR:}
width = 100%
height = 47
fixed-center = true
line-size = 2

; tray-position=center
; tray-maxsize=32

dpi = 172
background = ${colors.background}
foreground = ${colors.foreground}

module-margin=0
separator=

font-0 = Iosevka Term:size=10;3
font-1 = Weather Icons:size=10;3
font-2 = Material Icons:size=10;4

modules-left = bspwm date network bluez
modules-right = display mem cpu weather pulse battery

wm-restack = bspwm

cursor-click = pointer
cursor-scroll = ns-resize
enable-ipc = true

[module/xwindow]
type = internal/xwindow
label = %{F#BDAE93}%title:0:30:...%%{F-}

[module/display]
type=custom/script
exec=[[ "$(xrandr | grep ' connected ' | wc -l)" -gt "1" ]] && echo "  " || echo ''
format-padding=1
click-left=mons-rofi


[module/bspwm]
type = internal/bspwm
format =<label-state>
wrapping-scroll = false
enable-click = false
enable-scroll = false
reverse-scroll = false

pin-workspaces = true
ws-icon-0=1;
ws-icon-1=2;
ws-icon-2=3;
ws-icon-3=4;
ws-icon-4=5;
ws-icon-5=6;
label-focused = %icon%
label-focused-underline = ${colors.sienna}
label-focused-padding = 1
label-focused-foreground = ${colors.sienna}

label-occupied =

label-urgent-background = ${colors.alert}
label-urgent-foreground = ${colors.black}
label-urgent-padding = 1

label-empty =

[module/xbacklight]
type = internal/backlight
card = intel_backlight
format-background = ${colors.dark2}
format-foreground = #BDAE93
format-padding = 1
format =  <label>
label = %percentage%

[module/network]
click-left = networkmanager_dmenu
type = custom/script
exec = ~/bin/blocks/networkmanager
format-foreground = ${colors.blue}
format-underline = ${colors.blue}
format-padding = 1
interval = 2

[module/bluetooth]
type = custom/script
exec = rfkill list bluetooth | grep yes > /dev/null && echo '' || echo 
format-foreground = ${colors.foreground}
format-padding = 1

[module/bluez]
click-left = bluez-rofi &
type = custom/script
exec = ~/bin/blocks/bluez
format-padding=1
interval = 1

[module/date]
type = custom/script
exec = date +'%%{F#FDF4C1} %H:%M%%{F-} %%{F#665C54}%a %Y-%m-%d%%{F-}'
interval = 1
format-padding=1
click-left = cal-rofi

[module/bat0]
type = internal/battery
format-full-background = ${colors.dark2}
format-full-foreground = #BDAE93
format-full-padding = 1
format-charging-background = ${colors.dark2}
format-charging-foreground = #BDAE93
format-charging-padding = 1
format-discharging-background = ${colors.dark2}
format-discharging-foreground = #BDAE93
format-discharging-padding = 1
battery = BAT0
adapter = ADP1
full-at = 100

format-full = %{A1:notify-send "$(upower -i /org/freedesktop/UPower/devices/battery_BAT0)":} <label-full>%{A}
format-charging = %{A1:notify-send "$(upower -i /org/freedesktop/UPower/devices/battery_BAT0)":}<animation-charging> <label-charging>%{A}
format-discharging = %{A1:notify-send "$(upower -i /org/freedesktop/UPower/devices/battery_BAT0)":}<ramp-capacity> <label-discharging>%{A}

label-full = %percentage%
label-charging = %percentage%
label-discharging = %percentage%

ramp-capacity-0 = 
ramp-capacity-1 = 
ramp-capacity-2 = 
ramp-capacity-3 = 
ramp-capacity-4 = 

animation-charging-0 = 
animation-charging-1 = 
animation-charging-2 = 
animation-charging-3 = 
animation-charging-4 = 
animation-charging-framerate = 750

[module/cpu]
type = internal/cpu
format-foreground = ${colors.comment}
format-padding = 1
format = <label>
label =  %percentage:2%%

[module/mem]
type = internal/memory
format = <label>
label =  %percentage_used:2%%
format-foreground = ${colors.comment}
format-padding=1

[module/weather]
type = custom/script
exec = ~/bin/blocks/darksky
; format-foreground = #BDAE93
; format-background = ${colors.dark2}
format-foreground = ${colors.sienna}
format-underline = ${colors.sienna}
format-padding = 1
click-left = xdg-open https://darksky.net
interval = 120
label-font = 2

[module/battery]
type=custom/script
; tail=true
exec = ~/bin/blocks/t480-battery
format-foreground = ${colors.blue}
format-underline = ${colors.blue}
; format-background = ${colors.dark2}
format-padding = 1
interval=30


[module/cmus]
type = custom/script
exec = ~/bin/blocks/mpris cmus
tail = true
click-left = playerctl --player=cmus play-pause
scroll-up = playerctl --player=cmus previous
scroll-down = playerctl --player=cmus next
format-prefix = " "
format-prefix-foreground = ${colors.green}

[module/spotify]
type = custom/script
exec = ~/bin/blocks/mpris spotify
tail = true
format-prefix = " "
format-prefix-foreground = ${colors.green}
click-left = playerctl --player=spotify play-pause
scroll-up = playerctl --player=spotify previous
scroll-down = playerctl --player=spotify next

[module/dropbox]
type = custom/script
exec = ~/bin/blocks/dropbox
interval = 2
format-prefix = " "
format-prefix-foreground = ${colors.cyan}

[module/github]
type = custom/script
exec = ~/bin/blocks/github-unread
interval = 10
format-prefix = " "
click-left = xdg-open https://github.com/notifications

[module/volume]
type = custom/script
exec = ~/bin/blocks/amixer
tail = true
format-padding=1

[module/pulse]
type=internal/pulseaudio
format-volume = %{A3:pavucontrol &:}<ramp-volume> <label-volume>%{A}
format-muted = %{A3:pavucontrol &:} <label-muted>%{A}
label-volume = %percentage%
use-ui-max = false
label-muted =  %percentage%
ramp-volume-0 = 
ramp-volume-1 = 
ramp-volume-2 = 
ramp-volume-3 = 
format-volume-padding=1
format-muted-padding=1

[module/inbox-reddit]
type = custom/script
exec = ~/bin/blocks/reddit-unread
interval = 10
click-left = xdg-open https://reddit.com/message/unread
format-prefix = " "
format-prefix-foreground = #FF3F18

[module/xkb]
type = custom/ipc
hook-0 = ~/bin/blocks/xkb -display
initial = 1
format-prefix = " "

[settings]
screenchange-reload = true
#+end_src
** rofi
*** config
:PROPERTIES:
:header-args+: :tangle ~/.config/rofi/config
:END:
#+begin_src conf
rofi.theme: dropdown
rofi.location: 1
rofi.yoffset: 62
rofi.xoffset: 15
rofi.modi: window,run,ssh,drun,combi
rofi.combi-modi: window,drun,run
rofi.dpi: 172
rofi.fixed-num-lines: 0
#+end_src
*** darktooth.rasi
:PROPERTIES:
:header-args+: :tangle ~/.config/rofi/darktooth.rasi
:END:
#+begin_src css
,* {
    backgroundcolor: #282828;
    bg1: #504945;
    backgroundcoloralternate: #282828;
    separatorcolor: #504945;
    scrollbarcolor: #504945;
    foregroundcolor: #ebdbb2;
    foregroundcolorinverse: #ebdbb2;
    selectioncolor: #504945;

    font: "Iosevka Term 10";
    border-color: @separatorcolor;
    background-color: @backgroundcolor;
    text-color: @foregroundcolor;
    margin: 0;
    margin-bottom: 0;
    margin-top: 0;
    spacing: 0;
}

#listview {
    spacing: 0;
    scrollbar: true;
    margin: 0;
    dynamic: true;
    padding-top: 500;
    lines: 10;
}

#window {
    background-color: @backgroundcolor;
    border-color: @separatorcolor;
    border-color: #928374;
    border: 5;
    border-radius: 0;
    width: 800;
}

#mainbox {
    border: 0;
    padding: 0;
    background-color: @backgroundcoloralternate;
}

#element {
    padding: 16;
    border: 0 0 1 0;
    border-color: @separatorcolor;
    background-color: @backgroundcoloralternate;
}

#message {
    format: center;
    padding: 16 4ch;
    border: 0 0 1 0;
    border-color: @separatorcolor;
    background-color: @backgroundcoloralternate;
}

#textbox {
    text-color: #7C6F64;
}

#element.selected.normal {
    background-color: @selectioncolor;
    text-color: @foregroundcolorinverse;
    border-radius: 0;

    border: 0 0 1 0;
    border-color: @separatorcolor;
}

#element.alternate.normal {
    background-color: @backgroundcoloralternate;
}

#element.normal.active {
    background-color: #7c6f64;
}

#element.alternate.active {
    background-color: #7c6f64;
}

#element.selected.active {
    background-color: @selectioncolor;
    text-color: @foregroundcolorinverse;
    border-radius: 0;

    border: 0 0 1 0;
    border-color: @separatorcolor;
}

#inputbar {
    border: 0 solid 0 solid 1 solid 0 solid;
    margin: 0;
    spacing: 0;
    border-color: @separatorcolor;
}

#prompt {
    padding: 16;
    background-color: @backgroundcoloralternate;
    border: 0 1 0 0;
}

#entry {
    padding: 16;
}

#scrollbar {
    border: 0;
    width: 0;
    handle-color: @scrollbarcolor;
    handle-width: 0;
    background-color: @backgroundcoloralternate;
}

/* vim: set ft=css : */

#+end_src
*** dropdown.rasi
:PROPERTIES:
:header-args+: :tangle ~/.config/rofi/dropdown.rasi
:END:
#+begin_src css
,* {
    backgroundcolor: #282828;
    bg1: #504945;
    backgroundcoloralternate: #282828;
    separatorcolor: #504945;
    scrollbarcolor: #504945;
    foregroundcolor: #ebdbb2;
    foregroundcolorinverse: #ebdbb2;
    highlightcolor: #DD6F48;
    selectioncolor: #504945;

    font: "Iosevka Term 10";
    border-color: @separatorcolor;
    background-color: @backgroundcolor;
    text-color: @foregroundcolor;
    margin: 0;
    margin-bottom: 0;
    margin-top: 0;
    spacing: 0;
}

#listview {
    spacing: 0;
    scrollbar: true;
    margin: 0;
    dynamic: true;
    padding-top: 500;
    lines: 10;
}

#window {
    background-color: @backgroundcolor;
    border-color: @highlightcolor;
    border: 5;
    border-radius: 0;
    width: 300;
}

#mainbox {
    border: 0;
    padding: 0;
    background-color: @backgroundcoloralternate;
}

#element {
    padding:10;
    border: 0 0 1 0;
    border-color: @separatorcolor;
    background-color: @backgroundcoloralternate;
}

#message {
    format: center;
    border: 0 0 1 0;
    border-color: @separatorcolor;
    background-color: @backgroundcoloralternate;
}

#textbox {
    text-color: #7C6F64;
    padding: 10;
}

#element.selected.normal {
    background-color: #3C3836;
    text-color: @foregroundcolorinverse;
    border-radius: 0;

    border: 0 0 1 0;
    border-color: @separatorcolor;
}

#element.alternate.normal {
    background-color: @backgroundcoloralternate;
}

#element.normal.active {
    text-color: @highlightcolor;
}

#element.alternate.active {
    text-color: @highlightcolor;
}

#element.selected.active {
    background-color: #3C3836;
    text-color: @highlightcolor;
    /* text-color: @foregroundcolorinverse; */
    border-radius: 0;

    border: 0 0 1 0;
    border-color: @separatorcolor;
}

#inputbar {
    border: 0 solid 0 solid 1 solid 0 solid;
    margin: 0;
    spacing: 0;
    border-color: @separatorcolor;
}

#prompt {
    padding:10;
    background-color: @backgroundcoloralternate;
    border: 0 1 0 0;
}

#entry {
    padding:10;
}

#scrollbar {
    border: 0;
    width: 0;
    handle-color: @scrollbarcolor;
    handle-width: 0;
    background-color: @backgroundcoloralternate;
}

/* vim: set ft=css : */

#+end_src
** rsync-exclude
:PROPERTIES:
:header-args+: :tangle ~/.rsync-exclude :comments no
:END:
#+begin_src text
.eve
downloads
music
.ccache
.cache
Dropbox
org
.dropbox
.dropbox-dist
syncthing
dotfiles/emacs.d/straight/repos
dotfiles/emacs.d/straight/build
pkg/emacs
.local/share/Steam
.local/share/Aspyr
.config/unity3d
.config/spotify
#+end_src
** tmux.conf
:PROPERTIES:
:header-args+: :tangle ~/.tmux.conf
:END:
*** Initialize
#+begin_src conf
set -s escape-time 0
set -g default-terminal "tmux-256color"
set -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[ q'
set -g update-environment -r
set -g set-titles on
set -g set-titles-string '#W'
set -ga update-environment ' SSH_AUTH_SOCK'
#+end_src
*** Prefix
#+begin_src conf
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix
#+end_src
*** Bindings
#+begin_src conf
bind r source-file ~/.tmux.conf

set -g mouse on
set-window-option -g xterm-keys on
set-option -g status-keys vi
setw -g mode-keys vi
bind-key x kill-pane
bind-key q detach-client
bind-key Q detach-client
bind-key Escape copy-mode
bind-key [ copy-mode
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-pipe 'xclip -i -sel c' \; send -X clear-selection
set-option -s set-clipboard off
bind -n C-k clear-history

bind -n M-F11 \
    setw -g window-status-current-format ' #I#[fg=colour237]:#[fg=colour007]#W#[fg=colour244]#F '\; \
    setw -g window-status-current-fg colour13\; \
    setw -g window-status-current-bg colour235\; \
    setw -g window-status-current-attr none
bind -n M-F12 \
    setw -g window-status-current-format ' #I#[fg=colour250]:#[fg=colour015]#W#[fg=colour6]#F '\; \
    setw -g window-status-current-fg colour81\; \
    setw -g window-status-current-bg colour238\; \
    setw -g window-status-current-attr bold

bind -n S-up \
    send-keys M-F12\; \
    setw -g window-status-current-format ' #I#[fg=colour237]:#[fg=colour007]#W#[fg=colour244]#F '\; \
    setw -g window-status-current-fg colour13\; \
    setw -g window-status-current-bg colour235\; \
    setw -g window-status-current-attr none\; \
    set -qg prefix C-b
bind -n S-down \
    send-keys M-F11\; \
    setw -g window-status-current-format ' #I#[fg=colour250]:#[fg=colour015]#W#[fg=colour6]#F '\; \
    setw -g window-status-current-fg colour81\; \
    setw -g window-status-current-bg colour238\; \
    setw -g window-status-current-attr bold\; \
    set -qg prefix C-a

#+end_src
*** Windows/Panes
#+begin_src conf
setw -g monitor-activity on
set-option -g allow-rename off
set -g history-limit 5000
set -g base-index 1
set -g pane-base-index 1
set-option -g renumber-windows on

bind | split-window -h -c '#{pane_current_path}'
bind - split-window -v -c '#{pane_current_path}'
unbind '"'
unbind %

bind { swap-window -t -1
bind } swap-window -t +1
bind \ next-window

bind j select-pane -D
bind k select-pane -U
bind h select-pane -L
bind l select-pane -R
bind o swap-pane -D
bind < split-window -h \; choose-window 'kill-pane ; join-pane -hs %%'
bind > break-pane -d
bind ^ split-window -v \; choose-window 'kill-pane ; join-pane -vs %%'
bind = select-layout even-horizontal
bind + select-layout even-vertical
#+end_src
*** Bell
#+begin_src conf
set-option -g bell-action any
set-option -g visual-bell off
#+end_src
*** Theming
#+begin_src conf
# panes
set -g pane-border-fg black
set -g pane-active-border-fg brightred

## Status bar design
# status line
set -g status-justify left
set -g status-bg default
set -g status-fg colour12
set -g status-interval 2

# messaging
set -g message-fg black
set -g message-bg yellow
set -g message-command-fg blue
set -g message-command-bg black

#window mode
setw -g mode-bg colour6
setw -g mode-fg colour0

# Info on left (I don't have a session display for now)
set -g status-left ''

# loud or quiet?
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-window-option -g monitor-activity off
set-window-option -g aggressive-resize on
set-option -g bell-action none

# The modes {
setw -g clock-mode-colour colour135
setw -g mode-attr none
setw -g mode-fg colour9
setw -g mode-bg colour237

# }
# The panes {

set -g pane-border-bg colour0
set -g pane-border-fg colour238
set -g pane-active-border-bg colour0
set -g pane-active-border-fg colour6

# }
# The statusbar {

set -g status-position bottom
set -g status-bg colour234
set -g status-fg colour137
set -g status-attr dim
set -g status-left ''
# set -g status-right '#[fg=colour233,bg=colour241,bold] %Y-%d-%m #[fg=colour233,bg=colour245,bold] %H:%M '
# set -g status-right-length 50
# set -g status-left-length 20
set -g status-right ''

setw -g window-status-current-fg colour81
setw -g window-status-current-bg colour238
setw -g window-status-current-attr bold
setw -g window-status-current-format ' #I#[fg=colour250]:#[fg=colour015]#W#[fg=colour6]#F '

setw -g window-status-fg colour13
setw -g window-status-bg colour235
setw -g window-status-attr none
setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour007]#W#[fg=colour244]#F '

setw -g window-status-bell-attr bold
setw -g window-status-bell-fg colour255
setw -g window-status-bell-bg colour1

# }
# The messages {

set -g message-attr bold
set -g message-fg colour232
set -g message-bg colour166

# }
#+end_src
*** osx-specific
#+begin_src conf :tangle (when (eq system-type 'darwin) "~/.tmux.conf")
set-option -g default-command "reattach-to-user-namespace -l zsh"
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
#+end_src
*** Plugins
#+begin_src conf :tangle no
# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-urlview'
# set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @continuum-restore 'on'

set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-sidebar'
set -g @sidebar-tree-command 'exa -TL2 --color=always'
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
#+end_src
** freedesktop
*** [[file:freedesktop/.config/user-dirs.dirs][user-dirs.dirs]]
** xorg.conf.d
*** 00-keyboard.conf
- ctrl:nocaps :: make caps lock another ctrl
- grp:shifs_toggle :: pressing both shift keys toggles xkblayout
- grp_led:caps :: caps lock key used to indicate active layout
- compose:prsc :: use PrtSc key as compose key
#+begin_src conf-space :tangle /sudo::/etc/X11/xorg.conf.d/00-keyboard.conf
# Written by systemd-localed(8), read by systemd-localed and Xorg. It's
# probably wise not to edit this file manually. Use localectl(1) to
# instruct systemd-localed to update it.
Section "InputClass"
        Identifier "system-keyboard"
        MatchIsKeyboard "on"
        Option "XkbLayout" "dvorak,us"
        Option "XkbOptions" "ctrl:nocaps,grp:shifts_toggle,grp_led:caps,compose:prsc"
EndSection
#+end_src
*** 40-libinput.conf
#+begin_src conf-space :tangle /sudo::/etc/X11/xorg.conf.d/40-libinput.conf
# On all pointers, use flat acceleration
Section "InputClass"
        Identifier "libinput pointer catchall"
        MatchIsPointer "on"
        MatchDevicePath "/dev/input/event*"
        Driver "libinput"
        Option "AccelProfile" "flat"
EndSection

# Ignore trackpad
Section "InputClass"
        Identifier "SynPS/2 Synaptics TouchPad"
        MatchProduct "SynPS/2 Synaptics TouchPad"
EndSection

# Make Lenovo trackpoint faster
Section "InputClass"
        Identifier "Lenovo Trackpoint"
        MatchProduct "TPPS/2 IBM TrackPoint"
        Option "TransformationMatrix" "2.5 0 0 0 2.5 0 0 0 1"
        Option "AccelSpeed" "1"
EndSection
#+end_src
** X
*** [[file:X/.XCompose][xcompose]]
*** [[file:X/.xinitrc][xinitrc]]
*** [[file:X/.Xresources][xresources]]
** [[file:zathura/.config/zathura/zathurarc][zathurarc]]
** zsh
*** [[file:zsh/.zshrc][zshrc]]
*** [[file:zsh/.zshenv][zshenv]]
*** [[file:zsh/.zlogin][zlogin]]
* Scripts
** bluez-rofi
#+begin_src python :tangle ~/bin/bluez-rofi :shebang "#!/usr/bin/env python3"
import dbus
import os
import locale
import time
from subprocess import Popen, PIPE

bus = dbus.SystemBus()

def get_offset_hack():
    """Get the position offset based on network SSID"""
    base = 84
    nm = bus.get_object("org.freedesktop.NetworkManager",
                         "/org/freedesktop/NetworkManager")
    props_iface = dbus.Interface(nm, "org.freedesktop.DBus.Properties")
    # nm_iface = dbus.Interface(nm, "org.freedesktop.NetworkManager")
    conns = props_iface.Get("org.freedesktop.NetworkManager" ,"ActiveConnections")
    if len(conns) == 0:
        return 72
    else:
        active = bus.get_object("org.freedesktop.NetworkManager",
                                conns[0])
        props_iface = dbus.Interface(active, "org.freedesktop.DBus.Properties")
        conn_len = len(props_iface.Get("org.freedesktop.NetworkManager.Connection.Active",
                                       "Id"))
        return conn_len * 12 - base

ENV = os.environ.copy()
ENV['LC_ALL'] = 'C'
ENC = locale.getpreferredencoding()
BLUETOOTH_GUI = "blueman-manager"
ROFI_CMD = [
    "rofi",
    "-p", "bluetooth",
    "-xoffset", str(492 + get_offset_hack()),
    "-dmenu", "-i",
    "-theme-str", "#window {width: 500;}",
    "-theme-str", "#inputbar {enabled:false;}",
]


# rofi -dmenu -i -theme-str "#window {width: 500;}"


def make_device_list(devmap):
    def rank_device(dev):
        if dev["Connected"]:
            return 1
        elif dev["Paired"]:
            if dev["Trusted"]:
                return 2
            else:
                return 3
        else:
            return 4
    lst = list(devmap.values());
    lst.sort(key=rank_device)
    return list(map(lambda dev: dev["Address"]
                    + "  "
                    + ("P" if dev["Paired"] else " ")
                    + ("T" if dev["Trusted"] else " ")
                    + "  "
                    + dev["Alias"],
                    lst))

def run_rofi(args, inp):
    return (Popen(args, stdin=PIPE, stdout=PIPE, env=ENV)
            .communicate(input=inp.encode(ENC))[0]
            .decode(ENC)).strip()

def main():

    bluez = bus.get_object("org.bluez", "/")
    bluez_iface = dbus.Interface(bluez, "org.freedesktop.DBus.ObjectManager")
    managed_objects = bluez_iface.GetManagedObjects()

    adapter_path = None;
    # devlist = []
    devmap = {}
    for key,val in managed_objects.items():
        if val.get("org.bluez.Device1"):
            dev = val["org.bluez.Device1"]
            dev["path"] = key
            # devlist.append(dev)
            devmap[dev["Address"]] = dev
        elif val.get("org.bluez.Adapter1"):
            adapter_path = key

    inp = "\n".join(make_device_list(devmap) + [ "", "Start Discovery", "Open GUI"])

    sel = run_rofi(ROFI_CMD, inp)

    adapter = bus.get_object("org.bluez", adapter_path)

    if sel == "Start Discovery":
        adapter_iface = dbus.Interface(adapter, "org.bluez.Adapter1");
        adapter_iface.StartDiscovery();
        time.sleep(30)
    elif sel == "Open GUI":
        Popen([BLUETOOTH_GUI]).wait()
    elif sel:
        sel = sel.split()[0]
        path = devmap[sel]["path"]

        dev = bus.get_object("org.bluez", path)
        dev_iface = dbus.Interface(dev, "org.bluez.Device1")

        connected = devmap[sel]["Connected"]
        if connected:
            dev_iface.Disconnect()
        else:
            dev_iface.Connect()

if __name__ == '__main__':
    main()
#+end_src
** cal-rofi
#+begin_src python :tangle ~/bin/cal-rofi :shebang "#!/usr/bin/env python3"
import datetime
import calendar
import itertools
import locale
from subprocess import Popen, PIPE

today = datetime.date.today()
month = today.month
extra = today.replace(day=1).weekday() + 1
lastday =  calendar.monthrange(today.year, month)[1]

ENC=locale.getpreferredencoding()

days = ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]

inp = days + [" "] * extra + list(map(lambda x: str(x).rjust(2),(range(1,lastday+1))))

def chop(l, n):
    """Yield successive n-sized chunks from l."""
    for i in range(0, len(l), n):
        yield l[i:i + n]

chopped = list(chop(inp,7))
chopped[-1] = chopped[-1] + [" "] * (7 - len(chopped[-1]))

ROFI_CMD = [
    "rofi", "-dmenu",
    "-p", f"{calendar.month_name[month]} {today.year}",
    "-xoffset", "48",
    "-columns", "7",
    "-theme-str", f"#listview{{lines:{len(chopped)};}}",
    "-theme-str", "#window{width:318;}"
]

transposed = list(map(list, zip(*chopped)))
flattened = list(itertools.chain.from_iterable(transposed))
active = flattened.index(str(today.day).rjust(2))
inp = "\n".join(flattened)
Popen(ROFI_CMD + [ "-a", str(active) ], stdin=PIPE, stdout=PIPE).communicate(input=inp.encode(ENC))[0].decode(ENC).strip()
#+end_src
** mons-rofi
#+begin_src sh :tangle ~/bin/mons-rofi :shebang "#!/bin/sh"
sel="$(echo -e "primary\nsecondary\nmirror\nright\nleft\ntop\nbottom" |
         rofi -dmenu -i -p 'display' \
              -location 3 -xoffset -350 \
              -theme-str '#window {width:200;}')"

case $sel in
    "primary") mons -o;;
    "secondary") mons -s;;
    "mirror") mons -m;;
    ,*) mons -e $sel;;
esac
#+end_src
** desktop-record
:PROPERTIES:
:header-args+: :tangle ~/bin/desktop-record :shebang "#!/usr/bin/bash"
:END:
#+begin_src sh
if [ -n "$1" ]; then
    NAME="$1"
else
    NAME="output"
fi
screenkey -f "Iosevka Term" --bg-color "#282828" --font-color "#FDF4C1" --opacity 1 --mods-mode emacs -p fixed -g 1000x47+780+0
guvcview --device=/dev/video2 > /dev/null 2>&1 &
notify-send desktop-record 'Starting recording in 10 seconds...'
sleep 10
ffmpeg -video_size 2560x1440 -framerate 30 -f x11grab -i :0.0+0,0 -f pulse -ac 2 -i default "$NAME.mp4"
pkill screenkey
pkill guvcview
#+end_src
** wm-exit-dmenu
:PROPERTIES:
:header-args+: :tangle ~/bin/wm-exit-dmenu :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
# message="Exit i3?"
response=$(echo -e "exit\nlock\nsuspend\nhibernate\nreboot\nshutdown" |
               rofi -dmenu)
if [ -n "$response" ]; then
    ~/bin/wm-exit $response
fi
#+end_src
** wm-exit
:PROPERTIES:
:header-args+: :tangle ~/bin/wm-exit :shebang "#!/bin/sh"
:END:
#+begin_src sh
[[ $(cat /proc/1/comm) == "systemd" ]] && logind=systemctl || logind=loginctl

case "$1" in
    lock)
        slock
        ;;
    exit)
        bspc quit
        ;;
    suspend)
        $logind suspend
        ;;
    hibernate)
        $logind hibernate
        ;;
    reboot)
        $logind reboot
        ;;
    shutdown)
        $logind poweroff
        ;;
    ,*)
        notify-send 'Invalid argument'
        exit 2
esac

exit 0
#+end_src
** ocrpdf
:PROPERTIES:
:header-args+: :tangle ~/bin/ocrpdf :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
if [[ -z $1 ]]; then
    echo "No input file provided."
elif [[ -z $2 ]]; then
    echo "No output file provided"
else
    echo "Converting pdf to tif..."
    \gs -dNOPAUSE -q -r500 \
        -sDEVICE=tiffg4 \
        -dBATCH \
        -sOutputFile=$TMPDIR/tempocr.tif \
        $1
    echo "Running tesseract on pngs..."
    tesseract $TMPDIR/tempocr.tif $2 >/dev/null 2>&1
    echo "Done."
fi
#+end_src
** ocrpdf2
:PROPERTIES:
:header-args+: :tangle ~/bin/ocrpdf2 :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
if [[ -z $1 ]]; then
    echo "No input file provided."
elif [[ -z $2 ]]; then
    echo "No output file provided"
else
    echo "Converting pdf to png..."
    convert -density 500 $1 $TMPDIR/tempocr.png
    count=0
    echo "Running tesseract on pngs..."
    while [ -f $TMPDIR/tempocr-$count.png ]; do
        echo "    Page $count"
        tesseract $TMPDIR/tempocr-$count.png $TMPDIR/tempocr >/dev/null 2>&1
        cat $TMPDIR/tempocr.txt >> $2
        let count=count+1
    done
    echo "Created output file $2"
fi
#+end_src
** pass
Extensions and utilities for [[https://www.passwordstore.org/][pass]] password manager.
*** pass-fzf
:PROPERTIES:
:header-args+: :tangle ~/.password-store/.extensions/fzf.bash :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
name=$(rg -g "*.gpg" "$HOME/.password-store" --files \
           | sed 's@'"$HOME"'/\.password-store/\(.\+\?\)\.gpg@\1@' \
           | fzf --reverse --prompt="[pass] ")

[[ -n "$name" ]] && pass -c $name
#+end_src
*** pass-rofi
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.password-store/.extensions/rofi.bash") :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
name=$(rg -g "*.gpg" "$HOME/.password-store" --files \
           | sed 's@'"$HOME"'/\.password-store/\(.\+\?\)\.gpg@\1@' \
           | sort \
           | rofi -dmenu -i -p "pass" -width 30)

pass -c $name
#+end_src
** rofi-files
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/rofi-files") :shebang "#!/usr/bin/env zsh"
:END:
A script to search all files using [[https://github.com/BurntSushi/ripgrep][ripgrep]] and [[https://github.com/DaveDavenport/rofi][rofi]].
#+begin_src sh
rg -a --files 2>/dev/null \
    | LC_ALL=C sort \
    | awk -v len=85 '{ if (length($0) > len) print "..." substr($0, length($0)-len, length($0)); else print; }' \
    | rofi -dmenu -i -width 50 -levenshtein-sort -matching regex -p '[files] '\
    | xargs -d '\n' xdg-open

#+end_src
** snapbackup
:PROPERTIES:
:header-args+: :tangle "~/bin/snapbackup" :shebang "#!/bin/bash"
:END:
#+begin_src sh
# if [ $(/usr/bin/id -u) -ne 0 ]; then
#     echo "Invalid Permissions. Are you root?"
#     exit
# fi
# Basic snapshot-style rsync backup script

# Config
if [ -d "/run/media/dieggsy/wd-passport/" ]; then
    echo "Backing up locally..."
    SSHOPT=""
    DEST="/run/media/dieggsy/wd-passport/backup"
    SSHDEST=""
else
    echo "Backing up over ssh..."
    SSHOPT="-e ssh -zz"
    SSHDEST="dieggsy@panda:"
    DEST="~/wd-passport/backup"
fi
OPT="-avAXh --delete --exclude-from=/home/dieggsy/.rsync-exclude"
LINK="--link-dest=../last"
SRC="/home/dieggsy/"
SNAP="$SSHDEST$DEST"
LAST="$DEST/last"
date=`date "+%Y-%m-%dT%H%M"`

notify-send "Backing up home directory" "to $SNAP"

# Run rsync to create snapshot
rsync $OPT $SSHOPT $LINK $SRC ${SNAP}/$date # | pv -lep -s $(rsync -n $OPT $SSHOPT $LINK $SRC ${SNAP}/$date | awk 'NF' | wc -l) > /dev/null

# Remove symlink to previous snapshot
# Create new symlink to latest snapshot for the next backup to hardlink
if [ -d "/run/media/dieggsy/wd-passport/" ]; then
    rm -f $LAST
    ln -s $DEST/$date $LAST
    find $DEST -maxdepth 1 -type d ! -path $DEST -mtime +30 -exec echo 'Removing' {} + -exec rm -vrf {} +
else
    ssh dieggsy@panda "rm -f $LAST && ln -s ${DEST}/$date $LAST"
    # ssh dieggsy@panda "find $DEST -maxdepth 1 -type d ! -path $DEST ! -path $DEST/$date -mtime -1 -exec echo 'Removing' {} + -exec rm -rf {} +"
    ssh dieggsy@panda "find $DEST -maxdepth 1 -type d ! -path $DEST -mtime +30 -exec echo 'Removing' {} + -exec rm -vrf {} +"
fi
#+end_src
** spectrum_ls
:PROPERTIES:
:header-args+: :tangle ~/bin/spectrum_ls :shebang "#!/usr/bin/env zsh"
:END:
Builds on oh-my-zsh's [[https://github.com/robbyrussell/oh-my-zsh/blob/master/lib/spectrum.zsh#L26][spectrum_ls]].
#+begin_src sh
if [ "$#" = 1 ]; then
  code="$(printf "%03d\n" $1)"
  print -P -- "$code: %F{$code}$code%f"
else;
    for code in $(seq -f "%03g" ${1:-000} ${2:-255}); do
        print -P -- "$code: %F{$code}$code%f"
    done
fi
#+end_src
** spotify
#+begin_src sh :tangle ~/bin/spotify :shebang "#!/bin/sh"
/usr/bin/spotify --force-device-scale-factor=2 $@
#+end_src
* Desktop files
** cmus.desktop
:PROPERTIES:
:header-args+: :tangle ~/.local/share/applications/cmus.desktop
:END:
#+begin_src conf
[Desktop Entry]
Name = Cmus
GenericName=Music Player
Terminal=true
Exec=cmus
TryExec=cmus
Type=Application
Categories=Audio;Music;Player;AudioVideo;
Icon=multimedia-player
#+end_src
** emacs
*** emacsclient.desktop
:PROPERTIES:
:header-args+: :tangle ~/.local/share/applications/emacsclient.desktop
:END:
This lets you open files with a running instance of emacs. Kinda nifty.
#+begin_src conf
[Desktop Entry]
Name=Emacs Client
GenericName=Text Editor
Comment=Edit text
MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
Exec=emacsclient -n %F
Icon=emacs
Type=Application
Terminal=false
Categories=Development;TextEditor;
Keywords=Text;Editor;
#+end_src
*** emacs-q.desktop
:PROPERTIES:
:header-args+: :tangle ~/.local/share/applications/emacs-q.desktop
:END:
#+begin_src conf
[Desktop Entry]
Name=Emacs -q
GenericName=Text Editor
Comment=Edit text
MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
Exec=emacs -q %F
Icon=emacs
Type=Application
Terminal=false
Categories=Development;TextEditor;
StartupWMClass=Emacs
Keywords=Text;Editor;
#+end_src
*** emacs-debug-init.desktop
:PROPERTIES:
:header-args+: :tangle ~/.local/share/applications/emacs-debug-init.desktop
:END:
#+begin_src conf
[Desktop Entry]
Name=Emacs -debug-init
GenericName=Text Editor
Comment=Edit text
MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
Exec=emacs -debug-init %F
Icon=emacs
Type=Application
Terminal=false
Categories=Development;TextEditor;
StartupWMClass=Emacs
Keywords=Text;Editor;
#+end_src
** firefox.desktop
:PROPERTIES:
:header-args+: :tangle ~/.local/share/applications/firefox.desktop
:END:
#+begin_src conf
[Desktop Entry]
Version=1.0
Name=Firefox
Comment=Browse the Web
Exec=env GTK_THEME=Arc /usr/lib/firefox/firefox %u
Icon=firefox
Terminal=false
Type=Application
MimeType=text/html;text/xml;application/xhtml+xml;application/vnd.mozilla.xul+xml;text/mml;x-scheme-handler/http;x-scheme-handler/https;
StartupNotify=true
StartupWMClass=Firefox
Categories=Network;WebBrowser;
Keywords=web;browser;internet;
Actions=new-window;new-private-window;

[Desktop Action new-window]
Name=New Window
Exec=/usr/lib/firefox/firefox --private-window %u
#+end_src
** spotify.desktop
:PROPERTIES:
:header-args+: :tangle ~/.local/share/applications/spotify.desktop
:END:
On high dpi displays with linux, the spotify UI is way too small. This scales
it up
#+begin_src conf
[Desktop Entry]
Name=Spotify
GenericName=Music Player
Comment=Spotify streaming music client
Icon=spotify-client
Exec=spotify --force-device-scale-factor=2  %U
TryExec=spotify
Terminal=false
Type=Application
Categories=Audio;Music;Player;AudioVideo;
MimeType=x-scheme-handler/spotify;
#+end_src
** vlc-dvd.desktop
:PROPERTIES:
:header-args+: :tangle ~/.local/share/applications/vlc-dvd.desktop
:END:
#+begin_src conf
[Desktop Entry]
Version=1.0
Name=VLC DVD player
Exec=vlc dvd://
TryExec=vlc
Icon=vlc
Terminal=false
Type=Application
Categories=AudioVideo;Player;Recorder;
X-KDE-Protocols=ftp,http,https,mms,rtmp,rtsp,sftp,smb
Keywords=Player;Capture;DVD;Audio;Video;Server;Broadcast;
#+end_src
* Local vars
Tangles the files asynchronously on save.
#+begin_example
# Local Variables:
# eval: (add-hook 'after-save-hook 'd/async-babel-tangle 'append 'local)
# End:
#+end_example
