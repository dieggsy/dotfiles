#+TITLE: rc.org
#+PROPERTY: header-args :comments link :mkdirp yes :results silent

* Intro

This is where I keep the bulk of my dotfiles (that aren't emacs or zsh). If it
seems like a bit of a mess to keep it all in one place, note that this is /much/
more readable in org format than in rendered markdown.

* Contents                                                              :toc:
- [[#intro][Intro]]
- [[#config][Config]]
  - [[#cvimrc][cvimrc]]
  - [[#confignix][config.nix]]
  - [[#darktooththeme][darktooth.theme]]
  - [[#emacsclientdesktop][emacsclient.desktop]]
  - [[#exwmdesktop][exwm.desktop]]
  - [[#fontsconf][fonts.conf]]
  - [[#git][git]]
  - [[#i3][i3]]
  - [[#initvim][init.vim]]
  - [[#nanorc][nanorc]]
  - [[#networkmanager_dmenu][networkmanager_dmenu]]
  - [[#peco][peco]]
  - [[#pythonrcpy][pythonrc.py]]
  - [[#ssh][ssh]]
  - [[#termite][termite]]
  - [[#tmux][tmux]]
  - [[#xbindkeysrc][xbindkeysrc]]
  - [[#xresources][Xresources]]
  - [[#xsessionrc][xsessionrc]]
  - [[#zathurarc][zathurarc]]
  - [[#xterm-24bitterminfo][xterm-24bit.terminfo]]
- [[#scripts][Scripts]]
  - [[#i3-exit][i3-exit]]
  - [[#i3blocksexwm-utils][i3blocks/exwm utils]]
  - [[#masterinstall][masterinstall]]
  - [[#ocrpdf][ocrpdf]]
  - [[#ocrpdf2][ocrpdf2]]
  - [[#pass][pass]]
  - [[#playerctl-cmus][playerctl-cmus]]
  - [[#rofi-files][rofi-files]]
  - [[#scriptl][scriptl]]
  - [[#spectrum_ls][spectrum_ls]]
  - [[#text-pager][text-pager]]
  - [[#updates][updates]]
  - [[#wmsh][wm.sh]]
  - [[#wrappers][wrappers]]
- [[#local-vars][Local vars]]

* Config
** cvimrc
:PROPERTIES:
:header-args+: :tangle ~/.cvimrc :comments no
:END:
Config for [[https://github.com/1995eaton/chromium-vim][cvim]].
#+begin_src vimrc
let configpath='/Users/diego/.cvimrc'
set localconfig
set smoothscroll
set noautofocus

let defaultengine = "duckduckgo"
let hintcharacters = "aoeuidhtns"
let homedirectory = "/Users/diego"
let searchlimit = 9

let blacklists = ['*://inbox.google.com/*']

map J nextTab
map K previousTab
#+end_src
** config.nix
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/nixpkgs/config.nix") :comments no
:END:
#+begin_src nix
{ pkgs }: {

  packageOverrides = super: let self = super.pkgs; in with self; rec {

    # Packages from source
    emacs-master = super.callPackage ~/dotfiles/nix-local/emacs {
      # use override to enable additional features
      libXaw = pkgs.xorg.libXaw;
      Xaw3d = null;
      gconf = null;
      inherit (pkgs.darwin.apple_sdk.frameworks) AppKit CoreWLAN GSS Kerberos ImageIO;
    };

    ripgrep-master = super.callPackage ~/dotfiles/nix-local/ripgrep.nix {};

    exa = super.callPackage ~/dotfiles/nix-local/exa.nix {};

    peco-master = super.callPackage ~/dotfiles/nix-local/peco.nix {};

    iosevka-master = super.callPackage ~/dotfiles/nix-local/iosevka.nix {};

    pass-git-helper-master = super.callPackage ~/dotfiles/nix-local/pass-git-helper.nix {
      inherit (python3Packages) setuptools;
    };

    termite-master = super.callPackage ~/dotfiles/nix-local/termite.nix {
      vte = gnome3.vte-ng;
    };

    # Options and overrides
    polybar = super.polybar.override {
      i3GapsSupport = true;
      githubSupport = true;
    };

    # Dependencies
    rustRegistry = super.callPackage ~/dotfiles/nix-local/deps/rust-packages.nix {};

    libotf = super.callPackage ~/dotfiles/nix-local/deps/libotf.nix {};

    otfcc = super.callPackage ~/dotfiles/nix-local/deps/otfcc.nix {};

  };

  allowUnfree = true;

}
#+end_src
** darktooth.theme
:PROPERTIES:
:header-args+: :tangle ~/.config/cmus/darktooth.theme
:END:
A theme for cmus based on [[https://github.com/emacsfodder/emacs-theme-darktooth][darktooth]].
#+begin_src conf
# Directory colors
set color_win_dir=108

# Normal text
set color_win_fg=default

# Window background color.
set color_win_bg=0

# Command line color.
set color_cmdline_bg=0
set color_cmdline_fg=6

# Color of error messages displayed on the command line.
set color_error=lightred

# Color of informational messages displayed on the command line.
set color_info=lightgreen

# Color of the separator line between windows in view (1).
set color_separator=246

# Color of window titles (topmost line of the screen).
set color_win_title_bg=234
set color_win_title_fg=12

# Status line color (shows remaining time and playback options).
set color_statusline_bg=0
set color_statusline_fg=10

# Color of currently playing track.
set color_win_cur=009

# Color of the line displaying currently playing track.
set color_titleline_bg=234
set color_titleline_fg=12

# Color of the selected row which is also the currently playing track in active window.
set color_win_cur_sel_bg=237
set color_win_cur_sel_fg=9

# Color of the selected row which is also the currently playing track in inactive window.
set color_win_inactive_cur_sel_bg=236
set color_win_inactive_cur_sel_fg=9

# Color of selected row in active window.
set color_win_sel_bg=237
set color_win_sel_fg=default

# Color of selected row in inactive window.
set color_win_inactive_sel_bg=236
set color_win_inactive_sel_fg=default
#+end_src
** emacsclient.desktop
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux)  "~/.local/share/applications/emacsclient.desktop")
:END:
This lets you set emacsclient as the default application for things. Kinda nifty.
#+begin_src conf
[Desktop Entry]
Name=Emacs Client
Exec=emacsclient -n %u
Icon=emacs-icon
Type=Application
Terminal=false
#+end_src
** exwm.desktop
#+begin_src conf
[Desktop Entry]
Name=EXWM
Comment=Emacs Window Manager
Exec=dbus-launch --exit-with-session emacs
Type=Application
X-LightDM-DesktopName=exwm
DesktopNames=exwm
Keywords=tiling;wm;windowmanager;window;manager;emacs;
#+end_src
** fonts.conf
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/fontconfig/fonts.conf") :comments no
:END:
#+begin_src xml
<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
  <dir>~/.nix-profile/share/fonts</dir>
  <alias>
    <family>Iosevka Term</family>
    <default>
      <family>monospace</family>
    </default>
    <prefer>
      <family>FontAwesome</family>
    </prefer>
  </alias>
  <match>
    <test compare="eq" name="family">
      <string>sans-serif</string>
    </test>
    <test compare="eq" name="family">
      <string>monospace</string>
    </test>
    <edit mode="delete" name="family"/>
  </match>
</fontconfig>
#+end_src
** git
*** gitconfig
:PROPERTIES:
:header-args+: :tangle ~/.gitconfig
:END:
I know, it probably doesn't make sense to keep my gitconfig here.
**** media
#+begin_src conf
[filter "media"]
    required = true
    clean = git media clean %f
    smudge = git media smudge %f
#+end_src
**** user
#+begin_src conf
[user]
    name = dieggsy
    email = diegoamundo@protonmail.com
    signingkey = AEAC5CE8E1F933F0
#+end_src
**** filter
#+begin_src conf
[filter "lfs"]
    clean = git-lfs clean %f
    smudge = git-lfs smudge %f
    required = true
#+end_src
**** core
#+begin_src conf
[core]
    editor = emacsclient -t
    excludesfile = ~/.gitignore
    pager = "less"
#+end_src
**** credential
#+begin_src conf
[credential]
    helper = /home/diego/.nix-profile/bin/pass-git-helper
#+end_src
**** gpg
#+begin_src conf
[gpg]
    program = gpg2
#+end_src
**** alias
#+begin_src conf
[alias]
    eclipse = !git fetch upstream && git rebase -s recursive -X theirs upstream/master
    gconfig = config --global
    lconfig = config --local
    mypull = pull -s recursive -X ours
    myrebase = rebase -s recursive -X theirs
    optimize = "!f() { git reflog expire --all --expire=now && git gc --prune=now --aggressive; }; f"
    plog = log --graph --pretty=format:'%C(bold black)%h%Creset - %<(50,trunc)%C(bold normal)%s%Creset %<(20)%C(bold green)%an%Creset %<(15)%C(bold red)%cr%Creset%C(bold yellow)%d%Creset' --abbrev-commit
    plog-nocolor = log --graph --pretty=format:'%h - %<(50,trunc)%s %<(20)%an %<(15)%cr%d' --abbrev-commit
    update-from-upstream = pull --rebase -s recursive -X theirs upstream/master
    aliases = config --get-regexp '^alias\\.'
    a = add
    s = status
    sl = status --long
    c = checkout
    cb = checkout -b
    b = branch
    r = rebase
    p = pull
    pr = pull --rebase
    ps = push
    psf = push --force
#+end_src
**** http
#+begin_src conf
[http]
    postBuffer = 524288000
#+end_src
**** color
#+begin_src conf
[color]
    ui = auto
[color "status"]
    added = green bold
    changed = red bold
    untracked = red bold
[color "branch"]
    current = green bold
    remote = magenta bold
[color "diff"]
    new = green bold
    old = red bold
#+end_src
**** http
#+begin_src conf
[push]
    followTags = true
#+end_src
**** status
#+begin_src conf
[status]
    showUntrackedFiles = all
    short=true
    branch=true
#+end_src
**** commit
#+begin_src conf
[commit]
    gpgsign = true
#+end_src
**** push
#+begin_src conf
[push]
    followTags = true
#+end_src
*** gitignore
:PROPERTIES:
:header-args+: :tangle ~/.gitignore
:END:

#+begin_src conf
.DS\_Store
*.pyc
__pychache__
*.alfredworkflow
#+end_src
** i3
*** i3wm
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/i3/config")
:END:
**** Defaults
#+begin_src conf
# Set modifier key to command/windows key
set $mod Mod4

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
font pango:Iosevka Term 8.5

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# reload the configuration file
bindsym $mod+Shift+j reload

# reload X11
bindsym $mod+Shift+x exec --no-startup-id xrdb -merge ~/.Xresources

# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+p restart

# exit i3 (logs you out of your X session)
# bindsym $mod+Shift+period exec --no-startup-id "i3-nagbar -t warning -f 'Iosevka Term' -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -b 'Yes, exit i3' 'i3-msg exit'"
bindsym $mod+Shift+period exec --no-startup-id i3-exit
#+end_src
**** Rofi
#+begin_src conf
# kill focused window
bindsym $mod+Shift+apostrophe kill

# start rofi for windows and commands
bindsym Mod1+space exec --no-startup-id "rofi -combi-modi window,run,drun -show combi -modi combi -display-combi ''"

# pass helper
bindsym $mod+p exec --no-startup-id "~/.password-store/.extensions/rofi.bash"

# File finder with ripgrep
bindsym $mod+f exec --no-startup-id "~/bin/rofi-files"
#+end_src
**** Windows/scratchpad
#+begin_src conf
# Scratchpad
bindsym $mod+minus move scratchpad
bindsym $mod+shift+minus scratchpad show
bindsym $mod+shift+plus sticky toggle

# Floating editor
exec --no-startup-id emacs
for_window [title="^emacs@Ragnarok$"] floating enable;
for_window [title="^emacs@Ragnarok$"] sticky enable;
for_window [title="^emacs@Ragnarok$"] move scratchpad;
bindsym $mod+space [title="^emacs@Ragnarok$"] scratchpad show

# Floating terminal
exec --no-startup-id termite --name=dropmite
for_window [instance="dropmite"] floating enable;
for_window [instance="dropmite"] sticky enable;
for_window [instance="dropmite"] move scratchpad; [instance="dropmite"] scratchpad show; resize set 2446 585; move absolute position 59px 95px; move scratchpad
bindsym $mod+Return [instance="dropmite"] scratchpad show

for_window [window_role="pop-up"] floating enable
for_window [window_role="bubble"] floating enable
for_window [window_role="task_dialog"] floating enable

for_window [window_type="dialog"] floating enable
for_window [window_type="menu"] floating enable
#+end_src
**** Focus
#+begin_src conf
# change focus
bindsym $mod+h focus left
bindsym $mod+t focus down
bindsym $mod+n focus up
bindsym $mod+s focus right

# alternatively, you can use the cursor keys:
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# change focus between tiling / floating windows
# bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent

# focus the child container
#bindsym $mod+d focus child
#+end_src
**** Motion
#+begin_src conf
# move focused window
bindsym $mod+Shift+h move left
bindsym $mod+Shift+t move down
bindsym $mod+Shift+n move up
bindsym $mod+Shift+s move right
bindsym $mod+Shift+c move position center

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right
#+end_src
**** Layout and splitting
#+begin_src conf
# split in horizontal orientation
bindsym $mod+d split h

# split in vertical orientation
bindsym $mod+k split v

# enter fullscreen mode for the focused container
bindsym $mod+u fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+o layout stacking
bindsym $mod+comma layout tabbed
bindsym $mod+period layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle
#+end_src
**** Workspaces
#+begin_src conf
# switch to workspace
workspace_layout tabbed
bindsym $mod+1 workspace 1
bindsym $mod+2 workspace 2
bindsym $mod+3 workspace 3
bindsym $mod+4 workspace 4
bindsym $mod+5 workspace 5
bindsym $mod+6 workspace 6
bindsym $mod+7 workspace 7
bindsym $mod+8 workspace 8
bindsym $mod+9 workspace 9
bindsym $mod+0 workspace 10
bindsym $mod+Tab workspace back_and_forth
workspace_auto_back_and_forth yes

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace 1
bindsym $mod+Shift+2 move container to workspace 2
bindsym $mod+Shift+3 move container to workspace 3
bindsym $mod+Shift+4 move container to workspace 4
bindsym $mod+Shift+5 move container to workspace 5
bindsym $mod+Shift+6 move container to workspace 6
bindsym $mod+Shift+7 move container to workspace 7
bindsym $mod+Shift+8 move container to workspace 8
bindsym $mod+Shift+9 move container to workspace 9
bindsym $mod+Shift+0 move container to workspace 10

for_window [class="etcher"] floating enable
#+end_src
**** Resizing
#+begin_src conf
# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym h resize shrink width 10 px or 10 ppt
        bindsym t resize grow height 10 px or 10 ppt
        bindsym n resize shrink height 10 px or 10 ppt
        bindsym s resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape
        bindsym Return mode "default"
        bindsym Escape mode "default"
}

bindsym $mod+r mode "resize"
#+end_src
**** Bar
#+begin_src conf
# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
bar {
    status_command i3blocks
    position top
    tray_output none
    font pango:Iosevka Term, FontAwesome 9
    strip_workspace_numbers yes
    # mode hide
    colors {
        background #282828
        statusline #fdf4c1
        focused_workspace  #282828 #282828 #FDF4c1
        active_workspace   #282828 #282828 #FDF4c1
        inactive_workspace #282828 #282828 #A89984
        urgent_workspace   #901A1E #901A1E #FDF4c1
        binding_mode       #901A1E #901A1E #FDF4c1
    }
}
#+end_src
**** Appearance
#+begin_src conf
# class                 border  background text    indicator child_border
client.focused          #EBDBB2 #EBDBB2    #282828 #3fd7e5   #EBDBB2
client.focused_inactive #928374 #282828    #EBDBB2 #484e50   #928374
client.unfocused        #928374 #282828    #A89984 #292d2e   #928374
client.urgent           #2D2D2D #2D2D2D    #EBDBB2 #901A1E
client.background       #282828

gaps inner 30
gaps outer 0

set $mode_gaps Toggle gaps: (1) on (2) off
bindsym $mod+g mode "$mode_gaps"
mode "$mode_gaps" {
    bindsym 1 mode "default", gaps inner all set 30, gaps outer all set 0
    bindsym 2 mode "default", gaps inner all set 0, gaps outer all set 0
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
new_window pixel 1
#+end_src
**** Bindings
#+begin_src conf
# Keyboard brightness
bindsym XF86KbdBrightnessDown exec kb-light - && pkill -RTMIN+2 i3blocks
bindsym XF86KbdBrightnessUp exec kb-light + && pkill -RTMIN+2 i3blocks

# Screen brightness
bindsym XF86MonBrightnessUp exec ~/bin/i3blocks/bright Backlight + && pkill -RTMIN+2 i3blocks
bindsym XF86MonBrightnessDown exec ~/bin/i3blocks/bright Backlight - && pkill -RTMIN+2 i3blocks

# Audio controls
bindsym XF86AudioMute exec amixer -D pulse sset Master toggle && pkill -RTMIN+3 i3blocks
bindsym XF86AudioLowerVolume exec amixer -D pulse sset Master 5%- && pkill -RTMIN+3 i3blocks
bindsym XF86AudioRaiseVolume exec amixer -D pulse sset Master 5%+ && pkill -RTMIN+3 i3blocks

# Media controls
bindsym XF86AudioPrev exec playerctl-cmus previous && pkill -RTMIN+1 i3blocks
bindsym XF86AudioNext exec playerctl-cmus next && pkill -RTMIN+1 i3blocks
bindsym XF86AudioPlay exec playerctl-cmus play-pause && pkill -RTMIN+1 i3blocks

# Screenshot
bindsym --release XF86LaunchB exec "scrot -s ~/Pictures/Screenshots/%Y-%m-%d_%H:%M:%S.png"
bindsym Shift+XF86LaunchB exec "scrot -ub ~/Pictures/Screenshots/%Y-%m-%d_%H:%M:%S.png"
bindsym XF86LaunchA exec "scrot ~/Pictures/Screenshots/%Y-%m-%d_%H:%M:%S.png"
#+end_src
**** Startup Programs/Commands
#+begin_src conf
# exec --no-startup-id nm-applet
#+end_src
**** Plasma Integration
#+begin_src conf :tangle no
## Plasma Integration
# Try to kill the wallpaper set by Plasma (it takes up the entire workspace and hides everythiing)
exec --no-startup-id wmctrl -c Plasma
for_window [title="Desktop — Plasma"] kill; floating enable; border none

## Avoid tiling popups, dropdown windows from plasma
# for the first time, manually resize them, i3 will remember the setting for floating windows
for_window [class="plasmashell"] floating enable;
for_window [class="Plasma"] floating enable; border none
for_window [title="plasma-desktop"] floating enable; border none
for_window [title="win7"] floating enable; border none
for_window [class="krunner"] floating enable; border none
for_window [class="Kmix"] floating enable; border none
for_window [class="Klipper"] floating enable; border none
for_window [class="Plasmoidviewer"] floating enable; border none
#+end_src
*** i3blocks
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.i3blocks.conf")
:END:
#+begin_src conf
separator=false
# separator_block_width=7
border_top=0
border_left=0
border_right=0
border_bottom=2

# [focused window]
# command=xtitle -s -t 75 -f "  %s\n"
# interval=persist

[music]
command=~/bin/i3blocks/music
interval=5
signal=1
border=#FE8019

[layout]
command=~/bin/i3blocks/layout
interval=once
border=#8EC07C

[Vol]
command=~/bin/i3blocks/volume
interval=once
signal=3

border=#FB4933
[Brightness]
command=~/bin/i3blocks/bright
interval=once
signal=2
border=#FABD2F

[Disk]
label=  
command=~/bin/i3blocks/disk /
interval=30
border=#D3869B

[wifi]
label=  
command=~/bin/i3blocks/wifi
interval=2
border=#B8bb26

[Bat]
command=~/bin/i3blocks/battery
interval=30
border=#83A598

[Time]
command=~/bin/i3blocks/date
interval=10
border=#A89984
#+end_src
*** i3status
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/i3status/config")
:END:
#+begin_src conf
# i3status configuration file.
# see "man i3status" for documentation.

# It is important that this file is edited as UTF-8.
# The following line should contain a sharp s:
# ß
# If the above line is not correctly displayed, fix your editor first!

general {
colors = true
interval = 5
color_good='#b8bb26'
color_bad='#fb4933'
color_degraded='#fabd2f'
}

# order += "ipv6"
order += "disk /"
# order += "run_watch DHCP"
# order += "run_watch VPN"
order += "wireless _first_"
# order += "ethernet _first_"
order+= "volume master"
order += "battery 0"
# order += "load"
order += "tztime local"

wireless _first_ {
# format_up = "  %essid %ip"
format_up = "  %essid"
format_down = " None"
}

ethernet _first_ {
# if you use %speed, i3status requires root privileges
format_up = "E: %ip (%speed)"
format_down = "E: down"
}

battery 0 {
# format = "%status  %percentage %remaining"
format = "%status  %percentage"
status_chr = ""
status_bat = ""
status_full = ""
integer_battery_capacity=true
last_full_capacity = true
threshold_type = time
low_threshold = 10
hide_seconds = true
# format = " %status %percentage %remaining"
}

run_watch DHCP {
pidfile = "/var/run/dhclient*.pid"
}

run_watch VPN {
pidfile = "/var/run/vpnc/pid"
}

tztime local {
format = "  %Y-%m-%d %H:%M"
}

load {
format = "%1min"
}

disk "/" {
format = "  %avail"
}

volume master {
format = " %volume"
format_muted = "  %volume"
device = "pulse:1"
}
#+end_src
*** polybar
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/polybar/config")
:END:
#+begin_src conf
;=====================================================
;
;   To learn more about how to configure Polybar
;   go to https://github.com/jaagr/polybar
;
;   The README contains alot of information
;
;=====================================================

[colors]
;background = ${xrdb:color0:#222}
background = #282828
background-alt = #444
;foreground = ${xrdb:color7:#222}
foreground = #FDF4c1
foreground-alt = #555
primary = #ffb52a
secondary = #e60053
alert = #bd2c40

[bar/example]
;monitor = ${env:MONITOR:HDMI-1}
width = 100%
height = 27
;offset-x = 1%
;offset-y = 1%
dpi = 184
radius = 6.0
fixed-center = false

background = ${colors.background}
foreground = ${colors.foreground}

line-size = 3
line-color = #f00

border-size = 5
border-color = #282828

padding-left = 0
padding-right = 2

module-margin-left = 1
module-margin-right = 2

font-0 = Iosevka Term:size=9
font-1 = FontAwesome:size=9

modules-left = i3
; modules-center =
; modules-right = filesystem xbacklight volume xkeyboard memory cpu wlan eth battery temperature date powermenu
modules-right = battery date

tray-position = right
tray-padding = 2
;tray-transparent = true
;tray-background = #0063ff

;wm-restack = bspwm
;wm-restack = i3

;override-redirect = true

;scroll-up = bspwm-desknext
;scroll-down = bspwm-deskprev

;scroll-up = i3wm-wsnext
;scroll-down = i3wm-wsprev

; [module/xwindow]
; type = internal/xwindow
; label = %title:0:30:...%

; [module/xkeyboard]
; type = internal/xkeyboard
; blacklist-0 = num lock

; format-prefix = " "
; format-prefix-foreground = ${colors.foreground-alt}
; format-prefix-underline = ${colors.secondary}

; label-layout = %layout%
; label-layout-underline = ${colors.secondary}

; label-indicator-padding = 2
; label-indicator-margin = 1
; label-indicator-background = ${colors.secondary}
; label-indicator-underline = ${colors.secondary}

; [module/filesystem]
; type = internal/fs
; interval = 25

; mount-0 = /

; label-mounted = %{F#0a81f5}%mountpoint%%{F-}: %percentage_used%%
; label-unmounted = %mountpoint% not mounted
; label-unmounted-foreground = ${colors.foreground-alt}

[module/bspwm]
ws-icon-default = ○
type = internal/bspwm

label-focused = %index%
label-focused-background = ${colors.background-alt}
label-focused-underline= ${colors.primary}
label-focused-padding = 2

label-occupied = %index%
label-occupied-padding = 2

label-urgent = %index%!
label-urgent-background = ${colors.alert}
label-urgent-padding = 2

label-empty = %index%
label-empty-foreground = ${colors.foreground-alt}
label-empty-padding = 2

[module/i3]
ws-icon-default = ○
type = internal/i3
format = <label-state> <label-mode>
index-sort = true
wrapping-scroll = false

; Only show workspaces on the same output as the bar
;pin-workspaces = true

label-mode-padding = 2
label-mode-foreground = #000
label-mode-background = ${colors.primary}

; focused = Active workspace on focused monitor
label-focused = %icon%
label-focused-background = ${module/bspwm.label-focused-background}
label-focused-underline = ${module/bspwm.label-focused-underline}
label-focused-padding = ${module/bspwm.label-focused-padding}

; unfocused = Inactive workspace on any monitor
label-unfocused = %index%
label-unfocused-padding = ${module/bspwm.label-occupied-padding}

; visible = Active workspace on unfocused monitor
label-visible = %index%
label-visible-background = ${self.label-focused-background}
label-visible-underline = ${self.label-focused-underline}
label-visible-padding = ${self.label-focused-padding}

; urgent = Workspace with urgency hint set
label-urgent = %index%
label-urgent-background = ${module/bspwm.label-urgent-background}
label-urgent-padding = ${module/bspwm.label-urgent-padding}

[module/mpd]
type = internal/mpd
format-online = <label-song>  <icon-prev> <icon-stop> <toggle> <icon-next>

icon-prev = 
icon-stop = 
icon-play = 
icon-pause = 
icon-next = 

label-song-maxlen = 25
label-song-ellipsis = true

[module/xbacklight]
type = internal/xbacklight

format = <label> <bar>
label = BL

bar-width = 10
bar-indicator = |
bar-indicator-foreground = #ff
bar-indicator-font = 2
bar-fill = ─
bar-fill-font = 2
bar-fill-foreground = #9f78e1
bar-empty = ─
bar-empty-font = 2
bar-empty-foreground = ${colors.foreground-alt}

[module/backlight-acpi]
inherit = module/xbacklight
type = internal/backlight
card = intel_backlight

[module/cpu]
type = internal/cpu
interval = 2
format-prefix = " "
format-prefix-foreground = ${colors.foreground-alt}
format-underline = #f90000
label = %percentage%%

[module/memory]
type = internal/memory
interval = 2
format-prefix = " "
format-prefix-foreground = ${colors.foreground-alt}
format-underline = #4bffdc
label = %percentage_used%%

[module/wlan]
type = internal/network
interface = net1
interval = 3.0

format-connected = <ramp-signal> <label-connected>
format-connected-underline = #9f78e1
label-connected = %essid%

format-disconnected =
;format-disconnected = <label-disconnected>
;format-disconnected-underline = ${self.format-connected-underline}
;label-disconnected = %ifname% disconnected
;label-disconnected-foreground = ${colors.foreground-alt}

ramp-signal-0 = 
ramp-signal-1 = 
ramp-signal-2 = 
ramp-signal-3 = 
ramp-signal-4 = 
ramp-signal-foreground = ${colors.foreground-alt}

[module/eth]
type = internal/network
interface = net0
interval = 3.0

format-connected-underline = #55aa55
format-connected-prefix = " "
format-connected-prefix-foreground = ${colors.foreground-alt}
label-connected = %local_ip%

format-disconnected =
;format-disconnected = <label-disconnected>
;format-disconnected-underline = ${self.format-connected-underline}
;label-disconnected = %ifname% disconnected
;label-disconnected-foreground = ${colors.foreground-alt}

[module/date]
type = internal/date
interval = 5
date  = " %Y-%m-%d"

time = %H:%M
time-alt = %H:%M:%S

format-prefix = 
format-prefix-foreground = ${colors.foreground}
format-underline = #A89984

label = %date% %time%

[module/volume]
type = internal/volume

format-volume = <label-volume> <bar-volume>
label-volume = VOL
label-volume-foreground = ${root.foreground}

format-muted-prefix = " "
format-muted-foreground = ${colors.foreground-alt}
label-muted = sound muted

bar-volume-width = 10
bar-volume-foreground-0 = #55aa55
bar-volume-foreground-1 = #55aa55
bar-volume-foreground-2 = #55aa55
bar-volume-foreground-3 = #55aa55
bar-volume-foreground-4 = #55aa55
bar-volume-foreground-5 = #f5a70a
bar-volume-foreground-6 = #ff5555
bar-volume-gradient = false
bar-volume-indicator = |
bar-volume-indicator-font = 2
bar-volume-fill = ─
bar-volume-fill-font = 2
bar-volume-empty = ─
bar-volume-empty-font = 2
bar-volume-empty-foreground = ${colors.foreground-alt}

[module/battery]
type = internal/battery
battery = BAT0
adapter = ADP1
full-at = 98

format-charging = <animation-charging> <label-charging>
format-charging-underline = #ffb52a

format-discharging = <ramp-capacity> <label-discharging>
format-discharging-underline = ${self.format-charging-underline}

format-full-prefix = " "
format-full-prefix-foreground = ${colors.foreground-alt}
format-full-underline = ${self.format-charging-underline}

ramp-capacity-0 = 
ramp-capacity-1 = 
ramp-capacity-2 = 
ramp-capacity-foreground = ${colors.foreground-alt}

animation-charging-0 = 
animation-charging-1 = 
animation-charging-2 = 
animation-charging-foreground = ${colors.foreground-alt}
animation-charging-framerate = 750

; [module/temperature]
; type = internal/temperature
; thermal-zone = 0
; warn-temperature = 60

; format = <ramp> <label>
; format-underline = #f50a4d
; format-warn = <ramp> <label-warn>
; format-warn-underline = ${self.format-underline}

; label = %temperature%
; label-warn = %temperature%
; label-warn-foreground = ${colors.secondary}

; ramp-0 = 
; ramp-1 = 
; ramp-2 = 
; ramp-foreground = ${colors.foreground-alt}

[module/powermenu]
type = custom/menu

format-spacing = 1

label-open = 
label-open-foreground = ${colors.secondary}
label-close =  cancel
label-close-foreground = ${colors.secondary}
label-separator = |
label-separator-foreground = ${colors.foreground-alt}

menu-0-0 = reboot
menu-0-0-exec = menu-open-1
menu-0-1 = power off
menu-0-1-exec = menu-open-2

menu-1-0 = cancel
menu-1-0-exec = menu-open-0
menu-1-1 = reboot
menu-1-1-exec = sudo reboot

menu-2-0 = power off
menu-2-0-exec = sudo poweroff
menu-2-1 = cancel
menu-2-1-exec = menu-open-0

[settings]
screenchange-reload = true
;compositing-background = xor
;compositing-background = screen
;compositing-foreground = source
;compositing-border = over

[global/wm]
margin-top = 5
margin-bottom = 5

; vim:ft=dosini
#+end_src
** init.vim
:PROPERTIES:
:header-args+: :tangle ~/.config/nvim/init.vim :comments no
:END:
*** Plugins
#+begin_src vimrc
set nocompatible
filetype off
set rtp+=~/.config/nvim/bundle/Vundle.vim
call vundle#begin("~/.config/nvim/bundle")
Plugin 'Shougo/neocomplcache.vim'
Plugin 'VundleVim/Vundle.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'davidhalter/jedi-vim'
Plugin 'godlygeek/tabular'
Plugin 'itchyny/lightline.vim'
Plugin 'jceb/vim-orgmode'
Plugin 'jiangmiao/auto-pairs'
Plugin 'joshdick/onedark.vim'
Plugin 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plugin 'junegunn/fzf.vim'
Plugin 'morhetz/gruvbox'
Plugin 'mswift42/vim-themes'
Plugin 'osyo-manga/vim-anzu'
Plugin 'plasticboy/vim-markdown'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'sheerun/vim-polyglot'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-speeddating'
Plugin 'tpope/vim-surround'
Plugin 'wincent/command-t'
call vundle#end()
filetype plugin indent on
#+end_src
*** Defaults
#+begin_src vimrc
syntax on
set laststatus=2
set number
set relativenumber
set cursorline
set hlsearch
set backspace=2 "make backspace work like most other apps
set tabstop=4
set shiftwidth=4
set expandtab
#+end_src
*** Plugin settings
#+begin_src vimrc
let g:neocomplcache_enable_at_startup=1
let g:vim_markdown_folding_disabled = 1
#+end_src
*** Bindings
#+begin_src vimrc
let mapleader = "\<Space>"
imap <C-_> <Esc>
nnoremap <leader><leader> :CommandTCommand<CR>
nnoremap <leader>ff :CommandT ./<CR>
nnoremap <leader>fs :w<CR>
nnoremap <leader>bb :CommandTBuffer<CR>

nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)
#+end_src
*** Appearance
#+begin_src vimrc
colorscheme gruvbox
set background=dark
let g:lightline = {
    \ 'colorscheme' : 'gruvbox',
    \ }
#+end_src
** nanorc
:PROPERTIES:
:header-args+: :tangle ~/.nanorc
:END:
Lol
#+begin_src conf
include "~/.nano/*.nanorc"
#+end_src
** networkmanager_dmenu
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/networkmanager-dmenu/config.ini")
:END:
#+begin_src conf
[dmenu]
dmenu_command = rofi
p = [Networks]
rofi_highlight=True
# # Note that dmenu_command can contain arguments as well like `rofi -width 30`
# # Rofi and dmenu are set to case insensitive by default `-i`
# l = number of lines to display, defaults to number of total network options
# fn = font string
# nb = normal background (name, #RGB, or #RRGGBB)
# nf = normal foreground
# sb = selected background
# sf = selected foreground
# b =  (just set to empty value and menu will appear at the bottom
# m = number of monitor to display on
# p = Custom Prompt for the networks menu
# pinentry = Pinentry command

[editor]
terminal = termite
gui_if_available = True
# terminal = <name of terminal program>
# gui_if_available = <True or False>
#+end_src
** peco
:PROPERTIES:
:header-args+: :tangle ~/.config/peco/config.json :comments no
:END:
#+begin_src json
{
    "Prompt": "[peco]",
    "InitialFilter":"SmartCase",
    "SelectionPrefix":">",
    "Keymap": {
        "C-_": "peco.ToggleRangeMode"
    },
    "Style": {
        "Basic": ["on_default", "default"],
        "SavedSelection": ["bold", "on_yellow", "white"],
        "Selected": ["on_white","black"],
        "Query": ["cyan", "bold"],
        "Matched": ["bold", "blue", "on_black"]
    }
}
#+end_src
** pythonrc.py
:PROPERTIES:
:header-args+: :tangle ~/.pythonrc.py :padline no
:END:

#+begin_src python
# -*- coding: utf-8 -*-

from __future__ import print_function, unicode_literals, division

try:
    def progBar(i, total, length=50, kind=None):
        """A nice progress bar to use with for loops."""
        i += 1
        n = int(i*length/total)
        percent = i/total*100
        frame = ("{0:6.2f}% |{1}{2}|".format(percent, '█'*n, ' '*(length-n))
                if kind is None else
                "{0:6.2f}% [{1}{2}]".format(percent, str(kind)*n, ' '*(length-n)))
        endchar = ('\r' if i < total else ' Done!\n')
        print(frame, end=endchar)
except:
    pass

# def write_csv(path, rows):
#     "Write a list of iterables to a CSV, I think"
#     with open(path, 'w') as f:
#         writer = csv.writer(f)
#         writer.writerows(rows)
#+end_src
** ssh
:PROPERTIES:
:header-args+: :tangle ~/.ssh/config
:END:
#+begin_src conf
Host athena
    HostName athena.dialup.mit.edu
    User dmundo
    ForwardX11Trusted yes

Host racecar
     HostName 192.168.0.34
     User racecar
     ForwardX11 yes
#Default GitHub
Host github.com
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_rsa

Host github-MIT
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_rsa_MIT
#+end_src
** termite
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/termite/config")
:END:
#+begin_src conf
[options]
font = iosevka term 9.5
allow_bold=0
cursor_shape=ibeam
[colors]
background=#282828
foreground=#FDf4c1
color0=#282828
color1=#9d1306
color2=#79740e
color3=#b57614
color4=#076678
color5=#8f3f71
color6=#00a7af
color7=#bdae93
color8=#686868
color9=#fb4933
color10=#b8bb26
color11=#fabd2f
color12=#83a598
color13=#d3869b
color14=#3fd7e5
color15=#fdf4c1
#+end_src
** tmux
*** tmux.conf
:PROPERTIES:
:header-args+: :tangle ~/.tmux.conf
:END:
**** Initialize
#+begin_src conf
set -s escape-time 0
# set -g default-terminal "xterm-256color"
# set -ga terminal-overrides ",screen-256color:Tc"
# set -g lock-after-time 300
# set -g lock-command "/usr/bin/cmatrix -B"
set -g update-environment -r
set -g set-titles on
set -g set-titles-string '#W'
# set-option -g set-titles-string '#H:#S.#I.#P #W #T'
#+end_src
**** Prefix
#+begin_src conf
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix
#+end_src
**** Bindings
#+begin_src conf
bind r source-file ~/.tmux.conf

set -g mouse on
set-window-option -g xterm-keys on
set-option -g status-keys vi
setw -g mode-keys vi
bind-key x kill-pane
bind-key q detach-client
bind-key Q detach-client
bind-key Escape copy-mode
bind-key [ copy-mode
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-pipe 'xclip -i -sel c' \; send -X clear-selection
set-option -s set-clipboard off
bind -n C-k clear-history
#+end_src
**** Windows/Panes
#+begin_src conf
setw -g monitor-activity on
set-option -g allow-rename off
set -g history-limit 5000
set -g base-index 1
set -g pane-base-index 1
set-option -g renumber-windows on

bind | split-window -h -c '#{pane_current_path}'
bind - split-window -v -c '#{pane_current_path}'
unbind '"'
unbind %

bind-key { swap-window -t -1
bind-key } swap-window -t +1
bind-key \ next-window

bind-key j select-pane -D
bind-key k select-pane -U
bind-key h select-pane -L
bind-key l select-pane -R
bind-key o swap-pane -D
bind-key < split-window -h \; choose-window 'kill-pane ; join-pane -hs %%'
bind-key > break-pane -d
bind-key ^ split-window -v \; choose-window 'kill-pane ; join-pane -vs %%'
bind-key = select-layout even-horizontal
bind-key + select-layout even-vertical
#+end_src
**** Bell
#+begin_src conf
set-option -g bell-action any
set-option -g visual-bell off
#+end_src
**** Theming
#+begin_src conf
# panes
set -g pane-border-fg black
set -g pane-active-border-fg brightred

## Status bar design
# status line
set -g status-justify left
set -g status-bg default
set -g status-fg colour12
set -g status-interval 2

# messaging
set -g message-fg black
set -g message-bg yellow
set -g message-command-fg blue
set -g message-command-bg black

#window mode
setw -g mode-bg colour6
setw -g mode-fg colour0

# window status
setw -g window-status-format " #F#I:#W#F "
setw -g window-status-current-format " #F#I:#W#F "
setw -g window-status-format "#[fg=magenta]#[bg=black] #I #[bg=cyan]#[fg=colour8] #W "
setw -g window-status-current-format "#[bg=brightmagenta]#[fg=colour8] #I #[fg=colour8]#[bg=colour14] #W "
setw -g window-status-current-bg colour0
setw -g window-status-current-fg colour11
setw -g window-status-current-attr dim
setw -g window-status-bg green
setw -g window-status-fg black
setw -g window-status-attr reverse

# Info on left (I don't have a session display for now)
set -g status-left ''

# loud or quiet?
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-window-option -g monitor-activity off
set-window-option -g aggressive-resize on
set-option -g bell-action none

set -g default-terminal "screen-256color"

# The modes {
setw -g clock-mode-colour colour135
setw -g mode-attr none
setw -g mode-fg colour9
setw -g mode-bg colour237

# }
# The panes {

set -g pane-border-bg colour0
set -g pane-border-fg colour238
set -g pane-active-border-bg colour0
set -g pane-active-border-fg colour6

# }
# The statusbar {

set -g status-position bottom
set -g status-bg colour234
set -g status-fg colour137
set -g status-attr dim
set -g status-left ''
set -g status-right '#[fg=colour233,bg=colour241,bold] %Y-%d-%m #[fg=colour233,bg=colour245,bold] %H:%M '
set -g status-right-length 50
set -g status-left-length 20

setw -g window-status-current-fg colour81
setw -g window-status-current-bg colour238
setw -g window-status-current-attr bold
setw -g window-status-current-format ' #I#[fg=colour250]:#[fg=colour015]#W#[fg=colour6]#F '

setw -g window-status-fg colour13
setw -g window-status-bg colour235
setw -g window-status-attr none
setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour007]#W#[fg=colour244]#F '

setw -g window-status-bell-attr bold
setw -g window-status-bell-fg colour255
setw -g window-status-bell-bg colour1

# }
# The messages {

set -g message-attr bold
set -g message-fg colour232
set -g message-bg colour166

# }
#+end_src
**** osx-specific
#+begin_src conf :tangle (when (eq system-type 'darwin) "~/.tmux.conf")
set-option -g default-command "reattach-to-user-namespace -l zsh"
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
#+end_src
**** Plugins
#+begin_src conf
# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-urlview'
# set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @continuum-restore 'on'

set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-sidebar'
set -g @sidebar-tree-command 'exa -TL2 --color=always'
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
#+end_src
*** tmuxinator-hud
:PROPERTIES:
:header-args+: :tangle ~/.tmuxinator/hud.yml
:END:
#+begin_src yaml :comments no
# ~/.tmuxinator/hud.yml

name: hud

windows:
  - shell:
  - social: exec weechat
  - music: exec cmus
#+end_src
** xbindkeysrc
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.xbindkeysrc") :comments no
:END:
#+begin_src conf-unix
"~/bin/i3blocks/volume +"
    XF86AudioRaiseVolume

"~/bin/i3blocks/volume -"
    XF86AudioLowerVolume

"~/bin/i3blocks/volume toggle"
    XF86AudioMute

"~/bin/i3blocks/music next"
    XF86AudioNext

"~/bin/i3blocks/music prev"
    XF86AudioPrev

"~/bin/i3blocks/music toggle"
    XF86AudioPlay

"~/bin/i3blocks/bright Backlight +"
    XF86MonBrightnessUp

"~/bin/i3blocks/bright Backlight -"
    XF86MonBrightnessDown

"~/bin/i3blocks/bright Kb-light +"
    XF86KbdBrightnessUp

"~/bin/i3blocks/bright Kb-light -"
    XF86KbdBrightnessDown

"scrot -s ~/Pictures/Screenshots/%Y-%m-%d_%H:%M:%S.png"
    XF86LaunchB

 "scrot -ub ~/Pictures/Screenshots/%Y-%m-%d_%H:%M:%S.png"
    shift + XF86LaunchB

 "scrot ~/Pictures/Screenshots/%Y-%m-%d_%H:%M:%S.png"
    XF86LaunchA

 "rofi -combi-modi window,run,drun -show combi -modi combi"
    alt + space
#+end_src
** Xresources
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.Xresources")
:END:
#+begin_src conf-xdefaults
Xft.antialias: 1
Xft.hinting: 1
Xft.rgba: rgb
Xft.hintstyle: hintslight
Xft.dpi: 184

rofi.color-enabled: true
rofi.font: iosevka term, fontawesome 20
rofi.scroll-method: 1
rofi.padding: 20
rofi.line-padding: 10
rofi.lines: 10
rofi.color-window: #282828, #fdf4c1, #282828
rofi.color-normal: #282828, #fdf4c1, #282828, #3c3836, #fdf4c1
rofi.color-active: #282828, #DD6f48, #282828, #3c3836, #DD6f48
rofi.color-urgent: #282828, #FB4933, #282828, #3c3836, #FB4933
rofi.width: 40

Emacs.fontBackend: xft
Emacs.font: Iosevka Term-9.5:weight=book
Emacs.geometry: 105x41
Emacs.menuBar: off
Emacs.toolBar: off
Emacs.verticalScrollBars: off
Emacs.cursorBlink: off
Emacs.foreground: #fdf4c1
Emacs.background: #282828
Emacs.mode-line.attributeForeground: #EBDBB2
Emacs.mode-line.attributeBackground: #1D2021
Emacs.mode-line.attributeBox: nil
#+end_src
** xsessionrc
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.xsessionrc") :shebang "#!/bin/bash"
:END:
#+begin_src sh
feh --bg-fill '/home/diego/Pictures/darkbrown.jpg' &

pkill dropbox; dropbox start &

pkill unclutter; unclutter &

pkill mpd; mpd &
# tmux kill-session -t sbcl_daemon 2>/dev/null
# tmux new -d -s sbcl_daemon /usr/local/bin/sbcl --load ~/scriptl/scriptl-server.lisp &

pkill xautolock; xautolock -corners ---- -time 5 -locker '/usr/local/bin/lock -gpf Iosevka-Term -- scrot -z' -detectsleep &
# xautolock -time 7 -locker 'systemctl suspend' &

# xset s off
xset r rate 300 50

setxkbmap dvorak
setxkbmap -option 'ctrl:nocaps'
xcape -e 'Control_L=Escape'

if [ "$XDG_CURRENT_DESKTOP" = "exwm" ]; then
    pkill xbindkeys; xbindkeys &
fi
#+end_src
** zathurarc
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/zathura/zathurarc")
:END:
#+begin_src conf
set font "Iosevka Term 9"
set default-bg "#282828"
set default-fg "#fdf4c1"
set inputbar-bg "#282828"
set inputbar-fg "#3FD7E5"
set statusbar-fg "#fdf4c1"
set first-page-column 1
set recolor-darkcolor "#fDf4c1"
set recolor-lightcolor "#282828"
#+end_src
** xterm-24bit.terminfo
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/xterm-24bit.terminfo")
:END:
#+begin_src text :comments no
# Use colon separators.
xterm-24bit|xterm with 24-bit direct color mode,
  use=xterm-256color,
  setb24=\E[48:2:%p1%{65536}%/%d:%p1%{256}%/%{255}%&%d:%p1%{255}%&%dm,
  setf24=\E[38:2:%p1%{65536}%/%d:%p1%{256}%/%{255}%&%d:%p1%{255}%&%dm,
# Use semicolon separators.
xterm-24bits|xterm with 24-bit direct color mode,
  use=xterm-256color,
  setb24=\E[48;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%&%d;%p1%{255}%&%dm,
  setf24=\E[38;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%&%d;%p1%{255}%&%dm,
#+end_src
* Scripts
** i3-exit
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3-exit") :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
message="Exit i3?"
response=$(echo -e "Exit\nCancel" | rofi -lines 2 -width 30 -dmenu -i -mesg "$message" -p "")
if [ "$response" = "Exit" ]; then
    i3-msg exit
fi
#+end_src
** i3blocks/exwm utils
i3blocks scripts taken from/inspired by [[https://github.com/yeungocanh/archdot/tree/master/.config/i3blocks][yeungocanh/archdot]].
*** battery
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/battery") :shebang "#!/bin/bash"
:END:
#+begin_src sh
if [ "$BLOCK_BUTTON" = "1" ]; then
    notify-send "$(upower -i /org/freedesktop/UPower/devices/battery_BAT0)"
fi
bat=$(acpi | cut -d " " -f4 | tr -d "%,")
Adapt=$(acpi -a | cut -d " " -f3)

touch /tmp/battery-status
if [ "$bat" -lt 11 ] && [ "$(</tmp/battery-status)" != "critically-low" ] && [ "$Adapt" != "on-line" ]; then
    espeak -vf4 "Battery critically low, consider charging." &
    notify-send "Battery critically low, consider charging." &
    echo "critically-low" > /tmp/battery-status
else
    echo "fine" > /tmp/battery-status
fi


if [ "$Adapt" = "on-line" ];then
    icon=""
elif [ "$bat" -gt "95" ];then
    icon=""
elif [ "$bat" -gt "75" ];then
    icon=""
elif [ "$bat" -gt "50" ];then
    icon=""
elif [ "$bat" -gt "25" ];then
    icon=""
elif [ "$bat" -le "25" ];then
    icon=""
fi


echo -e "  $icon  $bat "
#+end_src
*** bright
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/bright") :shebang "#!/bin/bash"
:END:
#+begin_src sh
if [ "$XDG_CURRENT_DESKTOP" = "exwm" ]; then
    mode="$1"
else
    mode="$(<~/bin/i3blocks/brightness.txt)"
fi

if [ "$mode" = "Backlight" ]; then
    brightness=$(xbacklight -get)
    multiple=$(printf %.0f $(echo "scale=2; $brightness / 5" | bc))
    brightness=$((($multiple * 5)))
    if [ "$2" = "+" ] || [ "$BLOCK_BUTTON" = "5" ]; then
        brightness=$((($brightness + 5)))
        xbacklight -set $brightness > /dev/null 2>&1
    elif [ "$2" = "-" ] || [ "$BLOCK_BUTTON" = "4" ]; then
        brightness=$((($brightness - 5)))
        xbacklight -set $brightness > /dev/null 2>&1
    elif  [ "$BLOCK_BUTTON" = "1" ]; then
        echo "Kb-light" > ~/bin/i3blocks/brightness.txt
        pkill -RTMIN+2 i3blocks
        # mode="Backlight"
    fi
    echo "    $brightness"
elif [ "$mode" = "Kb-light" ]; then
    if [ "$2" = "+" ] || [ "$BLOCK_BUTTON" = "5" ];then
        kb-light + > /dev/null 2>&1
    elif [ "$2" = "-" ] || [ "$BLOCK_BUTTON" = "4" ];then
        kb-light - > /dev/null 2>&1
    elif [ "$BLOCK_BUTTON" = "1" ]; then
        echo "Backlight" > ~/bin/i3blocks/brightness.txt
        pkill -RTMIN+2 i3blocks
        # mode="Kb-light"
    fi
    brightness="$(kb-light)"
    echo "    $brightness"
fi

if [ "$XDG_CURRENT_DESKTOP" = "exwm" ]; then
    emacsclient --eval "(message \"$mode: $brightness\")"
fi
#+end_src
*** date
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/date") :shebang "#!/bin/bash"
:END:
#+begin_src sh
if [ "$BLOCK_BUTTON" = "1" ]; then
    notify-send "$(cal -h | head -n-1 | cut -c -20)"
fi
echo -e "    $(date +%F\ %R) "
echo -e "    $(date +%R) "
#+end_src
*** disk
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/disk") :shebang "#!/bin/bash"
:END:
#+begin_src sh
if [ "$BLOCK_BUTTON" = "1" ]; then
    notify-send "$(df -h)"
fi
Disk=$(df -h "$1" | grep -v "^[A-Z]" | awk '{print $4-G"/"$2}')
Short=$(df -h "$1" | grep -v "^[A-Z]" | awk '{print $4}')

if [ -z "$1" ];then
    echo -e "Enter Your Mounted Point Name Ex : \"/\" "
else
    # echo -e " $Disk "
    echo -e " $Short "
fi
#+end_src
*** layout
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/layout") :shebang "#!/bin/bash"
:END:
#+begin_src sh
layout="$(setxkbmap -query | grep layout | cut -d' ' -f6)"

if [ "$BLOCK_BUTTON" = "1" ] && [ "$layout" = "dvorak" ]; then
    setxkbmap us
    layout="QW"
elif [ "$BLOCK_BUTTON" = "1" ] && [ "$layout" = "us" ]; then
    setxkbmap dvorak
    layout="DV"
elif [ "$layout" = "us" ]; then
    layout="QW"
elif [ "$layout" = "dvorak" ]; then
    layout="DV"
fi

# echo "   $layout "
echo "    $layout "
#+end_src
*** music
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/music") :shebang "#!/bin/bash"
:END:
#+begin_src sh
if [ "$1" = "toggle" ] || [ "$BLOCK_BUTTON" = "1" ]; then
    playerctl-cmus play-pause
elif [ "$1" = "next" ] || [ "$BLOCK_BUTTON" = "5" ]; then
    playerctl-cmus next
elif [ "$1" = "prev" ] || [ "$BLOCK_BUTTON" = "4" ]; then
    playerctl-cmus previous
fi

spotify=$(pgrep -x 'spotify')
spotplaying="$([ -n "$spotify" ] && pacmd list-sink-inputs | grep -B16 'application.name = "spotify"' | head -1 | awk '{print $2}')"
cmus=$(pgrep -x 'cmus')
cmusplaying="$([ -n "$cmus" ] && cmus-remote -Q | head -1 | awk '{print $2}')"

if [ -n "$spotify" ] && [ "$spotplaying" = "RUNNING" ]; then
    artist="$(sp current | grep -E '^Artist' | cut -d' ' -f8-)"
    title="$(sp current | grep Title | cut -d' ' -f9-)"
    icon="⏸"
elif [ -n "$cmus" ] && [ "$cmusplaying" = "playing" ]; then
    title="$(cmus-remote -Q | grep "tag title" | cut -d" " -f3-)"
    artist="$(cmus-remote -Q | grep "tag artist" | cut -d" " -f3-)"
    icon="⏸"
elif [ -n "$spotify" ]; then
    artist="$(sp current | grep -E '^Artist' | cut -d' ' -f8-)"
    title="$(sp current | grep Title | cut -d' ' -f9-)"
    icon="▶"
elif [ -n "$cmus" ]; then
    title="$(cmus-remote -Q | grep "tag title" | cut -d" " -f3-)"
    artist="$(cmus-remote -Q | grep "tag artist" | cut -d" " -f3-)"
    icon="▶"
fi

if [ "$XDG_CURRENT_DESKTOP" = "exwm" ]; then
    emacsclient --eval "(message \"Current track: $artist - $title\")"
elif [ -n "$artist" ] && [ -n "$title" ]; then
    echo -e " $icon $artist - $title "
    echo -e " $icon $title "
fi
#+end_src
*** volume
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/volume") :shebang "#!/bin/bash"
:END:
#+begin_src sh
if [ "$1" = "toggle" ] || [ "$BLOCK_BUTTON" = "1" ]; then
    amixer -D pulse sset Master toggle > /dev/null 2>&1
elif [ "$1" = "+" ] || [ "$BLOCK_BUTTON" = "5" ]; then
    amixer -D pulse sset Master 5%+ > /dev/null 2>&1
elif [ "$1" = "-" ] || [ "$BLOCK_BUTTON" = "4" ]; then
    amixer -D pulse sset Master 5%- > /dev/null 2>&1
fi

Vol=$(amixer -D pulse get Master | grep "Left: Playback" | awk '{print $5}' | tr -d "[ %]")
Mute=$(amixer -D pulse get Master | grep "Left: Playback" | awk '{print $6}' | tr -d "[-]")

if [ "$XDG_CURRENT_DESKTOP" = "exwm" ] && [ "$1" = "toggle" ] && [ "$Mute" = "off" ]; then
    emacsclient --eval "(progn (setq d/mute t) (force-mode-line-update 'all))"
elif [ "$XDG_CURRENT_DESKTOP" = "exwm" ] && [ "$1" = "toggle" ] && [ "$Mute" = "on" ]; then
    emacsclient --eval "(progn (setq d/mute nil) (force-mode-line-update 'all))"
elif [ "$XDG_CURRENT_DESKTOP" = "exwm" ]; then
    emacsclient --eval "(message \"Volume: $Vol\")"
elif [ "$Vol" = "0" ] || [ "$Mute" = "off" ]; then
    echo -ne "    $Vol "
elif [ "$Vol" -ge "50" ];then
    echo -ne "    $Vol "
else
    echo -ne "    $Vol "
fi
#+end_src
*** wifi
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/wifi") :shebang "#!/bin/bash"
:END:
#+begin_src sh
if [ "$BLOCK_BUTTON" = "1" ]; then
    networkmanager_dmenu
fi
name="$(iwgetid -r)"
if [ -n "$name" ]; then
    # strength="$(nmcli device wifi list | grep '*' | tail -1 | awk -F '[[:space:]][[:space:]]+' '{print $6}')"
    # echo -e "   $name $strength%"
    # echo -e "$strength% "
    echo -e "  $name "
    echo ""
    # echo "#B8BB26"
else
    echo -e "  None "
    echo
    echo
    # echo "#FB4933"
fi
#+end_src
** masterinstall
:PROPERTIES:
:header-args+: :tangle ~/bin/masterinstall :shebang "#!/usr/bin/env bash"
:END:
A work in progress to reinstall programs post apocalpyse.
*** macOS
**** Xcode
#+begin_src sh :tangle (when (eq system-type 'darwin) "~/bin/masterinstall")
if  [ ! -d /Applications/Xcode.app ]; then
    echo "Please install Xcode and try again."
    exit 1
else
    echo "\e[1;34mInstalling: \e[91mXcode command line tools\e[0;97m"
    xcode-select --install
fi
#+end_src
**** homebrew
#+begin_src sh :tangle (when (eq system-type 'darwin) "~/bin/masterinstall")
echo "\n\e[1;34mInstalling: \e[91mhomebrew\e[0;97m"
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

# Install brew bundle
echo "\n\e[1;34mInstalling: \e[91mhomebrew programs\e[0;97m"
/usr/local/bin/brew tap Homebrew/bundle
/usr/local/bin/brew bundle --file=~/Dropbox/installed-programs/brew.rb
#+end_src
**** Install alfred workflow utils
#+begin_src sh :tangle (when (eq system-type 'darwin) "~/bin/masterinstall")
echo "\n\e[1;34mInstalling: \e[91mAlfred workflow utils\e[0;97m"
curl -o  ~/bin/workflow-build.py https://gist.githubusercontent.com/deanishe/b16f018119ef3fe951af/raw/
curl -o  ~/bin/workflow-install.py https://gist.githubusercontent.com/deanishe/35faae3e7f89f629a94e/raw/
chmod a+x ~/bin/workflow-build.py
chmod a+x ~/bin/workflow-install.py
echo -e "\e[1;34mDone"
#+end_src
*** Linux
**** apt-get packages
#+begin_src sh :tangle (when (eq system-type 'gnu/linux) "~/bin/masterinstall")
tar -xf ~/Dropbox/installed-programs/apt.tgz /tmp/apt
sudo apt-key add /tmp/apt/repo.keys
sudo cp -R /tmp/apt/sources.list* /etc/apt/
sudo apt-get update
sudo apt-get install dselect
sudo dselect update
sudo dpkg --set-selections < /tmp/apt/package.list
sudo apt-get dselect-upgrade -y
#+end_src
**** golang
#+begin_src sh :tangle (when (eq system-type 'gnu/linux) "~/bin/masterinstall")
sudo add-apt-repository ppa:ubuntu-lxc/lxd-stable
sudo apt-get update
sudo apt-get install golang
go get github.com/motemen/ghq
#+end_src
**** stack
#+begin_src sh :tangle (when (eq system-type 'gnu/linux) "~/bin/masterinstall")
curl -sSL https://get.haskellstack.org/ | sh
#+end_src
**** pyenv
#+begin_src sh :tangle (when (eq system-type 'gnu/linux) "~/bin/masterinstall")
curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash
pyenv update
#+end_src
**** Iosevka
***** nodejs
#+begin_src sh
curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -
sudo apt-get install -y nodejs
#+end_src
***** ttfautohint
#+begin_src sh
sudo apt-get install ttfautohint
#+end_src
***** premake5
#+begin_src sh
wget https://github.com/premake/premake-core/releases/download/v5.0.0-alpha11/premake-5.0.0-alpha11-linux.tar.gz
tar -xf premake-5.0.0-alpha11-linux.tar.gz
sudo cp premake5 /usr/local/bin/premake5
#+end_src
***** otfcc
#+begin_src sh
ghq get caryll/otfcc
cd ~/.ghq/github.com/caryll/otfcc
premake5 gmake
cd build/make
make config=release_x64
cd ../../
cd bin/release-x64
mv otfccbuild /usr/local/bin # or wherever
mv otfccdump /usr/local/bin # or wherever
#+end_src
***** Iosevka
#+begin_src sh
ghq get be5invis/iosevka
cd ~/.ghq/github.com/be5invis/iosevka
npm install
make custom-config set=input design='v-l-tailed v-i-hooky v-a-singlestorey v-zero-dotted v-asterisk-low v-g-singlestorey v-brace-straight'
make custom-config set=term design='v-l-tailed v-i-hooky v-a-singlestorey v-zero-dotted v-asterisk-low v-g-singlestorey v-brace-straight term'
make custom set=input
make custom set=term
mv dist/iosevka-input ~/.local/share/fonts/
mv dist/iosevka-term ~/.local/share/fonts/
fc-cache -f -v
#+end_src
*** Python versions
#+begin_src sh
echo "\n\e[1;34mInstalling: \e[91mpython\e[0;97m"
# Pyenv setup
usr/local/bin/pyenv install $python3version
usr/local/bin/pyenv rehash
usr/local/bin/pyenv install $python2version
usr/local/bin/pyenv rehash
#+end_src
*** Pip
#+begin_src sh
pyenv global $python3version
echo "\n\e[1;34mInstalling: \e[91mpip3 programs\e[0;97m"
<~/Dropbox/installed-programs/pip3.txt xargs pip install

pyenv global $python2version
echo "\n\e[1;34mInstalling: \e[91mpip2 programs\e[0;97m"
<~/Dropbox/installed-programs/pip2.txt xargs pip install

pyenv global $python3version
#+end_src
*** Tangle dotfiles
#+begin_src sh
if [ -d ~/dotfiles ]; then
    ~/dotfiles/org-tangle
fi
#+end_src
** ocrpdf
:PROPERTIES:
:header-args+: :tangle ~/bin/ocrpdf :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
if [[ -z $1 ]]; then
    echo "No input file provided."
elif [[ -z $2 ]]; then
    echo "No output file provided"
else
    echo "Converting pdf to tif..."
    \gs -dNOPAUSE -q -r500 \
        -sDEVICE=tiffg4 \
        -dBATCH \
        -sOutputFile=$TMPDIR/tempocr.tif \
        $1
    echo "Running tesseract on pngs..."
    tesseract $TMPDIR/tempocr.tif $2 >/dev/null 2>&1
    echo "Done."
fi
#+end_src
** ocrpdf2
:PROPERTIES:
:header-args+: :tangle ~/bin/ocrpdf2 :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
if [[ -z $1 ]]; then
    echo "No input file provided."
elif [[ -z $2 ]]; then
    echo "No output file provided"
else
    echo "Converting pdf to png..."
    convert -density 500 $1 $TMPDIR/tempocr.png
    count=0
    echo "Running tesseract on pngs..."
    while [ -f $TMPDIR/tempocr-$count.png ]; do
        echo "    Page $count"
        tesseract $TMPDIR/tempocr-$count.png $TMPDIR/tempocr >/dev/null 2>&1
        cat $TMPDIR/tempocr.txt >> $2
        let count=count+1
    done
    echo "Created output file $2"
fi
#+end_src
** pass
Extensions and utilities for [[https://www.passwordstore.org/][pass]] password manager.
*** pass-peco
:PROPERTIES:
:header-args+: :tangle ~/.password-store/.extensions/peco.bash :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
name=$(rg -g "*.gpg" "$HOME/.password-store" --files \
           | sed 's@'"$HOME"'/\.password-store/\(.\+\?\)\.gpg@\1@' \
           | peco --prompt="[pass]")

[[ -n "$name" ]] && pass -c $name
#+end_src
*** pass-rofi
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.password-store/.extensions/rofi.bash") :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
name=$(rg -g "*.gpg" "$HOME/.password-store" --files \
           | sed 's@'"$HOME"'/\.password-store/\(.\+\?\)\.gpg@\1@' \
           | sort \
           | rofi -dmenu -i -p "[pass]" -width 30)

pass -c $name
#+end_src
** playerctl-cmus
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/playerctl-cmus") :shebang "#!/usr/bin/env bash"
:END:
Wrapper around playerctl to control cmus as well.
#+begin_src sh
other=$(ps axc | grep 'spotify')
if [ -n "$other" ]; then
    playerctl $1
else
    if [ "$1" = "play-pause" ]; then
        if [ "$(cmus-remote -Q | grep status)" = "status paused" ]; then
           cmus-remote -p
        elif [ "$(cmus-remote -Q | grep status)" = "status playing" ]; then
            cmus-remote -u
        fi
    elif [ "$1" = "next" ]; then
        cmus-remote -n
    elif [ "$1" = "previous" ]; then
        cmus-remote -r
    fi

fi
#+end_src
** rofi-files
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/rofi-files") :shebang "#!/usr/bin/env zsh"
:END:
A script to search all files using [[https://github.com/BurntSushi/ripgrep][ripgrep]] and [[https://github.com/DaveDavenport/rofi][rofi]].
#+begin_src sh
rg -a --files 2>/dev/null \
    | LC_ALL=C sort \
    | awk -v len=85 '{ if (length($0) > len) print "..." substr($0, length($0)-len, length($0)); else print; }' \
    | rofi -dmenu -i -width 50 -levenshtein-sort -matching regex -p '[files]'\
    | xargs -d '\n' xdg-open

#+end_src
** scriptl
*** scriptl-server
:PROPERTIES:
:header-args+: :tangle ~/scriptl/scriptl-server.lisp
:END:
#+begin_src lisp :tangle no
(ql:quickload :swank)
(ql:quickload :scriptl)
(ql:quickload :dbus)

(swank:create-server :port 4005 :dont-close t)
(scriptl:start)

(defmacro scriptl-script (script-name args &key (path #P"/home/diego/scriptl/") body)
  `(progn
     (defun ,script-name ,args
       ,body)
     (let ((*default-pathname-defaults* ,path))
       (scriptl:make-script ,(string-downcase (symbol-name script-name)) ',script-name))))

(load "/home/diego/scriptl/scripts.lisp")
#+end_src
*** scripts
:PROPERTIES:
:header-args+: :tangle ~/scriptl/scripts.lisp
:END:
**** kb-light
#+begin_src lisp :tangle no
(scriptl-script
 kb-light (&optional up-down)
 :path #P"/home/diego/scriptl/"
 :body
 (dbus:with-open-bus (bus (dbus:system-server-addresses))
   (dbus:with-introspected-object
       (kb-light bus
                 "/org/freedesktop/UPower/KbdBacklight"
                 "org.freedesktop.UPower")
     (let* ((delta (cond ((string= up-down "+") 2)
                         ((string= up-down "-") -2)
                         (t 0)))
            (current (kb-light "org.freedesktop.UPower.KbdBacklight"
                               "GetBrightness"))
            (maximum (kb-light "org.freedesktop.UPower.KbdBacklight"
                               "GetMaxBrightness"))
            (new (max 0 (+ current delta) )))
       (when (<= 0 new maximum)
         (setq current new)
         (kb-light "org.freedesktop.UPower.KbdBacklight"
                   "SetBrightness"
                   current))
       (format t "~a~%" (round (* 100 (float (/ current maximum)))))))))
#+end_src
** spectrum_ls
:PROPERTIES:
:header-args+: :tangle ~/bin/spectrum_ls :shebang "#!/usr/bin/env zsh"
:END:
Builds on oh-my-zsh's [[https://github.com/robbyrussell/oh-my-zsh/blob/master/lib/spectrum.zsh#L26][spectrum_ls]].
#+begin_src sh
if [ "$#" = 1 ]; then
  code="$(printf "%03d\n" $1)"
  print -P -- "$code: %F{$code}$code%f"
else;
    for code in $(seq -f "%03g" ${1:-000} ${2:-255}); do
        print -P -- "$code: %F{$code}$code%f"
    done
fi
#+end_src
** text-pager
:PROPERTIES:
:header-args+: :tangle ~/bin/text-pager :shebang "#!/usr/bin/env bash"
:END:
A pager that wraps words at the 80th column, useful for [[https://github.com/michael-lazar/rtv][michael-lazar/rtv]].
#+begin_src sh
[ $# -ge 1 -a -f "$1" ] && input="$1" || input="-"
cat $input | fold -w 80 -s | less
#+end_src
** updates
:PROPERTIES:
:header-args+: :tangle ~/bin/updates :shebang "#!/usr/bin/env bash"
:END:
A script to update pip, apt, and homebrew packages.
*** Initialize
Make sure not in a virtualenv and track pyenv python version.
#+begin_src sh
if [ -n "$VIRTUAL_ENV" ]; then
    echo 'Exit virtualenv first'
elif [ -n "$PYTHONPATH" ]; then
    echo 'Not updating, PYTHONPATH is set.'
else
    # Track global python version
    eval "$(pyenv init -)"
    globalpython=$(echo $(pyenv version) | cut -d' ' -f1)
#+end_src
*** Python 2 pip
#+begin_src sh
# Update pip for python 2
pyenv global $python2version
echo -e "\e[1;34mUpdating: \e[91mpip2\e[0;97m"
IFS=$'\n'
echo  $'Getting outdated pip2 packages...'
res=$(pip list -o --format=legacy | sed 's/ .*//')

if [ -z "$res" ]; then
    echo $'All packages up to date.'
else
    echo $res | xargs pip install --upgrade
fi
pip freeze > ~/Dropbox/installed-programs/pip2.txt
sed -i -e 's/=.*//' ~/Dropbox/installed-programs/pip2.txt
#+end_src
*** Python 3 pip
#+begin_src sh
# Update pip for python 3
pyenv global $python3version
echo -e "\n\e[1;34mUpdating: \e[91mpip3\e[0;97m"
IFS=$'\n'
echo  $'Getting outdated pip3 packages...'
res=$(pip list -o --format=legacy | sed 's/ .*//')

if [ -z "$res" ]; then
    echo $'All packages up to date.'
else
    echo $res | xargs pip install --upgrade
fi
pip freeze > ~/Dropbox/installed-programs/pip3.txt
sed -i -e 's/=.*//' ~/Dropbox/installed-programs/pip3.txt
#+end_src
*** Package manager
**** Darwin
#+begin_src sh :tangle (when (eq system-type 'darwin) "~/bin/updates")
pyenv global system
echo -e "\n\e[1;34mUpdating: \e[91mHomebrew\e[0;97m"
brew update
brew upgrade
brew cleanup
brew prune
brew doctor

brew bundle dump --force --file=~/Dropbox/installed-programs/brew.rb
#+end_src

**** Debian
#+begin_src sh :tangle (when (eq system-type 'gnu/linux) "~/bin/updates")
echo -e "\n\e[1;34mUpdating: \e[91mapt-get\e[0;97m"
sudo apt-get update
sudo apt-get upgrade

mkdir -p ~/Dropbox/installed-programs/apt
dpkg --get-selections > ~/Dropbox/installed-programs/apt/package.list
sudo cp -R /etc/apt/sources.list* ~/Dropbox/installed-programs/apt/
sudo apt-key exportall > ~/Dropbox/installed-programs/apt/repo.keys
#+end_src
*** Finalize
#+begin_src sh
echo " "
echo -e "\e[1;34mDone"

pyenv global $globalpython # Set python version back to original
fi
#+end_src
** wm.sh
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/plasma-workspace/env/wm.sh")
:END:
#+begin_src sh :tangle no
export KDEWM=/usr/bin/i3
#+end_src
** wrappers
*** dolphin
:PROPERTIES:
:header-args+:  :tangle (when (eq system-type 'gnu/linux) "~/bin/dolphin") :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
#+begin_src sh
XDG_CURRENT_DESKTOP=kde /usr/bin/dolphin "$@"
#+end_src
*** dropmite
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/dropmite") :shebang "#!/usr/bin/env bash"
:END:
A wrapper to open termite with the name "dropmite," used by i3wm to make it my
floating terminal.
#+begin_src sh
termite --name=dropmite
#+end_src
*** spotify
:PROPERTIES:
:header-args+:  :tangle (when (eq system-type 'gnu/linux) "~/bin/spotify") :shebang "#!/usr/bin/env bash"
:END:
Wrapper script around ~/usr/bin/spotify~ to fix UI scaling in i3wm.
#+begin_src sh
/usr/bin/spotify --force-device-scale-factor=2 > /dev/null 2>&1 &
#+end_src
*** systemsettings5
:PROPERTIES:
:header-args+:  :tangle (when (eq system-type 'gnu/linux) "~/bin/systemsettings5") :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
XDG_CURRENT_DESKTOP=kde /usr/bin/systemsettings5 "$@"
#+end_src
*** play-dvd
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/play-dvd") :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
vlc dvd://
#+end_src
* Local vars
Tangles the files asynchronously on save.
#+begin_example
# Local Variables:
# after-save-hook: (git-gutter d/async-babel-tangle)
# org-pretty-entities: nil
# End:
#+end_example
