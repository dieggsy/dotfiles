#+TITLE: rc.org
#+PROPERTY: header-args :comments link :mkdirp yes :results silent

* Intro

This is where I keep the bulk of my dotfiles (that aren't emacs or zsh). If it
seems like a bit of a mess to keep it all in one place, note that this is /much/
more readable in org format than in rendered markdown.

* Contents                                                              :toc:
- [[#intro][Intro]]
- [[#config][Config]]
  - [[#profile][profile]]
  - [[#cookiecutterrc][cookiecutterrc]]
  - [[#cvimrc][cvimrc]]
  - [[#darktooththeme-cmus][darktooth.theme (cmus)]]
  - [[#emacsclientdesktop][emacsclient.desktop]]
  - [[#git][git]]
  - [[#i3][i3]]
  - [[#khdrc][khdrc]]
  - [[#kwmrc][kwmrc]]
  - [[#nanorc][nanorc]]
  - [[#networkmanager_dmenu][networkmanager_dmenu]]
  - [[#peco][peco]]
  - [[#pythonrcpy][pythonrc.py]]
  - [[#rainbowstream][rainbowstream]]
  - [[#ssh][ssh]]
  - [[#termite][termite]]
  - [[#tmux][tmux]]
  - [[#xresources][Xresources]]
  - [[#zathurarc][zathurarc]]
- [[#scripts][Scripts]]
  - [[#dropmite][dropmite]]
  - [[#ev][ev]]
  - [[#i3blocks][i3blocks]]
  - [[#masterinstall][masterinstall]]
  - [[#mbuild][mbuild]]
  - [[#ocrpdf][ocrpdf]]
  - [[#ocrpdf2][ocrpdf2]]
  - [[#org-tangle][org-tangle]]
  - [[#pass][pass]]
  - [[#pixelate][pixelate]]
  - [[#playerctl-cmus][playerctl-cmus]]
  - [[#spectrum_ls][spectrum_ls]]
  - [[#spotify][spotify]]
  - [[#text-pager][text-pager]]
  - [[#updates][updates]]
  - [[#wfname][wfname]]
  - [[#rofi-files][rofi-files]]
- [[#local-vars][Local vars]]

* Config
** profile
:PROPERTIES:
:header-args+: :tangle ~/.profile
:END:
I'm not even sure why this bit is here, to be honest.
#+begin_src sh
# if running bash
if [ -n "$BASH_VERSION" ]; then
    # include .bashrc if it exists
    if [ -f "$HOME/.bashrc" ]; then
	. "$HOME/.bashrc"
    fi
fi
#+end_src
** cookiecutterrc
:PROPERTIES:
:header-args+: :tangle ~/.cookiecutterrc
:END:
Config for [[https://github.com/audreyr/cookiecutter][cookiecutter]].
#+begin_src conf
# -*- mode: conf -*-
default_context:
    full_name: "Diego A. Mundo"
    email: "diegoamundo@protonmail.com"
    github_username: "therockmandolinist"
    bundle_id_root: "com.therockmandolinist"
cookiecutters_dir: "~/.cookiecutters/"
#+end_src
** cvimrc
:PROPERTIES:
:header-args+: :tangle ~/.cvimrc :comments no
:END:
Config for [[https://github.com/1995eaton/chromium-vim][cvim]].
#+begin_src vimrc
let configpath='/Users/diego/.cvimrc'
set localconfig
set smoothscroll
set noautofocus

let defaultengine = "duckduckgo"
let hintcharacters = "aoeuidhtns"
let homedirectory = "/Users/diego"
let searchlimit = 9

let blacklists = ['*://inbox.google.com/*']

map J nextTab
map K previousTab
#+end_src
** darktooth.theme (cmus)
:PROPERTIES:
:header-args+: :tangle ~/.config/cmus/darktooth.theme
:END:
A theme for cmus based on [[https://github.com/emacsfodder/emacs-theme-darktooth][darktooth]].
#+begin_src conf
# Directory colors
set color_win_dir=108

# Normal text
set color_win_fg=default

# Window background color.
set color_win_bg=0

# Command line color.
set color_cmdline_bg=0
set color_cmdline_fg=6

# Color of error messages displayed on the command line.
set color_error=lightred

# Color of informational messages displayed on the command line.
set color_info=lightgreen

# Color of the separator line between windows in view (1).
set color_separator=246

# Color of window titles (topmost line of the screen).
set color_win_title_bg=234
set color_win_title_fg=12

# Status line color (shows remaining time and playback options).
set color_statusline_bg=0
set color_statusline_fg=10

# Color of currently playing track.
set color_win_cur=009

# Color of the line displaying currently playing track.
set color_titleline_bg=234
set color_titleline_fg=12

# Color of the selected row which is also the currently playing track in active window.
set color_win_cur_sel_bg=237
set color_win_cur_sel_fg=9

# Color of the selected row which is also the currently playing track in inactive window.
set color_win_inactive_cur_sel_bg=236
set color_win_inactive_cur_sel_fg=9

# Color of selected row in active window.
set color_win_sel_bg=237
set color_win_sel_fg=default

# Color of selected row in inactive window.
set color_win_inactive_sel_bg=236
set color_win_inactive_sel_fg=default
#+end_src
** emacsclient.desktop
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux)  "~/.local/share/applications/emacsclient.desktop")
:END:
This lets you set emacsclient as the default application for things. Kinda nifty.
#+begin_src conf
[Desktop Entry]
Name=Emacs Client
Exec=emacsclient -n %u
Icon=emacs-icon
Type=Application
Terminal=false
#+end_src
** git
*** gitconfig
:PROPERTIES:
:header-args+: :tangle ~/.gitconfig
:END:
I know, it probably doesn't make sense to keep my gitconfig here.
**** media
#+begin_src conf
[filter "media"]
    required = true
    clean = git media clean %f
    smudge = git media smudge %f
#+end_src
**** user
#+begin_src conf
[user]
    name = therockmandolinist
    email = diegoamundo@protonmail.com
    signingkey = AEAC5CE8E1F933F0
#+end_src
**** filter
#+begin_src conf
[filter "lfs"]
    clean = git-lfs clean %f
    smudge = git-lfs smudge %f
    required = true
#+end_src
**** core
#+begin_src conf
[core]
    editor = emacsclient -t
    excludesfile = ~/.gitignore
    pager = "less"
#+end_src
**** credential
#+begin_src conf
[credential]
    helper = /usr/local/bin/pass-git-helper
#+end_src
**** gpg
#+begin_src conf
[gpg]
    program = gpg2
#+end_src
**** alias
#+begin_src conf
[alias]
    eclipse = !git fetch upstream && git rebase -s recursive -X theirs upstream/master
    gconfig = config --global
    lconfig = config --local
    mypull = pull -s recursive -X ours
    myrebase = rebase -s recursive -X theirs
    optimize = "!f() { git reflog expire --all --expire=now && git gc --prune=now --aggressive; }; f"
    plog = log --graph --pretty=format:'%C(bold black)%h%Creset - %<(50,trunc)%C(bold normal)%s%Creset %<(20)%C(bold green)%an%Creset %<(15)%C(bold red)%cr%Creset%C(bold yellow)%d%Creset' --abbrev-commit
    plog-nocolor = log --graph --pretty=format:'%h - %<(50,trunc)%s %<(20)%an %<(15)%cr%d' --abbrev-commit
    update-from-upstream = pull --rebase -s recursive -X theirs upstream/master
    aliases = config --get-regexp '^alias\\.'
    a = add
    s = status
    sl = status --long
    c = checkout
    cb = checkout -b
    b = branch
    r = rebase
    p = pull
    pr = pull --rebase
    ps = push
    psf = push --force
#+end_src
**** http
#+begin_src conf
[http]
    postBuffer = 524288000
#+end_src
**** color
#+begin_src conf
[color]
    ui = auto
[color "status"]
    added = green bold
    changed = red bold
    untracked = red bold
[color "branch"]
    current = green bold
    remote = magenta bold
[color "diff"]
    new = green bold
    old = red bold
#+end_src
**** http
#+begin_src conf
[push]
    followTags = true
#+end_src
**** status
#+begin_src conf
[status]
    showUntrackedFiles = all
    short=true
    branch=true
#+end_src
**** commit
#+begin_src conf
[commit]
    gpgsign = true
#+end_src
**** push
#+begin_src conf
[push]
    followTags = true
#+end_src
*** gitignore
:PROPERTIES:
:header-args+: :tangle ~/.gitignore
:END:

#+begin_src conf
.DS\_Store
*.pyc
__pychache__
*.alfredworkflow
#+end_src
** i3
*** i3wm
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/i3/config")
:END:
**** Defaults
#+begin_src conf
# Set modifier key to command/windows key
set $mod Mod4

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
font pango:Iosevka Term 8.5

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# reload the configuration file
bindsym $mod+Shift+j reload

# reload X11
bindsym $mod+Shift+x exec xrdb -merge ~/.Xresources

# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+p restart

# exit i3 (logs you out of your X session)
bindsym $mod+Shift+period exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -b 'Yes, exit i3' 'i3-msg exit'"
#+end_src
**** Rofi
#+begin_src conf
# kill focused window
bindsym $mod+Shift+apostrophe kill

# start rofi for windows and commands
bindsym Mod1+space exec "rofi -combi-modi window,run -show combi -modi combi"

# pass helper
bindsym $mod+p exec "~/.password-store/.extensions/rofi.bash"

# File finder with ripgrep
bindsym $mod+f exec "~/bin/rofi-files"
#+end_src
**** Scratchpad and floating
#+begin_src conf
# Scratchpad
bindsym $mod+minus move scratchpad
bindsym $mod+shift+minus scratchpad show

# Floating editor
exec --no-startup-id emacs
for_window [title="^emacs@Ragnarok$"] floating enable;
for_window [title="^emacs@Ragnarok$"] move scratchpad; [title="^emacs@Ragnarok$"] scratchpad show; move scratchpad
bindsym $mod+space [title="^emacs@Ragnarok$"] scratchpad show

# Floating terminal
exec --no-startup-id termite --name=dropmite
for_window [instance="dropmite"] floating enable;
for_window [instance="dropmite"] move scratchpad; [instance="dropmite"] scratchpad show; resize set 2446 585; move absolute position 59px 95px; move scratchpad
bindsym $mod+Return [instance="dropmite"] scratchpad show
#+end_src
**** Focus
#+begin_src conf
# change focus
bindsym $mod+h focus left
bindsym $mod+t focus down
bindsym $mod+n focus up
bindsym $mod+s focus right

# alternatively, you can use the cursor keys:
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# change focus between tiling / floating windows
# bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent

# focus the child container
#bindsym $mod+d focus child
#+end_src
**** Motion
#+begin_src conf
# move focused window
bindsym $mod+Shift+h move left
bindsym $mod+Shift+t move down
bindsym $mod+Shift+n move up
bindsym $mod+Shift+s move right
bindsym $mod+Shift+c move position center

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right
#+end_src
**** Layout and splitting
#+begin_src conf
# split in horizontal orientation
bindsym $mod+d split h

# split in vertical orientation
bindsym $mod+k split v

# enter fullscreen mode for the focused container
bindsym $mod+u fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+o layout stacking
bindsym $mod+comma layout tabbed
bindsym $mod+period layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle
#+end_src
**** Workspaces
#+begin_src conf
# switch to workspace
workspace_layout tabbed
bindsym $mod+1 workspace 1
bindsym $mod+2 workspace 2
bindsym $mod+3 workspace 3
bindsym $mod+4 workspace 4
bindsym $mod+5 workspace 5
bindsym $mod+6 workspace 6
bindsym $mod+7 workspace 7
bindsym $mod+8 workspace 8
bindsym $mod+9 workspace 9
bindsym $mod+0 workspace 10

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace 1
bindsym $mod+Shift+2 move container to workspace 2
bindsym $mod+Shift+3 move container to workspace 3
bindsym $mod+Shift+4 move container to workspace 4
bindsym $mod+Shift+5 move container to workspace 5
bindsym $mod+Shift+6 move container to workspace 6
bindsym $mod+Shift+7 move container to workspace 7
bindsym $mod+Shift+8 move container to workspace 8
bindsym $mod+Shift+9 move container to workspace 9
bindsym $mod+Shift+0 move container to workspace 10
#+end_src
**** Resizing
#+begin_src conf
# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym h resize shrink width 10 px or 10 ppt
        bindsym t resize grow height 10 px or 10 ppt
        bindsym n resize shrink height 10 px or 10 ppt
        bindsym s resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape
        bindsym Return mode "default"
        bindsym Escape mode "default"
}

bindsym $mod+r mode "resize"
#+end_src
**** Bar
#+begin_src conf
# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
bar {
    status_command i3blocks
    position top
    tray_output none
    font pango:Iosevka Term, FontAwesome 8.5
    colors {
        background #282828
        statusline #fdf4c1
        focused_workspace #076678 #076678 #FDF4c1
        active_workspace   #333333 #5f676a #FDF4c1
        inactive_workspace #222222 #222222 #888888
        urgent_workspace   #2f343a #901A1E #FDF4c1
        binding_mode       #2f343a #901A1E #FDF4c1
    }
}
#+end_src
**** Appearance
#+begin_src conf
# class                 border  background text    indicator child_border
client.focused          #EBDBB2 #EBDBB2    #282828 #3fd7e5   #EBDBB2
client.focused_inactive #282828 #282828    #dcdcdc #484e50
client.unfocused        #2D2D2D #282828    #A89984 #292d2e
client.urgent           #2D2D2D #2D2D2D    #dcdcdc #901A1E
client.background       #282828

gaps inner 30
gaps outer 0
new_window 1pixel
#+end_src
**** Bindings
#+begin_src conf
# Keyboard brightness
bindsym XF86KbdBrightnessDown exec kb-light - && pkill -RTMIN+2 i3blocks
bindsym XF86KbdBrightnessUp exec kb-light + && pkill -RTMIN+2 i3blocks

# Screen brightness
bindsym XF86MonBrightnessUp exec xbacklight +2 && pkill -RTMIN+2 i3blocks
bindsym XF86MonBrightnessDown exec xbacklight -2 && pkill -RTMIN+2 i3blocks

# Audio controls
bindsym XF86AudioMute exec amixer -D pulse sset Master toggle && pkill -RTMIN+3 i3blocks
bindsym XF86AudioLowerVolume exec amixer -D pulse sset Master 2%- && pkill -RTMIN+3 i3blocks
bindsym XF86AudioRaiseVolume exec amixer -D pulse sset Master 2%+ && pkill -RTMIN+3 i3blocks

# Media controls
bindsym XF86AudioPrev exec playerctl-cmus previous && pkill -RTMIN+1 i3blocks
bindsym XF86AudioNext exec playerctl-cmus next && pkill -RTMIN+1 i3blocks
bindsym XF86AudioPlay exec playerctl-cmus play-pause && pkill -RTMIN+1 i3blocks

# Screenshot
bindsym --release XF86LaunchB exec "scrot -s ~/Pictures/Screenshots/%Y-%m-%d_%H:%M:%S.png"
bindsym Shift+XF86LaunchB exec "scrot -ub ~/Pictures/Screenshots/%Y-%m-%d_%H:%M:%S.png"
bindsym XF86LaunchA exec "scrot ~/Pictures/Screenshots/%Y-%m-%d_%H:%M:%S.png"
#+end_src
**** Startup Programs/Commands
#+begin_src conf
exec --no-startup-id dropbox start
exec --no-startup-id sh ~/.fehbg
# exec --no-startup-id /home/diego/.ghq/github.com/olemartinorg/i3-alternating-layout/alternating_layouts.py
exec --no-startup-id unclutter
exec --no-startup-id xset s off
exec --no-startup-id xset r rate 300 50
exec --no-startup-id setxkbmap dvorak
exec --no-startup-id setxkbmap -option 'ctrl:nocaps'
exec --no-startup-id xcape -e 'Control_L=Escape'
exec --no-startup-id nm-applet
#+end_src
*** i3blocks
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.i3blocks.conf")
:END:
#+begin_src conf
# [focused window]
# command=xtitle -s -t 75 -f "  %s\n"
# interval=persist

[music]
command=~/bin/i3blocks/music
interval=5
signal=1

[separator]

[Disk]
command=~/bin/i3blocks/disk /
interval=20
# color=#766e6b

[separator]

[Brightness]
command=~/bin/i3blocks/bright
interval=once
signal=2

[separator]

[wifi]
command=~/bin/i3blocks/wifi
interval=10

[separator]


# [Ram]
# command=~/bin/i3blocks/mem.sh -m
# interval=3

[separator]

# [Temp]
# command=~/bin/i3blocks/temp.sh
# interval=1

[separator]

[Vol]
command=~/bin/i3blocks/volume
interval=once
signal=3

[separator]

[layout]
command=~/bin/i3blocks/layout
interval=once

[separator]

[Bat]
command=~/bin/i3blocks/battery
interval=30
# color=#3d97b8

[separator]

[Time]
command=~/bin/i3blocks/date
interval=10
#+end_src
*** i3status
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/i3status/config")
:END:
#+begin_src conf
# i3status configuration file.
# see "man i3status" for documentation.

# It is important that this file is edited as UTF-8.
# The following line should contain a sharp s:
# ß
# If the above line is not correctly displayed, fix your editor first!

general {
colors = true
interval = 5
color_good='#b8bb26'
color_bad='#fb4933'
color_degraded='#fabd2f'
}

# order += "ipv6"
order += "disk /"
# order += "run_watch DHCP"
# order += "run_watch VPN"
order += "wireless _first_"
# order += "ethernet _first_"
order+= "volume master"
order += "battery 0"
# order += "load"
order += "tztime local"

wireless _first_ {
# format_up = "  %essid %ip"
format_up = "  %essid"
format_down = " None"
}

ethernet _first_ {
# if you use %speed, i3status requires root privileges
format_up = "E: %ip (%speed)"
format_down = "E: down"
}

battery 0 {
# format = "%status  %percentage %remaining"
format = "%status  %percentage"
status_chr = ""
status_bat = ""
status_full = ""
integer_battery_capacity=true
last_full_capacity = true
threshold_type = time
low_threshold = 10
hide_seconds = true
# format = " %status %percentage %remaining"
}

run_watch DHCP {
pidfile = "/var/run/dhclient*.pid"
}

run_watch VPN {
pidfile = "/var/run/vpnc/pid"
}

tztime local {
format = "  %Y-%m-%d %H:%M"
}

load {
format = "%1min"
}

disk "/" {
format = "  %avail"
}

volume master {
format = " %volume"
format_muted = "  %volume"
device = "pulse:1"
}
#+end_src
** khdrc
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'darwin) "~/.khdrc")
:END:

*** Notes
#+begin_src conf
# -*- mode: conf -*-
# sample config for khd

# NOTE(koekeishiya): A bind is written in the form:
#                   <keysym> [!] [<app list>] [->] : <command>
#                   where
#                       <keysym>   = mode + mod + ... + mod - literal
#                       <keysym>   = mode + mod + ... + mod - keycode (must have 0x prefix)
#                       <keysym>   = mode + mod + ... + mod (modifier only binding)
#
#                       [<app,
#                         app,     = optional list '[app1, ..., appN]' of applications
#                         app>]      that this bind will be activated for. if the
#                                    focused application is not contained in this list,
#                                    the associated command will not be triggered, and
#                                    the keypress will be passed through as normal.
#
#                       [!]        = optional operator '!' negates the behaviour when a
#                                    list of applications is given. this marks the bind
#                                    as 'Hotkey_Exclude', causing the bind to not work
#                                    when the focused application is in the given list.
#
#                       [->]       = optional operator '->' that marks this bind as
#                                    'passthrough'. this causes the key to be passed
#                                    through to the system, instead of being consumed.
#
#                       <command>  = command is executed through '$SHELL -c' and
#                                    follows valid shell syntax. if the $SHELL environment
#                                    variable is not set, it will default to '/bin/bash'.
#                                    when bash is used, the ';' delimeter can be specified
#                                    to chain commands.
#
#                                    to allow a command to extend into multiple lines,
#                                    prepend '\' at the end of the previous line.
#
#                                    an EOL character signifies the end of the bind.

# NOTE(koekeishiya) Example of passthrough
# cmd - m -> : echo "alert and minimize window" | alerter -title Test passthrough -timeout 2

# NOTE(koekeishiya) Example of app list
# alt - e [
#           iTerm2,
#           Terminal,
#           HyperTerm
#         ]
#         : echo "so this is how deep the rabbit hole goes.." |\
#           alerter -title Test passthrough -timeout 2

# NOTE(koekeishiya) Example of negated app list
# alt - e [
#           iTerm2,
#           Terminal,
#           HyperTerm
#         ] !
#         : echo "blue pill, i choose you!" |\
#           alerter -title Test passthrough -timeout 2

# NOTE(koekeishiya) Modifier only binding
# left shift    -> (    right shift   -> )
# left cmd      -> {    right cmd     -> }

# khd mod_trigger_timeout 0.1
# lshift : khd -p "shift - 8"
# rshift : khd -p "shift - 9"
# lcmd   : khd -p "shift + alt - 8"
# rcmd   : khd -p "shift + alt - 9"

# TODO(koekeishiya): possibly allow combined syntax such as
# [switcher,ytd] + ctrl - f : khd -e "mode activate default"
#+end_src

*** Kwm
#+begin_src conf
# enable kwm compatibility mode
khd kwm on
#+end_src
**** Borders
#+begin_src conf
# set border color for different modes
# khd mode default color 0xddd5c4a1
khd mode default color 0x00d5c4a1
khd mode switcher color 0xddbdd322
khd mode swap color 0xdd458588
khd mode tree color 0xddfabd2f
khd mode space color 0xddb16286
khd mode info color 0xddcd950c
#+end_src

**** Toggle modes
#+begin_src conf
# toggle between modes
cmd + alt - f         :   khd -e "mode activate switcher"
switcher - escape     :   khd -e "mode activate default"
swap - escape         :   khd -e "mode activate default"
space - escape        :   khd -e "mode activate default"
tree - escape         :   khd -e "mode activate default"
info - escape          :   khd -e "mode activate default"

switcher - m            :   khd -e "mode activate swap"
switcher - s            :   khd -e "mode activate space"
switcher - t            :   khd -e "mode activate tree"
switcher - q            :   khd -e "mode activate info"
#+end_src
**** Switcher mode
#+begin_src conf
# switcher mode
switcher - r            :   khd -e "reload" # reload config

switcher - return       :   open -na /Applications/Hyper.app;\
                            khd -e "mode activate default"

switcher - h            :   kwmc window -f west
switcher - l            :   kwmc window -f east
switcher - j            :   kwmc window -f south
switcher - k            :   kwmc window -f north
switcher - n            :   kwmc window -fm prev
switcher - m            :   kwmc window -fm next

switcher - 1            :   kwmc space -fExperimental 1
switcher - 2            :   kwmc space -fExperimental 2
switcher - 3            :   kwmc space -fExperimental 3
switcher - 4            :   kwmc space -fExperimental 4
switcher - 5            :   kwmc space -fExperimental 5
switcher - 6            :   kwmc space -fExperimental 6

switcher - z            :   kwmc space -fExperimental left
switcher - c            :   kwmc space -fExperimental right
switcher - f            :   kwmc space -fExperimental previous

switcher + shift - z    :   kwmc window -m space left;\
                            kwmc space -fExperimental left

switcher + shift - c    :   kwmc window -m space right;\
                            kwmc space -fExperimental right

switcher + shift - 1    :   kwmc display -f 0
switcher + shift - 2    :   kwmc display -f 1
switcher + shift - 3    :   kwmc display -f 2
#+end_src
**** Swap mode
#+begin_src conf
# swap mode
swap - h                :   kwmc window -s west
swap - j                :   kwmc window -s south
swap - k                :   kwmc window -s north
swap - l                :   kwmc window -s east
swap - m                :   kwmc window -s mark

swap + shift - k        :   kwmc window -m north
swap + shift - l        :   kwmc window -m east
swap + shift - j        :   kwmc window -m south
swap + shift - h        :   kwmc window -m west
swap + shift - m        :   kwmc window -m mark

swap - 1                :   kwmc window -m space 1
swap - 2                :   kwmc window -m space 2
swap - 3                :   kwmc window -m space 3
swap - 4                :   kwmc window -m space 4
swap - 5                :   kwmc window -m space 5

swap - z                :   kwmc window -m space left
swap - c                :   kwmc window -m space right

swap + shift - 1        :   kwmc window -m display 0
swap + shift - 2        :   kwmc window -m display 1
swap + shift - 3        :   kwmc window -m display 2

#+end_src
**** Space mode
#+begin_src conf
# space mode
space - b               :   kwmc space -t bsp
space - m               :   kwmc space -t monocle
space - f               :   kwmc space -t float

space - x               :   kwmc space -g increase horizontal
space - y               :   kwmc space -g increase vertical

space + shift - x       :   kwmc space -g decrease horizontal
space + shift - y       :   kwmc space -g decrease vertical

space - left            :   kwmc space -p increase left
space - right           :   kwmc space -p increase right
space - up              :   kwmc space -p increase top
space - down            :   kwmc space -p increase bottom
space - p               :   kwmc space -p increase all

space + shift - left    :   kwmc space -p decrease left
space + shift - right   :   kwmc space -p decrease right
space + shift - up      :   kwmc space -p decrease top
space + shift - down    :   kwmc space -p decrease bottom
space + shift - p       :   kwmc space -p decrease all
#+end_src
**** Tree mode
#+begin_src conf
# tree mode
tree - f                :   kwmc window -z fullscreen
tree - d                :   kwmc window -z parent
tree - w                :   kwmc window -t focused
tree - r         	    :   kwmc tree rotate 90

tree - s                :   kwmc window -c split - mode toggle;\
                            khd -e "mode activate default"

tree - c                :   kwmc window -c type toggle;\
                            khd -e "mode activate default"

tree - h                :   kwmc window -c expand 0.05 west
tree - j                :   kwmc window -c expand 0.05 south
tree - k                :   kwmc window -c expand 0.05 north
tree - l                :   kwmc window -c expand 0.05 east
tree + shift - h        :   kwmc window -c reduce 0.05 west
tree + shift - j        :   kwmc window -c reduce 0.05 south
tree + shift - k        :   kwmc window -c reduce 0.05 north
tree + shift - l        :   kwmc window -c reduce 0.05 east

tree - p                :   kwmc tree -pseudo create
tree + shift - p        :   kwmc tree -pseudo destroy

tree - o                :   kwmc window -s prev
tree + shift - o        :   kwmc window -s next
#+end_src
**** Default
#+begin_src conf
# default
cmd + alt + ctrl - m    :   kwmc window -mk focused
cmd + alt + ctrl - h    :   kwmc window -mk west wrap
cmd + alt + ctrl - l    :   kwmc window -mk east wrap
cmd + alt + ctrl - j    :   kwmc window -mk south wrap
cmd + alt + ctrl - k    :   kwmc window -mk north wrap

cmd - 0x2A              :   khd -w "aasvi93@hotmail.com"
cmd - 7                 :   khd -w "\\"
cmd - 8                 :   khd -w "{"
cmd - 9                 :   khd -w "}"
#+end_src
** kwmrc
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'darwin) "~/.kwm/kwmrc")
:END:

*** Notes
#+begin_src conf
# -*- mode: conf -*-
# This is a sample config for Kwm

# The following statements can be used to set Kwms internal directory structure.

#     This is the root folder for Kwms files, the only thing this actually
#     specifies is the location of the 'init' script which Kwm runs upon startup.
#     Defaults to $HOME/.kwm

#         kwm_home /path/to/.kwm

#     This is the root folder in which all files included using 'include' must reside.
#     Defaults to $HOME/.kwm

#         kwm_include /path/to/.kwm/include

#     This is the folder in which all bsp-layouts managed by 'tree load' and 'tree save'
#     is loaded from / saved to. Defaults to $HOME/.kwm/layouts

#         kwm_layouts /path/to/.kwm/layouts

# Commands prefixed with 'kwmc' will call local functions corresponding to the
# kwmc syntax.

# To run an external program or command, use the prefix 'exec' followed by
# command.  e.g 'exec mvim' would open macvim

# Read file and execute commands as if they were written inside kwmrc.

# include filename

# e.g: window-rules in a separate file called 'rules'
#     include rules
#+end_src
*** Behavior
#+begin_src conf
# Default tiling mode for Kwm (bsp | monocle | float)
kwmc config tiling bsp

# Automatically float windows that fail to resize
kwmc config float-non-resizable on

# Automatically resize the window to its container
kwmc config lock-to-container on

# Center window when made floating
kwmc config center-on-float on

# Allow window focus to wrap-around
kwmc config cycle-focus on

# Override default settings for space 1 on screen 0

#    kwmc config space 0 1 mode monocle
#    kwmc config space 0 1 padding 100 100 100 100
#    kwmc config space 0 1 gap 40 40

# Override default settings for screen 1

#    kwmc config display 1 mode bsp
#    kwmc config display 1 padding 100 100 100 100
#    kwmc config display 1 gap 40 40

# Set default container split-ratio
kwmc config split-ratio 0.5

# New splits become the left leaf-node
kwmc config spawn left
#+end_src
*** Mouse
#+begin_src conf
# Set focus-follows-mouse-mode to autoraise
kwmc config focus-follows-mouse on

# Focus-follows-mouse is temporarily disabled when
# a floating window has focus
kwmc config standby-on-float on

# The mouse will automatically move to the center
# of the focused window
kwmc config mouse-follows-focus on

# Allows a window to be moved by dragging, when a modifier key and left-click
# is held down.

# Allows a window to be resized by dragging when a modifier key and right-click
# is held down.
kwmc config mouse-drag on

# The modifier keys to be held down to initiate mouse-drag
kwmc config mouse-drag mod shift+ctrl
#+end_src
*** Rules
#+begin_src conf
# Add custom tiling rules for applications that does not get tiled by Kwm by
# default.  This is because some applications do not have the AXWindowRole and
# AXStandardWindowSubRole
kwmc rule owner="iTerm2" properties={role="AXDialog"}
kwmc rule owner="Emacs" properties={role="AXStandardWindow"}

# The following commands create rules that blacklists an application from Kwms
# tiling

#     kwmc rule owner="Steam" properties={float="true"}
#     kwmc rule owner="Photoshop" properties={float="true"}
kwmc rule owner="LICEcap" properties={float="true"}

# The following command creates a rule that captures an application to the
# given screen, if the screen exists.

#    kwmc rule owner="iTunes" properties={display="1"}
#+end_src
*** Appearance
#+begin_src conf
# Set default values for screen padding
kwmc config padding 40 20 20 20

# Set default values for container gaps
kwmc config gap 15 15

# Enable border for focused window
kwmc config border focused off
kwmc config border focused size 2

# kwmc config border focused color 0xFFBDAE93
kwmc config border focused color 0xFFBDAE93
kwmc config border focused radius 6

# Enable border for marked window
kwmc config border marked on
kwmc config border marked size 2
# kwmc config border marked color 0xFFCC5577
kwmc config border marked color 0xFFCC5577
kwmc config border marked radius 6
#+end_src
** nanorc
:PROPERTIES:
:header-args+: :tangle ~/.nanorc
:END:
Lol
#+begin_src conf
include "~/.nano/*.nanorc"
#+end_src
** networkmanager_dmenu
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/networkmanager-dmenu/config.ini")
:END:
#+begin_src conf
[dmenu]
dmenu_command = rofi
p = [Networks]
rofi_highlight=True
# # Note that dmenu_command can contain arguments as well like `rofi -width 30`
# # Rofi and dmenu are set to case insensitive by default `-i`
# l = number of lines to display, defaults to number of total network options
# fn = font string
# nb = normal background (name, #RGB, or #RRGGBB)
# nf = normal foreground
# sb = selected background
# sf = selected foreground
# b =  (just set to empty value and menu will appear at the bottom
# m = number of monitor to display on
# p = Custom Prompt for the networks menu
# pinentry = Pinentry command

[editor]
terminal = termite
gui_if_available = True
# terminal = <name of terminal program>
# gui_if_available = <True or False>
#+end_src
** peco
:PROPERTIES:
:header-args+: :tangle ~/.config/peco/config.json :comments no
:END:
#+begin_src json
{
    "Prompt": "[peco]",
    "InitialFilter":"SmartCase",
    "SelectionPrefix":">",
    "Keymap": {
        "C-_": "peco.ToggleRangeMode"
    },
    "Style": {
        "Basic": ["on_default", "default"],
        "SavedSelection": ["bold", "on_yellow", "white"],
        "Selected": ["on_white","black"],
        "Query": ["cyan", "bold"],
        "Matched": ["bold", "blue", "on_black"]
    }
}
#+end_src
** pythonrc.py
:PROPERTIES:
:header-args+: :tangle ~/.pythonrc.py :padline no
:END:

#+begin_src python
# -*- coding: utf-8 -*-

from __future__ import print_function, unicode_literals, division

try:
    def progBar(i, total, length=50, kind=None):
        """A nice progress bar to use with for loops."""
        i += 1
        n = int(i*length/total)
        percent = i/total*100
        frame = ("{0:6.2f}% |{1}{2}|".format(percent, '█'*n, ' '*(length-n))
                if kind is None else
                "{0:6.2f}% [{1}{2}]".format(percent, str(kind)*n, ' '*(length-n)))
        endchar = ('\r' if i < total else ' Done!\n')
        print(frame, end=endchar)
except:
    pass

# def write_csv(path, rows):
#     "Write a list of iterables to a CSV, I think"
#     with open(path, 'w') as f:
#         writer = csv.writer(f)
#         writer.writerows(rows)
#+end_src
** rainbowstream
:PROPERTIES:
:header-args+: :tangle ~/.rainbow_config.json
:END:
#+begin_src json :comments no
{
    "HEARTBEAT_TIMEOUT": 300,
    "IMAGE_ON_TERM": false,
    "IMAGE_RESIZE_TO_FIT": true,
    "THEME": "solarized",
    "ASCII_ART": false,
    "HIDE_PROMPT": true,
    "PREFIX": "#owner#place#me#keyword",
    "SEARCH_TYPE": "mixed",
    "SEARCH_MAX_RECORD": 5,
    "HOME_TWEET_NUM": 5,
    "RETWEETS_SHOW_NUM": 5,
    "CONVERSATION_MAX": 30,
    "QUOTE_FORMAT": "#comment RT #owner: #tweet",
    "THREAD_META_LEFT": "(#id) #clock",
    "THREAD_META_RIGHT": "#clock (#id)",
    "THREAD_MIN_WIDTH": 20,
    "NOTIFY_FORMAT": "  #source_user #notify #clock",
    "MESSAGES_DISPLAY": 5,
    "TREND_MAX": 10,
    "LIST_MAX": 5,
    "ONLY_LIST": [],
    "IGNORE_LIST": [],
    "HISTORY_FILENAME": "completer.hist",
    "IMAGE_SHIFT": 2,
    "IMAGE_MAX_HEIGHT": 90,
    "STREAM_DELAY": 0,
    "USER_DOMAIN": "userstream.twitter.com",
    "PUBLIC_DOMAIN": "stream.twitter.com",
    "SITE_DOMAIN": "sitestream.twitter.com",
    "FORMAT": {
        "TWEET": {
            "CLOCK_FORMAT": "%Y/%m/%d %H:%M:%S",
            "DISPLAY": "\n  #name #nick #clock \n  \u20aa:#rt_count \u2665:#fa_count id:#id via #client #fav\n  #tweet"
        },
        "MESSAGE": {
            "CLOCK_FORMAT": "%Y/%m/%d %H:%M:%S",
            "DISPLAY": "\n  #sender_name #sender_nick #to #recipient_name #recipient_nick :\n  #clock message_id:#id\n  #message"
        }
    }
}
#+end_src
** ssh
:PROPERTIES:
:header-args+: :tangle ~/.ssh/config
:END:
#+begin_src conf
Host athena
    HostName athena.dialup.mit.edu
    User dmundo
    ForwardX11Trusted yes

Host racecar
     HostName 192.168.0.34
     User racecar
     ForwardX11 yes
#Default GitHub
Host github.com
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_rsa

Host github-MIT
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_rsa_MIT
#+end_src
** termite
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/termite/config")
:END:
#+begin_src conf
[options]
font = iosevka term 9.5
allow_bold=0
cursor_shape=ibeam
[colors]
background=#282828
foreground=#FDf4c1
color0=#282828
color1=#9d1306
color2=#79740e
color3=#b57614
color4=#076678
color5=#8f3f71
color6=#00a7af
color7=#bdae93
color8=#686868
color9=#fb4933
color10=#b8bb26
color11=#fabd2f
color12=#83a598
color13=#d3869b
color14=#3fd7e5
color15=#fdf4c1
#+end_src
** tmux
*** tmux.conf
:PROPERTIES:
:header-args+: :tangle ~/.tmux.conf
:END:
**** Initialize
#+begin_src conf
set -s escape-time 0
# set -g default-terminal "xterm-256color"
# set -ga terminal-overrides ",screen-256color:Tc"
# set -g lock-after-time 300
# set -g lock-command "/usr/bin/cmatrix -B"
set -g update-environment -r
set -g set-titles on
set -g set-titles-string '#W'
# set-option -g set-titles-string '#H:#S.#I.#P #W #T'
#+end_src
**** Prefix
#+begin_src conf
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix
#+end_src
**** Bindings
#+begin_src conf
bind r source-file ~/.tmux.conf

set -g mouse on
set-window-option -g xterm-keys on
set-option -g status-keys vi
setw -g mode-keys vi
bind-key x kill-pane
bind-key q detach-client
bind-key Q detach-client
bind-key Escape copy-mode
bind-key [ copy-mode
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-pipe 'xclip -i -sel c' \; send -X clear-selection
set-option -s set-clipboard off
bind -n C-k clear-history
#+end_src
**** Windows/Panes
#+begin_src conf
setw -g monitor-activity on
set-option -g allow-rename off
set -g history-limit 3000
set -g base-index 1
set -g pane-base-index 1
set-option -g renumber-windows on

bind | split-window -h -c '#{pane_current_path}'
bind - split-window -v -c '#{pane_current_path}'
unbind '"'
unbind %

bind-key { swap-window -t -1
bind-key } swap-window -t +1
bind-key \ next-window

bind-key j select-pane -D
bind-key k select-pane -U
bind-key h select-pane -L
bind-key l select-pane -R
bind-key o swap-pane -D
bind-key < split-window -h \; choose-window 'kill-pane ; join-pane -hs %%'
bind-key > break-pane -d
bind-key ^ split-window -v \; choose-window 'kill-pane ; join-pane -vs %%'
bind-key = select-layout even-horizontal
bind-key + select-layout even-vertical
#+end_src
**** Bell
#+begin_src conf
set-option -g bell-action any
set-option -g visual-bell off
#+end_src
**** Theming
#+begin_src conf
# panes
set -g pane-border-fg black
set -g pane-active-border-fg brightred

## Status bar design
# status line
set -g status-justify left
set -g status-bg default
set -g status-fg colour12
set -g status-interval 2

# messaging
set -g message-fg black
set -g message-bg yellow
set -g message-command-fg blue
set -g message-command-bg black

#window mode
setw -g mode-bg colour6
setw -g mode-fg colour0

# window status
setw -g window-status-format " #F#I:#W#F "
setw -g window-status-current-format " #F#I:#W#F "
setw -g window-status-format "#[fg=magenta]#[bg=black] #I #[bg=cyan]#[fg=colour8] #W "
setw -g window-status-current-format "#[bg=brightmagenta]#[fg=colour8] #I #[fg=colour8]#[bg=colour14] #W "
setw -g window-status-current-bg colour0
setw -g window-status-current-fg colour11
setw -g window-status-current-attr dim
setw -g window-status-bg green
setw -g window-status-fg black
setw -g window-status-attr reverse

# Info on left (I don't have a session display for now)
set -g status-left ''

# loud or quiet?
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-window-option -g monitor-activity off
set-window-option -g aggressive-resize on
set-option -g bell-action none

set -g default-terminal "screen-256color"

# The modes {
setw -g clock-mode-colour colour135
setw -g mode-attr none
setw -g mode-fg colour9
setw -g mode-bg colour237

# }
# The panes {

set -g pane-border-bg colour235
set -g pane-border-fg colour238
set -g pane-active-border-bg colour236
set -g pane-active-border-fg colour51

# }
# The statusbar {

set -g status-position bottom
set -g status-bg colour234
set -g status-fg colour137
set -g status-attr dim
set -g status-left ''
set -g status-right '#[fg=colour233,bg=colour241,bold] %Y-%d-%m #[fg=colour233,bg=colour245,bold] %H:%M '
set -g status-right-length 50
set -g status-left-length 20

setw -g window-status-current-fg colour81
setw -g window-status-current-bg colour238
setw -g window-status-current-attr bold
setw -g window-status-current-format ' #I#[fg=colour250]:#[fg=colour015]#W#[fg=colour6]#F '

setw -g window-status-fg colour13
setw -g window-status-bg colour235
setw -g window-status-attr none
setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour007]#W#[fg=colour244]#F '

setw -g window-status-bell-attr bold
setw -g window-status-bell-fg colour255
setw -g window-status-bell-bg colour1

# }
# The messages {

set -g message-attr bold
set -g message-fg colour232
set -g message-bg colour166

# }
#+end_src
**** osx-specific
#+begin_src conf :tangle (when (eq system-type 'darwin) "~/.tmux.conf")
set-option -g default-command "reattach-to-user-namespace -l zsh"
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
#+end_src
**** Plugins
#+begin_src conf
# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-urlview'
# set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @continuum-restore 'on'

set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-sidebar'
set -g @sidebar-tree-command 'exa -TL2 --color=always'
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
#+end_src
*** tmuxinator-hud
:PROPERTIES:
:header-args+: :tangle ~/.tmuxinator/hud.yml
:END:
#+begin_src yaml :comments no
# ~/.tmuxinator/hud.yml

name: hud

windows:
  - shell:
  - social: exec weechat
  - music: exec cmus
#+end_src
** Xresources
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.Xresources")
:END:
#+begin_src conf-xdefaults
Xft.antialias: 1
Xft.hinting: 1
Xft.rgba: rgb
Xft.hinstyle: hintfull
Xft.dpi: 184

rofi.color-enabled: true
rofi.font: iosevka term 20
rofi.color-window: #282828, #fdf4c1, #fdf4c1
rofi.color-normal: #282828, #fdf4c1, #282828, #3c3836, #fdf4c1
rofi.color-active: #282828, #B8BB26, #282828, #3c3836, #B8BB26
rofi.color-urgent: #282828, #FB4933, #282828, #3c3836, #FB4933

Emacs.fontBackend: xft, x
Emacs.font: iosevka term-9.5
Emacs.FontBackend: x
Emacs*geometry: 99x41
#+end_src
** zathurarc
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/zathura/zathurarc")
:END:
#+begin_src conf
set font "Iosevka Term 9"
set default-bg "#282828"
set default-fg "#fdf4c1"
set inputbar-bg "#282828"
set inputbar-fg "#3FD7E5"
set statusbar-fg "#fdf4c1"
set first-page-column 1
set recolor-darkcolor "#fDf4c1"
set recolor-lightcolor "#282828"
#+end_src
* Scripts
** dropmite
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/dropmite") :shebang "!/usr/bin/env bash"
:END:
A wrapper to open termite with the name "dropmite," used by i3wm to make it my
floating terminal.
#+begin_src sh
termite --name=dropmite
#+end_src
** ev
:PROPERTIES:
:header-args+: :tangle ~/bin/ev :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
emacsclient -n --eval "(let ((inhibit-message t)) (dolist (file (split-string \"$*\")) (find-file-read-only file)))" > /dev/null 2>&1
#+end_src
** i3blocks
i3blocks scripts taken from/inspired by [[https://github.com/yeungocanh/archdot/tree/master/.config/i3blocks][yeungocanh/archdot]].
*** battery
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/battery") :shebang "#!/bin/bash"
:END:
#+begin_src sh
if [ "$BLOCK_BUTTON" = "1" ]; then
    notify-send "$(upower -i /org/freedesktop/UPower/devices/battery_BAT0)"
fi
Bat=$(acpi | cut -d " " -f4 | tr -d "%,")
Adapt=$(acpi -a | cut -d " " -f3)

touch /tmp/battery-status
if [ "$Bat" -lt 11 ] && [ "$(</tmp/battery-status)" != "critically-low" ]; then
    espeak -vf4 "Battery critically low, consider charging." &
    notify-send "Battery critically low, consider charging." &
    echo "critically-low" > /tmp/battery-status
else
    echo "fine" > /tmp/battery-status
fi

if [ "$Adapt" = "on-line" ];then
    icon0=""
    icon1=""
    icon2=""
    icon3=""
    icon4=""
else
    icon0=""
    icon1=""
    icon2=""
    icon3=""
    icon4=""
fi

if [ -z "$Bat" ];then
    bat=""
elif [ "$Bat" -gt "95" ];then
    bat=" $icon4 Full "
    icon="$icon4"
    color="#B8BB26"
elif [ "$Bat" -gt "75" ];then
    bat=" $icon3 $Bat% "
    icon="$icon3"
    color="#B8BB26"
elif [ "$Bat" -gt "50" ];then
    bat=" $icon2 $Bat% "
    icon="$icon2"
    color="#B8BB26"
elif [ "$Bat" -gt "25" ];then
    bat=" $icon1 $Bat% "
    icon="$icon1"
    color="#FABD2F"
elif [ "$Bat" -lt "25" ];then
    bat=" $icon0 $Bat% "
    icon="$icon0"
    color="#FB4933"
fi

echo -e "$bat"
echo -e "$icon"
echo -e "$color"
#+end_src
*** bright
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/bright") :shebang "#!/bin/bash"
:END:
#+begin_src sh
mode="$(<~/bin/i3blocks/brightness.txt)"

if [ "$BLOCK_BUTTON" = "1" ] && [ "$mode" = "screen" ]; then
    pkill -RTMIN+1 i3blocks
    echo "backlight" > ~/bin/i3blocks/brightness.txt
    mode="screen"
    brightness="$(kb-light)"
    printf "   %.0f%%" "$brightness"
elif [ "$BLOCK_BUTTON" = "1" ] && [ "$mode" = "backlight" ]; then
    pkill -RTMIN+1 i3blocks
    echo "screen" > ~/bin/i3blocks/brightness.txt
    mode="backlight"
    brightness="$(xbacklight)"
    printf "   %.0f%%" "$brightness"
elif [ "$mode" = "screen" ]; then
    if [ "$BLOCK_BUTTON" = "5" ]; then
        xbacklight +2 > /dev/null 2>&1
    elif [ "$BLOCK_BUTTON" = "4" ]; then
        xbacklight -2 > /dev/null 2>&1
    fi
    brightness="$(xbacklight)"
    printf "   %.0f%%" "$brightness"
elif [ "$mode" = "backlight" ]; then
    if [ "$BLOCK_BUTTON" = "5" ]; then
        kb-light + > /dev/null 2>&1
    elif [ "$BLOCK_BUTTON" = "4" ]; then
        kb-light - > /dev/null 2>&1
    fi
    brightness="$(kb-light)"
    printf "   %.0f%%" "$brightness"
fi
#+end_src
*** date
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/date") :shebang "#!/bin/bash"
:END:
#+begin_src sh
if [ "$BLOCK_BUTTON" = "1" ]; then
    notify-send "$(cal -h | head -n-1 | cut -c -20)"
fi
echo -e "   $(date +%Y-%m-%d\ %R) "
echo -e "   $(date +%R) "
#+end_src
*** disk
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/disk") :shebang "#!/bin/bash"
:END:
#+begin_src sh
if [ "$BLOCK_BUTTON" = "1" ]; then
    notify-send "$(df -h)"
fi
Disk=$(df -h "$1" | grep -v "^[A-Z]" | awk '{print $4-G"/"$2}')
Short=$(df -h "$1" | grep -v "^[A-Z]" | awk '{print $4}')

if [ -z "$1" ];then
    echo -e "Enter Your Mounted Point Name Ex : \"/\" "
else
    # echo -e "  $Disk "
    echo -e "  $Short "
fi
#+end_src
*** layout
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/layout") :shebang "#!/bin/bash"
:END:
#+begin_src sh
layout="$(setxkbmap -query | grep layout | cut -d' ' -f6)"

if [ "$BLOCK_BUTTON" = "1" ] && [ "$layout" = "dvorak" ]; then
    setxkbmap us
    layout="QW"
    notify-send "  Qwerty"
elif [ "$BLOCK_BUTTON" = "1" ] && [ "$layout" = "us" ]; then
    setxkbmap dvorak
    layout="DV"
    notify-send "  Dvorak"
elif [ "$layout" = "us" ]; then
    layout="QW"
elif [ "$layout" = "dvorak" ]; then
    layout="DV"
fi

# echo "   $layout "
echo "  "
#+end_src
*** music
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/music") :shebang "#!/bin/bash"
:END:
#+begin_src sh
if [ "$BLOCK_BUTTON" = "1" ]; then
    playerctl-cmus play-pause
elif [ "$BLOCK_BUTTON" = "5" ]; then
    playerctl-cmus next
elif [ "$BLOCK_BUTTON" = "4" ]; then
    playerctl-cmus previous
fi

spotify=$(ps axc | grep 'spotify')
spotplaying="$([ -n "$spotify" ] && pacmd list-sink-inputs | grep -B16 'application.name = "spotify"' | head -1 | awk '{print $2}')"
cmus=$(ps axc | grep 'cmus')
cmusplaying="$([ -n "$cmus" ] && cmus-remote -Q | head -1 | awk '{print $2}')"

if [ -n "$spotify" ] && [ "$spotplaying" = "RUNNING" ]; then
    artist="$(sp current | grep -E '^Artist' | cut -d' ' -f8-)"
    title="$(sp current | grep Title | cut -d' ' -f9-)"
    color="#B8BB26"
elif [ -n "$cmus" ] && [ "$cmusplaying" = "playing" ]; then
    title="$(cmus-remote -Q | grep "tag title" | cut -d" " -f3-)"
    artist="$(cmus-remote -Q | grep "tag artist" | cut -d" " -f3-)"
    color="#B8BB26"
elif [ -n "$spotify" ]; then
    artist="$(sp current | grep -E '^Artist' | cut -d' ' -f8-)"
    title="$(sp current | grep Title | cut -d' ' -f9-)"
    color="#FB4922"
elif [ -n "$cmus" ]; then
    title="$(cmus-remote -Q | grep "tag title" | cut -d" " -f3-)"
    artist="$(cmus-remote -Q | grep "tag artist" | cut -d" " -f3-)"
    color="#FB4922"
fi

if [ -n "$artist" ] && [ -n "$title" ]; then
    echo -e "   $artist - $title "
    echo -e "   $title "
    echo -e "$color"
else
    echo -e "  "
    echo -e " "
    echo -e "$color"
fi
#+end_src
*** volume
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/volume") :shebang "#!/bin/bash"
:END:
#+begin_src sh

if [ "$BLOCK_BUTTON" = "1" ]; then
    amixer -D pulse sset Master toggle > /dev/null 2>&1
elif [ "$BLOCK_BUTTON" = "5" ]; then
    amixer -D pulse sset Master 2%+ > /dev/null 2>&1
elif [ "$BLOCK_BUTTON" = "4" ]; then
    amixer -D pulse sset Master 2%- > /dev/null 2>&1
fi

Vol=$(amixer -D pulse get Master | grep "Left: Playback" | awk '{print $5}' | tr -d "[ %]")
Mute=$(amixer -D pulse get Master | grep "Left: Playback" | awk '{print $6}' | tr -d "[-]")

if [ "$Mute" = "off" ];then
    echo -e "  $Vol% "
    echo
    echo "#FABD2F"
else
    if [ "$Vol" -ge "50" ];then
        echo -ne "  $Vol% "
    else
        echo -ne "  $Vol% "
    fi
fi

unset Vol
unset Mute
#+end_src
*** wifi
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/wifi") :shebang "#!/bin/bash"
:END:
#+begin_src sh
if [ "$BLOCK_BUTTON" = "1" ]; then
    networkmanager_dmenu
fi
name="$(iwgetid -r)"
if [ -n "$name" ]; then
    strength="$(nmcli device wifi list | grep '*' | tail -1 | awk -F '[[:space:]][[:space:]]+' '{print $6}')"
    # echo -e "   $name $strength%"
    echo -e "   $strength%"
    echo ""
    echo "#B8BB26"
else
    echo -e "   None "
    echo
    echo "#FB4933"
fi
#+end_src
** masterinstall
:PROPERTIES:
:header-args+: :tangle ~/bin/masterinstall :shebang "#!/usr/bin/env bash"
:END:
A work in progress to reinstall programs post apocalpyse.
*** macOS
**** Xcode
#+begin_src sh :tangle (when (eq system-type 'darwin) "~/bin/masterinstall")
if  [ ! -d /Applications/Xcode.app ]; then
    echo "Please install Xcode and try again."
    exit 1
else
    echo "\e[1;34mInstalling: \e[91mXcode command line tools\e[0;97m"
    xcode-select --install
fi
#+end_src
**** homebrew
#+begin_src sh :tangle (when (eq system-type 'darwin) "~/bin/masterinstall")
echo "\n\e[1;34mInstalling: \e[91mhomebrew\e[0;97m"
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

# Install brew bundle
echo "\n\e[1;34mInstalling: \e[91mhomebrew programs\e[0;97m"
/usr/local/bin/brew tap Homebrew/bundle
/usr/local/bin/brew bundle --file=~/Dropbox\ \(MIT\)/installed-programs/brew.rb
#+end_src
**** Install alfred workflow utils
#+begin_src sh :tangle (when (eq system-type 'darwin) "~/bin/masterinstall")
echo "\n\e[1;34mInstalling: \e[91mAlfred workflow utils\e[0;97m"
curl -o  ~/bin/workflow-build.py https://gist.githubusercontent.com/deanishe/b16f018119ef3fe951af/raw/
curl -o  ~/bin/workflow-install.py https://gist.githubusercontent.com/deanishe/35faae3e7f89f629a94e/raw/
chmod a+x ~/bin/workflow-build.py
chmod a+x ~/bin/workflow-install.py
echo -e "\e[1;34mDone"
#+end_src
*** Linux
**** apt-get packages
#+begin_src sh :tangle (when (eq system-type 'gnu/linux) "~/bin/masterinstall")
tar -xf ~/Dropbox\ \(MIT\)/installed-programs/apt.tgz /tmp/apt
sudo apt-key add /tmp/apt/repo.keys
sudo cp -R /tmp/apt/sources.list* /etc/apt/
sudo apt-get update
sudo apt-get install dselect
sudo dselect update
sudo dpkg --set-selections < /tmp/apt/package.list
sudo apt-get dselect-upgrade -y
#+end_src
**** golang
#+begin_src sh :tangle (when (eq system-type 'gnu/linux) "~/bin/masterinstall")
sudo add-apt-repository ppa:ubuntu-lxc/lxd-stable
sudo apt-get update
sudo apt-get install golang
go get github.com/motemen/ghq
#+end_src
**** stack
#+begin_src sh :tangle (when (eq system-type 'gnu/linux) "~/bin/masterinstall")
curl -sSL https://get.haskellstack.org/ | sh
#+end_src
**** pyenv
#+begin_src sh :tangle (when (eq system-type 'gnu/linux) "~/bin/masterinstall")
curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash
pyenv update
#+end_src
**** Iosevka
***** nodejs
#+begin_src sh
curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -
sudo apt-get install -y nodejs
#+end_src
***** ttfautohint
#+begin_src sh
sudo apt-get install ttfautohint
#+end_src
***** premake5
#+begin_src sh
wget https://github.com/premake/premake-core/releases/download/v5.0.0-alpha11/premake-5.0.0-alpha11-linux.tar.gz
tar -xf premake-5.0.0-alpha11-linux.tar.gz
sudo cp premake5 /usr/local/bin/premake5
#+end_src
***** otfcc
#+begin_src sh
ghq get caryll/otfcc
cd ~/.ghq/github.com/caryll/otfcc
premake5 gmake
cd build/make
make config=release_x64
cd ../../
cd bin/release-x64
mv otfccbuild /usr/local/bin # or wherever
mv otfccdump /usr/local/bin # or wherever
#+end_src
***** Iosevka
#+begin_src sh
ghq get be5invis/iosevka
cd ~/.ghq/github.com/be5invis/iosevka
npm install
make custom-config set=input design='v-l-tailed v-i-hooky v-a-singlestorey v-zero-dotted v-asterisk-low v-g-singlestorey v-brace-straight'
make custom-config set=term design='v-l-tailed v-i-hooky v-a-singlestorey v-zero-dotted v-asterisk-low v-g-singlestorey v-brace-straight term'
make custom set=input
make custom set=term
mv dist/iosevka-input ~/.local/share/fonts/
mv dist/iosevka-term ~/.local/share/fonts/
fc-cache -f -v
#+end_src
*** Python versions
#+begin_src sh
echo "\n\e[1;34mInstalling: \e[91mpython\e[0;97m"
# Pyenv setup
usr/local/bin/pyenv install $python3version
usr/local/bin/pyenv rehash
usr/local/bin/pyenv install $python2version
usr/local/bin/pyenv rehash
#+end_src
*** Pip
#+begin_src sh
pyenv global $python3version
echo "\n\e[1;34mInstalling: \e[91mpip3 programs\e[0;97m"
<~/Dropbox\ \(MIT\)/installed-programs/pip3.txt xargs pip install

pyenv global $python2version
echo "\n\e[1;34mInstalling: \e[91mpip2 programs\e[0;97m"
<~/Dropbox\ \(MIT\)/installed-programs/pip2.txt xargs pip install

pyenv global $python3version
#+end_src
*** Tangle dotfiles
#+begin_src sh
if [ -d ~/dotfiles ]; then
    ~/dotfiles/org-tangle
fi
#+end_src
** mbuild
:PROPERTIES:
:header-args+: :tangle ~/bin/mbuild :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
if [ "$1" = "iosevka" ] || [ "$(pwd)" = "$HOME/.ghq/github.com/be5invis/iosevka" ]; then
    [ ! -d "$HOME/.ghq/github.com/be5invis/iosevka/" ] && \
        ghq get be5invis/iosevka
    cd ~/.ghq/github.com/be5invis/iosevka
    git pull
    make clean
    echo -e "\e[94mMaking configs...\e[0m"
    make custom-config set=term design='v-l-tailed v-i-hooky v-a-singlestorey v-zero-dotted v-asterisk-low v-g-singlestorey v-brace-straight term'
    # make custom-config set=input design='v-l-tailed v-i-hooky v-a-singlestorey v-zero-dotted v-asterisk-low v-g-singlestorey v-brace-straight'
    echo -e "\e[94mMaking fonts...\e[0m"
    make custom set=term
    # make custom set=input
    echo -e "\e[94mMoving fonts\e[0m"
    rm -rf ~/.local/share/fonts/iosevka-term/
    mv dist/iosevka-term ~/.local/share/fonts/
    # mv dist/iosevka-input ~/.local/share/fonts/
    echo -e "\e[94mRebuilding font cache...\e[0m"
    fc-cache -f -v
    echo -e "\e[92mDone!\e[0m"
elif [ "$1" = "emacs" ] || [ "$(pwd)" = "$HOME/.ghq/git.savannah.gnu.org/emacs" ]; then
    [ ! -d "$HOME/.ghq/git.savannah.gnu.org/emacs/" ] && \
        ghq get git://git.savannah.gnu.org/emacs.git
    cd ~/.ghq/git.savannah.gnu.org/emacs/
    git pull
    echo -e "\e[94mRunning autogen.sh...\e[0m"
    ./autogen.sh
    ./autogen.sh git
    echo -e "\e[94mRunning configure...\e[0m"
    ./configure
    echo -e "\e[94mMaking...\e[0m"
    make
    echo -e "\e[94mInstalling...\e[0m"
    sudo make install
    echo -e "\e[92mDone!\e[0m"
elif [ "$1" = "sbcl" ] || [ "$(pwd)" = "$HOME/.ghq/git.code.sf.net/p/sbcl/sbcl" ]; then
    [ ! -d "$HOME/.ghq/git.code.sf.net/p/sbcl/sbcl/" ] && \
        ghq get ghq get git://git.code.sf.net/p/sbcl/sbcl
    cd ~/.ghq/git.code.sf.net/p/sbcl/sbcl/
    git pull
    echo -e "\e[94mMaking...\e[0m"
    ./make.sh --with-sb-core-compression
    echo -e "\e[94mInstalling...\e[0m"
    INSTALL_ROOT=/usr/local sudo ./install.sh && echo -e "\e[92mDone!\e[0m" || echo -e "\e[91mAborted.\e[0m"
elif [ "$1" = "rofi" ] || [ "$(pwd)" = "$HOME/.ghq/github.com/DaveDavenport/rofi" ]; then
    [ ! -d "$HOME/.ghq/github.com/DaveDavenport/rofi/" ] && \
        ghq get DaveDavenport/rofi
    cd ~/.ghq/github.com/DaveDavenport/rofi/
    git pull
    echo -e "\e[94mUpdating submodules...\e[0m"
    git submodule update --init
    echo -e "\e[94mRunning autoreconf...\e[0m"
    autoreconf -i
    mkdir -p build && cd build
    echo -e "\e[94mCofiguring...\e[0m"
    ../configure
    echo -e "\e[94mMaking...\e[0m"
    make
    echo -e "\e[94mInstalling...\e[0m"
    sudo make install
elif [ "$1" = "i3" ] || [ "$1" = "i3-gaps" ] || [ "$(pwd)" = "$HOME/.ghq/github.com/airblader/i3-gaps" ]; then
    [ ! -d "$HOME/.ghq/github.com/airblader/i3-gaps/" ] && \
        ghq get airblader/i3-gaps
    cd ~/.ghq/github.com/airblader/i3-gaps/
    git pull
    echo -e  "\e[94mRunning autoreconf...\e[0m"
    autoreconf --force --install
    echo -e   "\e[94mRunning ../configure...\e[0m"
    rm -rf build/
    mkdir -p build && cd build/
    ../configure --prefix=/usr --sysconfdir=/etc --disable-sanitizers
    echo -e  "\e[94mMaking...\e[0m"
    make
    echo -e  "\e[94mInstalling...\e[0m"
    sudo make install
elif [ "$1" = "zsh" ] || [ "$(pwd)" = "$HOME/.ghq/git.code.sf.net/p/zsh/code/" ]; then
    [ ! -d "$HOME/.ghq/git.code.sf.net/p/zsh/code/" ] && \
        ghq get git://git.code.sf.net/p/zsh/code
    cd ~/.ghq/git.code.sf.net/p/zsh/zsh/
    echo -e   "\e[94mRunning ./Util/preconfig...\e[0m"
    ./Util/preconfig
    echo -e   "\e[94mRunning ./configure...\e[0m"
    ./configure --prefix=/usr/local --enable-site-fndir=/usr/local/share/zsh/site-functions
    echo -e  "\e[94mMaking...\e[0m"
    make
    make check
    echo -e  "\e[94mInstalling...\e[0m"
    sudo make install
    sudo make install.info
else
    echo -e "\e[91mInvalid argument.\e[0m"
fi

#+end_src
** ocrpdf
:PROPERTIES:
:header-args+: :tangle ~/bin/ocrpdf :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
if [[ -z $1 ]]; then
    echo "No input file provided."
elif [[ -z $2 ]]; then
    echo "No output file provided"
else
    echo "Converting pdf to png..."
    \gs -dNOPAUSE -q -r500 \
        -sDEVICE=tiffg4 \
        -dBATCH \
        -sOutputFile=$TMPDIR/tempocr.tif \
        $1
    echo "Running tesseract on pngs..."
    tesseract $TMPDIR/tempocr.tif $2 >/dev/null 2>&1
    echo "Done."
fi
#+end_src
** ocrpdf2
:PROPERTIES:
:header-args+: :tangle ~/bin/ocrpdf2 :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
if [[ -z $1 ]]; then
    echo "No input file provided."
elif [[ -z $2 ]]; then
    echo "No output file provided"
else
    echo "Converting pdf to png..."
    convert -density 500 $1 $TMPDIR/tempocr.png
    count=0
    echo "Running tesseract on pngs..."
    while [ -f $TMPDIR/tempocr-$count.png ]; do
        echo "    Page $count"
        tesseract $TMPDIR/tempocr-$count.png $TMPDIR/tempocr >/dev/null 2>&1
        cat $TMPDIR/tempocr.txt >> $2
        let count=count+1
    done
    echo "Created output file $2"
fi
#+end_src
** org-tangle
:PROPERTIES:
:header-args+: :tangle ~/dotfiles/org-tangle :shebang "#!emacs --script"
:END:
Standalone emacs-lisp script to tangle rc.org, zsh.org, and config.org.
#+begin_src emacs-lisp
(defun dotfiles-file (name)
  (expand-file-name
   (concat
    (substring default-directory
               0
               (+ (string-match "dotfiles/" default-directory) 9))
    name)))

(defun blue-text (text)
  (format "\e[94m%s\e[0m" text))

(defun green-text (text)
  (format "\e[92m%s\e[0m" text))

(defun red-text (text)
  (format "\e[91m%s\e[0m" text))

(let ((specified-files (nthcdr 3 command-line-args))
      (default-files '("rc.org" "zsh.org" "emacs.d/config.org"))
      (confirm-install nil))
  (if (or (= (length specified-files) 0)
          (and (= (length specified-files) 1) (string= (car specified-files) "--ask")))
      (progn
        (when (string= (car specified-files) "--ask")
          (setq confirm-install t))
        (message "Intalling default files: %s"
                 (blue-text
                  (mapconcat 'identity default-files "\e[0m, \e[94m")))
        (if (y-or-n-p "Continue?")
            (progn
              (require 'org)
              (dolist (file default-files)
                (let ((filename (dotfiles-file file))
                      (file-list '()))
                  (if (file-exists-p filename)
                      (progn
                        (message "Found file: %s, installing to:" (green-text file))
                        (find-file filename)
                        (while (search-forward-regexp ":tangle[^~\n]+\\(~/.[^[:space:]\"]+\\)" nil t)
                          (add-to-list 'file-list (match-string 1) t))
                        (dolist (i file-list)
                          (message "    %s" (blue-text i)))
                        (if (or (not confirm-install) (y-or-n-p "Continue?"))
                            (let ((inhibit-message t))
                              (org-babel-tangle-file filename))
                          (message "Skipping...")))
                    (message "File %s not found, skipping..." (red-text filename)))))
              (message "Done!"))
          (messsage "Aborted.")))

    (message "Installing specified files/headings: %s"
             (blue-text (mapconcat 'identity (remove "--ask" specified-files) "\e[0m, \e[94m")))
    (if (y-or-n-p "Continue?")
        (progn
          (require 'org)
          (dolist (file specified-files)
            (if (string= file "--ask")
                (setq confirm-install t)
              (let ((filename (expand-file-name (dotfiles-file file))))
                (if (not (file-exists-p filename))
                    (progn
                      (find-file (dotfiles-file "rc.org"))
                      (if (search-forward-regexp (concat "* " file "$"))
                          (progn
                            (org-narrow-to-subtree)
                            (let ((file-list '()))
                              (while (search-forward-regexp ":tangle[^~\n]+\\(~/.[^[:space:]\"]+\\)" nil t)
                                (add-to-list 'file-list (match-string 1) t))
                              (message "Found heading %s, installing to:" (green-text file))
                              (dolist (i file-list)
                                (message "    %s" (blue-text i))))
                            (let ((inhibit-message t))
                              (if (or (not confirm-install) (y-or-n-p "Continue?"))
                                  (org-babel-tangle)
                                (message "Skipping..."))))
                        (message "File or heading %s doesn't exist, skipping..." (red-text file))))
                  (message "Found file %s, installing to:" (green-text file))
                  (find-file filename)
                  (let ((file-list '()))
                    (while (search-forward-regexp ":tangle[^~\n]+\\(~/.[^[:space:]\"]+\\)" nil t)
                      (add-to-list 'file-list (match-string 1) t))
                    (dolist (i file-list)
                      (message "    %s" (blue-text i))))
                  (if (or (not confirm-install) (y-or-n-p "Continue?"))
                      (let ((inhibit-message t))
                        (org-babel-tangle-file (expand-file-name filename)))
                    (message "Skipping..."))))))
          (message "Done!"))
      (message "Aborted."))))

(message "Symlinking dotfiles/emacs.d to ~/.emacs.d...")
(cond ((string= (file-symlink-p (expand-file-name "~/.emacs.d")) (dotfiles-file "emacs.d/"))
       (message "~/.emacs.d already points to %s" (dotfiles-file ".emacs.d/")))
      ((file-exists-p (expand-file-name "~/.emacs.d"))
       (message "~/.emasc.d exists, not symlinking."))
      (t (make-symbolic-link (dotfiles-file "emacs.d/") (expand-file-name "~/.emacs.d") t)))

(message "Symlinking dotfiles/vim to ~/.vim...")
(cond ((string= (file-symlink-p (expand-file-name "~/.vim")) (dotfiles-file "vim/"))
       (message "~/.vim already points to %s" (dotfiles-file "vim/")))
      ((file-exists-p (expand-file-name "~/.emacs.d"))
       (message "~/.vim exists, not symlinking."))
      (t (make-symbolic-link (dotfiles-file "vim/") (expand-file-name "~/.vim") t)))
(setq argv nil)
#+end_src
** pass
Extensions and utilities for [[https://www.passwordstore.org/][pass]] password manager.
*** pass-peco
:PROPERTIES:
:header-args+: :tangle ~/.password-store/.extensions/peco.bash :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
name=$(rg -g "*.gpg" "$HOME/.password-store" --files \
           | sed 's@'"$HOME"'/\.password-store/\(.\+\?\)\.gpg@\1@' \
           | peco --prompt="[pass]")

[[ -n "$name" ]] && pass -c $name
#+end_src
*** pass-rofi
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.password-store/.extensions/rofi.bash") :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
name=$(~/.zplug/bin/rg -g "*.gpg" "$HOME/.password-store" --files \
           | sed 's@'"$HOME"'/\.password-store/\(.\+\?\)\.gpg@\1@' \
           | sort \
           | rofi -dmenu -i -p "[pass] ")

pass -c $name
#+end_src
** pixelate
:PROPERTIES:
:header-args+: :tangle ~/bin/pixelate :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
AMOUNT=$(echo "1.001 - $1" | bc -l)
INFILE=$2
OUFILE=$3

COEFF1=$(echo "100 * $AMOUNT" | bc -l)
COEFF2=$(echo "100 / $AMOUNT" | bc -l)

convert -scale $COEFF1% -scale $COEFF2% $INFILE $OUFILE
#+end_src
** playerctl-cmus
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/playerctl-cmus") :shebang "#!/usr/bin/env bash"
:END:
Wrapper around playerctl to control cmus as well.
#+begin_src sh
other=$(ps axc | grep 'spotify')
if [ ! -z "$other" ]; then
    playerctl $1
else
    if [ "$1" = "play-pause" ]; then
        if [ "$(cmus-remote -Q | grep status)" = "status paused" ]; then
           cmus-remote -p
        elif [ "$(cmus-remote -Q | grep status)" = "status playing" ]; then
            cmus-remote -u
        fi
    elif [ "$1" = "next" ]; then
        cmus-remote -n
    elif [ "$1" = "previous" ]; then
        cmus-remote -r
    fi

fi
#+end_src
** spectrum_ls
:PROPERTIES:
:header-args+: :tangle ~/bin/spectrum_ls :shebang "#!/usr/bin/env zsh"
:END:
Builds on oh-my-zsh's [[https://github.com/robbyrussell/oh-my-zsh/blob/master/lib/spectrum.zsh#L26][spectrum_ls]].
#+begin_src sh
if [ "$#" = 1 ]; then
  code="$(printf "%03d\n" $1)"
  print -P -- "$code: %F{$code}$code%f"
else;
    for code in $(seq -f "%03g" ${1:-000} ${2:-255}); do
        print -P -- "$code: %F{$code}$code%f"
    done
fi
#+end_src
** spotify
:PROPERTIES:
:header-args+:  :tangle (when (eq system-type 'gnu/linux) "~/bin/spotify") :shebang "#!/usr/bin/env bash"
:END:
Wrapper script around ~/usr/bin/spotify~ to fix UI scaling in i3wm.
#+begin_src sh
/usr/bin/spotify --force-device-scale-factor=2 > /dev/null 2>&1 &
#+end_src
** text-pager
:PROPERTIES:
:header-args+: :tangle ~/bin/text-pager :shebang "#!/usr/bin/env bash"
:END:
A pager that wraps words at the 80th column, useful for [[https://github.com/michael-lazar/rtv][michael-lazar/rtv]].
#+begin_src sh
[ $# -ge 1 -a -f "$1" ] && input="$1" || input="-"
cat $input | fold -w 80 -s | less
#+end_src
** updates
:PROPERTIES:
:header-args+: :tangle ~/bin/updates :shebang "#!/usr/bin/env bash"
:END:
A script to update pip, apt, and homebrew packages.
*** Initialize
Make sure not in a virtualenv and track pyenv python version.
#+begin_src sh
if [ -n "$VIRTUAL_ENV" ]; then
    echo 'Exit virtualenv first'
elif [ -n "$PYTHONPATH" ]; then
    echo 'Not updating, PYTHONPATH is set.'
else
    # Track global python version
    eval "$(pyenv init -)"
    globalpython=$(echo $(pyenv version) | cut -d' ' -f1)
#+end_src
*** Python 2 pip
#+begin_src sh
# Update pip for python 2
pyenv global $python2version
echo -e "\e[1;34mUpdating: \e[91mpip2\e[0;97m"
IFS=$'\n'
echo  $'Getting outdated pip2 packages...'
res=$(pip list -o --format=legacy | sed 's/ .*//')

if [ -z "$res" ]; then
    echo $'All packages up to date.'
else
    echo $res | xargs pip install --upgrade
fi
pip freeze > ~/Dropbox\ \(MIT\)/installed-programs/pip2.txt
sed -i -e 's/=.*//' ~/Dropbox\ \(MIT\)/installed-programs/pip2.txt
#+end_src
*** Python 3 pip
#+begin_src sh
# Update pip for python 3
pyenv global $python3version
echo -e "\n\e[1;34mUpdating: \e[91mpip3\e[0;97m"
IFS=$'\n'
echo  $'Getting outdated pip3 packages...'
res=$(pip list -o --format=legacy | sed 's/ .*//')

if [ -z "$res" ]; then
    echo $'All packages up to date.'
else
    echo $res | xargs pip install --upgrade
fi
pip freeze > ~/Dropbox\ \(MIT\)/installed-programs/pip3.txt
sed -i -e 's/=.*//' ~/Dropbox\ \(MIT\)/installed-programs/pip3.txt
#+end_src
*** Package manager
**** Darwin
#+begin_src sh :tangle (when (eq system-type 'darwin) "~/bin/updates")
pyenv global system
echo -e "\n\e[1;34mUpdating: \e[91mHomebrew\e[0;97m"
brew update
brew upgrade
brew cleanup
brew prune
brew doctor

brew bundle dump --force --file=~/Dropbox\ \(MIT\)/installed-programs/brew.rb
#+end_src

**** Debian
#+begin_src sh :tangle (when (eq system-type 'gnu/linux) "~/bin/updates")
echo -e "\n\e[1;34mUpdating: \e[91mapt-get\e[0;97m"
sudo apt-get update
sudo apt-get upgrade

mkdir -p ~/Dropbox\ \(MIT\)/installed-programs/apt
dpkg --get-selections > ~/Dropbox\ \(MIT\)/installed-programs/apt/package.list
sudo cp -R /etc/apt/sources.list* ~/Dropbox\ \(MIT\)/installed-programs/apt/
sudo apt-key exportall > ~/Dropbox\ \(MIT\)/installed-programs/apt/repo.keys
#+end_src
*** Finalize
#+begin_src sh
echo " "
echo -e "\e[1;34mDone"

pyenv global $globalpython # Set python version back to original
fi
#+end_src
** wfname
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'darwin) "~/bin/wfname") :shebang "#!/usr/bin/env python"
:END:
Get the name of the current Alfred workflow (since last I checked Alfred
doesn't store workflows in directories with logical names).
#+begin_src python
from __future__ import print_function
import plistlib,sys

try:
    print('\nWorkflow: '+plistlib.readPlist('info.plist')['name'])
except IOError:
    print('No \'info. plist\' file. ')
#+end_src
** rofi-files
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/rofi-files") :shebang "#!/usr/bin/env zsh"
:END:
A script to search all files using [[https://github.com/BurntSushi/ripgrep][ripgrep]] and [[https://github.com/DaveDavenport/rofi][rofi]].
#+begin_src sh
~/.zplug/bin/rg --files 2>/dev/null \
    | LC_ALL=C sort \
    | awk -v len=86 '{ if (length($0) > len) print "..." substr($0, length($0)-len, length($0)); else print; }' \
    | rofi -dmenu -i -levenshtein-sort -matching regex -p '[files] '\
    | xargs -d '\n' xdg-open

#+end_src
* Local vars
Tangles the files asynchronously on save.
#+begin_example
# Local Variables:
# after-save-hook: (git-gutter diego/async-babel-tangle)
# org-pretty-entities: nil
# org-src-fontify-natively: nil
# End:
#+end_example
