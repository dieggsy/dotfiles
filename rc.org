#+TITLE: rc.org
#+PROPERTY: header-args :comments link :mkdirp yes :results silent

* Intro

This is where I keep the bulk of my dotfiles (that aren't emacs or zsh). If it
seems like a bit of a mess to keep it all in one place, note that this is /much/
more readable in org format than in rendered markdown.

* Contents                                                              :toc:
- [[#intro][Intro]]
- [[#config][Config]]
  - [[#confignix][config.nix]]
  - [[#comptonconf][compton.conf]]
  - [[#darktooththeme][darktooth.theme]]
  - [[#dunstrc][dunstrc]]
  - [[#fontsconf][fonts.conf]]
  - [[#git][git]]
  - [[#i3][i3]]
  - [[#initvim][init.vim]]
  - [[#networkmanager_dmenu][networkmanager_dmenu]]
  - [[#peco][peco]]
  - [[#pythonrcpy][pythonrc.py]]
  - [[#termite][termite]]
  - [[#tmux][tmux]]
  - [[#xbindkeysrc][xbindkeysrc]]
  - [[#xresources][Xresources]]
  - [[#zathurarc][zathurarc]]
  - [[#xterm-24bitterminfo][xterm-24bit.terminfo]]
- [[#scripts][Scripts]]
  - [[#erc-rofi][erc-rofi]]
  - [[#eshell-focus][eshell-focus]]
  - [[#exwm-blocks][exwm-blocks]]
  - [[#i3-exit-rofi][i3-exit-rofi]]
  - [[#i3blocks][i3blocks]]
  - [[#i3exit][i3exit]]
  - [[#masterinstall][masterinstall]]
  - [[#no-lock-fullscreen][no-lock-fullscreen]]
  - [[#ocrpdf][ocrpdf]]
  - [[#ocrpdf2][ocrpdf2]]
  - [[#pass][pass]]
  - [[#playerctl-cmus][playerctl-cmus]]
  - [[#rofi-files][rofi-files]]
  - [[#scriptl][scriptl]]
  - [[#spectrum_ls][spectrum_ls]]
  - [[#text-pager][text-pager]]
  - [[#updates][updates]]
  - [[#wmsh][wm.sh]]
- [[#desktop-files][Desktop files]]
  - [[#emacsclientdesktop][emacsclient.desktop]]
  - [[#vlc-dvddesktop][vlc-dvd.desktop]]
  - [[#firefox-nightlydesktop][firefox-nightly.desktop]]
  - [[#spotifydesktop][spotify.desktop]]
- [[#local-vars][Local vars]]

* Config
** config.nix
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/nixpkgs/config.nix") :comments no
:END:
#+begin_src nix
{ pkgs }: {

  packageOverrides = super: let self = super.pkgs; in with self; rec {

    myPackages = super.buildEnv {
      name = "my-packages";
      paths = [
        avfs
        acpi
        cava
        cmus
        detox
        emacs-master
        exa
        font-awesome-ttf
        ghq
        gimp
        gitAndTools.gitFull
        gitAndTools.hub
        glibcLocales
        htop
        i3-gaps
        i3blocks-gaps
        iosevka-master
        libreoffice
        ncdu
        neovim
        networkmanager_dmenu
        nix
        nix-prefetch-git
        pandoc
        pass
        pass-git-helper-master
        peco
        playerctl
        ripgrep
        rlwrap
        rofi
        rtv
        sbcl
        termite-master
        tmux
        unclutter
        vlc
        xcape
        xorg.xbacklight
        youtube-dl
        zathura
        zsh
        zsh-completions
      ] ;
    };

    # Packages from source
    emacs-master = super.callPackage ~/dotfiles/nix-local/emacs {
      # use override to enable additional features
      libXaw = pkgs.xorg.libXaw;
      Xaw3d = null;
      gconf = null;
      inherit (pkgs.darwin.apple_sdk.frameworks) AppKit CoreWLAN GSS Kerberos ImageIO;
    };

    iosevka-master = super.callPackage ~/dotfiles/nix-local/iosevka.nix {};

    pass-git-helper-master = super.callPackage ~/dotfiles/nix-local/pass-git-helper.nix {
      inherit (python3Packages) setuptools;
    };

    termite-master = super.callPackage ~/dotfiles/nix-local/termite.nix {
      vte = gnome3.vte-ng;
    };

    # Options and overrides
    polybar = super.polybar.override {
      i3GapsSupport = true;
      githubSupport = true;
    };

    # Dependencies
    libotf = super.callPackage ~/dotfiles/nix-local/deps/libotf.nix {};

    otfcc = super.callPackage ~/dotfiles/nix-local/deps/otfcc.nix {};

  };

  allowUnfree = true;

}
#+end_src
** compton.conf
:PROPERTIES:
:header-args+: :tangle ~/.config/compton.conf
:END:
#+begin_src conf
# Shadow
shadow = true;
# no-dnd-shadow = true;
# no-dock-shadow = true;
clear-shadow = true;
detect-rounded-corners = true;
shadow-radius = 5;
shadow-offset-x = 1;
shadow-offset-y = 1;
shadow-opacity = .3;
shadow-ignore-shaped = false;
shadow-exclude = [
	"name = 'Notification'",
# workaround for conky until it provides window properties:
	"override_redirect = 1 && !WM_CLASS@:s",
#	"class_g ?= 'Dunst'",
# disable shadows for hidden windows:
	"_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'",
	"_GTK_FRAME_EXTENTS@:c",
# disables shadows on sticky windows:
#	"_NET_WM_STATE@:32a *= '_NET_WM_STATE_STICKY'",
# disables shadows on i3 frames
	"class_g ?= 'i3-frame'"
];

# shadow-exclude-reg = "x10+0+0";
# xinerama-shadow-crop = true;

menu-opacity = 0.95;
inactive-opacity = 0.93;
active-opacity = 1;
alpha-step = 0.01;
inactive-dim = 0.0;
blur-background = false;
blur-kern = "3x3box";

fading = false;
fade-delta = 1;
fade-in-step = 0.03;
fade-out-step = 0.03;
fade-exclude = [ ];

backend = "xrender";
mark-wmwin-focused = true;
mark-ovredir-focused = true;
detect-client-opacity = true;
unredir-if-possible = true;
refresh-rate = 0;
vsync = "none";
dbe = false;
paint-on-overlay = true;
focus-exclude = [ "class_g = 'Cairo-clock'" ];
detect-transient = true;
detect-client-leader = true;
invert-color-include = [ ];
glx-copy-from-front = false;
glx-swap-method = "undefined";

opacity-rule = [
"99:name *?= 'Call'",
"99:class_g = 'Chromium'",
"99:name *?= 'Conky'",
"99:class_g = 'Darktable'",
"50:class_g = 'Dmenu'",
"99:name *?= 'Event'",
"99:class_g = 'Firefox'",
"99:class_g = 'GIMP'",
"99:name *?= 'Image'",
"99:class_g = 'Lazpaint'",
"99:class_g = 'Midori'",
"99:name *?= 'Minitube'",
"99:class_g = 'Mousepad'",
"99:name *?= 'MuseScore'",
"90:name *?= 'Page Info'",
"99:name *?= 'Pale Moon'",
"90:name *?= 'Panel'",
"99:class_g = 'Pinta'",
"90:name *?= 'Restart'",
"99:name *?= 'sudo'",
"99:name *?= 'Screenshot'",
"99:class_g = 'Viewnior'",
"99:class_g = 'VirtualBox'",
"99:name *?= 'VLC'",
"99:name *?= 'Write'",
"93:class_g = 'URxvt' && !_NET_WM_STATE@:32a",
"0:_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'",
"96:_NET_WM_STATE@:32a *= '_NET_WM_STATE_STICKY'"
];

wintypes :
{
  tooltip :
  {
    fade = true;
    shadow = false;
    opacity = 0.85;
    focus = true;
  };
  fullscreen :
  {
    fade = true;
    shadow = false;
    opacity = 1;
    focus = true;
  };
};
#+end_src
** darktooth.theme
:PROPERTIES:
:header-args+: :tangle ~/.config/cmus/darktooth.theme
:END:
A theme for cmus based on [[https://github.com/emacsfodder/emacs-theme-darktooth][darktooth]].
#+begin_src conf
# Directory colors
set color_win_dir=108

# Normal text
set color_win_fg=default

# Window background color.
set color_win_bg=0

# Command line color.
set color_cmdline_bg=0
set color_cmdline_fg=6

# Color of error messages displayed on the command line.
set color_error=lightred

# Color of informational messages displayed on the command line.
set color_info=lightgreen

# Color of the separator line between windows in view (1).
set color_separator=246

# Color of window titles (topmost line of the screen).
set color_win_title_bg=234
set color_win_title_fg=12

# Status line color (shows remaining time and playback options).
set color_statusline_bg=0
set color_statusline_fg=10

# Color of currently playing track.
set color_win_cur=009

# Color of the line displaying currently playing track.
set color_titleline_bg=234
set color_titleline_fg=12

# Color of the selected row which is also the currently playing track in active window.
set color_win_cur_sel_bg=237
set color_win_cur_sel_fg=9

# Color of the selected row which is also the currently playing track in inactive window.
set color_win_inactive_cur_sel_bg=236
set color_win_inactive_cur_sel_fg=9

# Color of selected row in active window.
set color_win_sel_bg=237
set color_win_sel_fg=default

# Color of selected row in inactive window.
set color_win_inactive_sel_bg=236
set color_win_inactive_sel_fg=default
#+end_src
** dunstrc
:PROPERTIES:
:header-args+: :tangle ~/.config/dunst/dunstrc
:END:
#+begin_src conf
# -*- mode: conf -*-
[global]
    font = Iosevka Term 9

    # Allow a small subset of html markup:
    #   <b>bold</b>
    #   <i>italic</i>
    #   <s>strikethrough</s>
    #   <u>underline</u>
    #
    # For a complete reference see
    # <http://developer.gnome.org/pango/stable/PangoMarkupFormat.html>.
    # If markup is not allowed, those tags will be stripped out of the
    # message.
    allow_markup = yes

    # The format of the message.  Possible variables are:
    #   %a  appname
    #   %s  summary
    #   %b  body
    #   %i  iconname (including its path)
    #   %I  iconname (without its path)
    #   %p  progress value if set ([  0%] to [100%]) or nothing
    # Markup is allowed
    format = "%s %p\n%b"

    # Sort messages by urgency.
    sort = yes

    # Show how many messages are currently hidden (because of geometry).
    indicate_hidden = yes

    # Alignment of message text.
    # Possible values are "left", "center" and "right".
    alignment = left

    # The frequency with wich text that is longer than the notification
    # window allows bounces back and forth.
    # This option conflicts with "word_wrap".
    # Set to 0 to disable.
    bounce_freq = 5


    # Show age of message if message is older than show_age_threshold
    # seconds.
    # Set to -1 to disable.
    show_age_threshold = 60

    # Split notifications into multiple lines if they don't fit into
    # geometry.
    word_wrap = no

    # Ignore newlines '\n' in notifications.
    ignore_newline = no


    # The geometry of the window:
    #   [{width}]x{height}[+/-{x}+/-{y}]
    # The geometry of the message window.
    # The height is measured in number of notifications everything else
    # in pixels.  If the width is omitted but the height is given
    # ("-geometry x2"), the message window expands over the whole screen
    # (dmenu-like).  If width is 0, the window expands to the longest
    # message displayed.  A positive x is measured from the left, a
    # negative from the right side of the screen.  Y is measured from
    # the top and down respectevly.
    # The width can be negative.  In this case the actual width is the
    # screen width minus the width defined in within the geometry option.
    geometry = "700x5-24+48"

    # Shrink window if it's smaller than the width.  Will be ignored if
    # width is 0.
    shrink = yes

    # The transparency of the window.  Range: [0; 100].
    # This option will only work if a compositing windowmanager is
    # present (e.g. xcompmgr, compiz, etc.).
    # transparency = 15

    # Don't remove messages, if the user is idle (no mouse or keyboard input)
    # for longer than idle_threshold seconds.
    # Set to 0 to disable.
    # default 120
    idle_threshold = 120

    # Which monitor should the notifications be displayed on.
    monitor = 0

    # Display notification on focused monitor.  Possible modes are:
    #   mouse: follow mouse pointer
    #   keyboard: follow window with keyboard focus
    #   none: don't follow anything
    #
    # "keyboard" needs a windowmanager that exports the
    # _NET_ACTIVE_WINDOW property.
    # This should be the case for almost all modern windowmanagers.
    #
    # If this option is set to mouse or keyboard, the monitor option
    # will be ignored.
    follow = mouse

    # Should a notification popped up from history be sticky or timeout
    # as if it would normally do.
    sticky_history = yes

    # Maximum amount of notifications kept in history
    history_length = 20

    # Display indicators for URLs (U) and actions (A).
    show_indicators = yes

    # The height of a single line.  If the height is smaller than the
    # font height, it will get raised to the font height.
    # This adds empty space above and under the text.
    line_height = 0

    # Draw a line of "separator_height" pixel height between two
    # notifications.
    # Set to 0 to disable.
    separator_height = 1

    # Padding between text and separator.
    # padding = 8
    padding = 8

    # Horizontal padding.
    horizontal_padding = 10

    # Define a color for the separator.
    # possible values are:
    #  * auto: dunst tries to find a color fitting to the background;
    #  * foreground: use the same color as the foreground;
    #  * frame: use the same color as the frame;
    #  * anything else will be interpreted as a X color.
    separator_color = #454947

    # Print a notification on startup.
    # This is mainly for error detection, since dbus (re-)starts dunst
    # automatically after a crash.
    startup_notification = false

    # dmenu path.
    dmenu = /usr/bin/dmenu -p dunst:

    # Browser for opening urls in context menu.
    browser = firefox-nightly

    # Align icons left/right/off
    icon_position = left

    # Paths to default icons.
    icon_folders = /usr/share/icons/Adwaita/16x16/status/:/usr/share/icons/Adwaita/16x16/devices/

    # Limit icons size.
    max_icon_size=128

[frame]
    width = 1
    color = "#FDF4C1"

[shortcuts]

    # Shortcuts are specified as [modifier+][modifier+]...key
    # Available modifiers are "ctrl", "mod1" (the alt-key), "mod2",
    # "mod3" and "mod4" (windows-key).
    # Xev might be helpful to find names for keys.

    # Close notification.
    close = mod1+space

    # Close all notifications.
    # close_all = ctrl+shift+space
    close_all = ctrl+mod1+space

    # Redisplay last message(s).
    # On the US keyboard layout "grave" is normally above TAB and left
    # of "1".
    history = ctrl+mod4+h

    # Context menu.
    context = ctrl+mod1+c

[urgency_low]
    # IMPORTANT: colors have to be defined in quotation marks.
    # Otherwise the "#" and following would be interpreted as a comment.
    background = "#282828"
    foreground = "#888888"
    timeout = 10

[urgency_normal]
    background = "#282828"
    foreground = "#FDF4C1"
    timeout = 10

[urgency_critical]
    background = "#D62929"
    foreground = "#F9FAF9"
    timeout = 0


# Every section that isn't one of the above is interpreted as a rules to
# override settings for certain messages.
# Messages can be matched by "appname", "summary", "body", "icon", "category",
# "msg_urgency" and you can override the "timeout", "urgency", "foreground",
# "background", "new_icon" and "format".
# Shell-like globbing will get expanded.
#
# SCRIPTING
# You can specify a script that gets run when the rule matches by
# setting the "script" option.
# The script will be called as follows:
#   script appname summary body icon urgency
# where urgency can be "LOW", "NORMAL" or "CRITICAL".
#
# NOTE: if you don't want a notification to be displayed, set the format
# to "".
# NOTE: It might be helpful to run dunst -print in a terminal in order
# to find fitting options for rules.

#[espeak]
#    summary = "*"
#    script = dunst_espeak.sh

#[script-test]
#    summary = "*script*"
#    script = dunst_test.sh

#[ignore]
#    # This notification will not be displayed
#    summary = "foobar"
#    format = ""

#[signed_on]
#    appname = Pidgin
#    summary = "*signed on*"
#    urgency = low
#
#[signed_off]
#    appname = Pidgin
#    summary = *signed off*
#    urgency = low
#
#[says]
#    appname = Pidgin
#    summary = *says*
#    urgency = critical
#
#[twitter]
#    appname = Pidgin
#    summary = *twitter.com*
#    urgency = normal
#
#[Claws Mail]
#    appname = claws-mail
#    category = email.arrived
#    urgency = normal
#    background = "#2F899E"
#    foreground = "#FFA247"
#
#[mute.sh]
#     appname = mute
#     category = mute.sound
#     script = mute.sh
#
#[JDownloader]
#    appname = JDownloader
#    category = JD
#    background = "#FFA247"
#    foreground = "#FFFFFF"
#
#[newsbeuter]
#    summary = *Feeds*
#    background = "#A8EB41"
#    foreground = "#FFFFFF"
#
[irc]
        appname = weechat
        timeout = 0
        background = "#0033bb"
        foreground = "#dddddd"
#
[weechat hl]
     appname = weechat
     category = weechat.HL
     background = "#FF5C47"
     foreground = "#FFFFFF"
#
[weechat pn]
     appname = weechat
     category = weechat.PM
     background = "#D53B84"
     foreground = "#FFFFFF"
#
#[CMUS]
#    appname = CMUS
#    category = cmus
#    background = "#6C4AB7"
#    foreground = "#FFE756"
#
#
#     background = "#30AB70"
#     foreground = "#F67245"
#
# vim: ft=cfg
#+end_src
** fonts.conf
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/fontconfig/fonts.conf") :comments no
:END:
#+begin_src xml
<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
  <dir>~/.nix-profile/share/fonts</dir>
  <alias>
    <family>Iosevka Term</family>
    <default>
      <family>monospace</family>
    </default>
    <prefer>
      <family>FontAwesome</family>
    </prefer>
  </alias>
  <match>
    <test compare="eq" name="family">
      <string>sans-serif</string>
    </test>
    <test compare="eq" name="family">
      <string>monospace</string>
    </test>
    <edit mode="delete" name="family"/>
  </match>
</fontconfig>
#+end_src
** git
*** gitconfig
:PROPERTIES:
:header-args+: :tangle ~/.gitconfig
:END:
I know, it probably doesn't make sense to keep my gitconfig here.
**** media
#+begin_src conf
[filter "media"]
    required = true
    clean = git media clean %f
    smudge = git media smudge %f
#+end_src
**** user
#+begin_src conf
[user]
    name = dieggsy
    email = dieggsy@protonmail.com
    signingkey = 1DF81CB1
#+end_src
**** filter
#+begin_src conf
[filter "lfs"]
    clean = git-lfs clean %f
    smudge = git-lfs smudge %f
    required = true
#+end_src
**** core
#+begin_src conf
[core]
    editor = emacsclient -t
    excludesfile = ~/.gitignore
    pager = "less"
#+end_src
**** credential
#+begin_src conf
[credential]
    helper = /home/diego/.nix-profile/bin/pass-git-helper
#+end_src
**** gpg
#+begin_src conf
[gpg]
    program = gpg2
#+end_src
**** alias
#+begin_src conf
[alias]
    eclipse = !git fetch upstream && git rebase -s recursive -X theirs upstream/master
    gconfig = config --global
    lconfig = config --local
    mypull = pull -s recursive -X ours
    myrebase = rebase -s recursive -X theirs
    optimize = "!f() { git reflog expire --all --expire=now && git gc --prune=now --aggressive; }; f"
    plog = log --graph --pretty=format:'%C(bold black)%h%Creset - %<(50,trunc)%C(bold normal)%s%Creset %<(20)%C(bold green)%an%Creset %<(15)%C(bold red)%cr%Creset%C(bold yellow)%d%Creset' --abbrev-commit
    plog-nocolor = log --graph --pretty=format:'%h - %<(50,trunc)%s %<(20)%an %<(15)%cr%d' --abbrev-commit
    update-from-upstream = pull --rebase -s recursive -X theirs upstream/master
    aliases = config --get-regexp '^alias\\.'
    a = add
    s = status
    sl = status --long
    c = checkout
    cb = checkout -b
    b = branch
    r = rebase
    p = pull
    pr = pull --rebase
    ps = push
    psf = push --force
#+end_src
**** http
#+begin_src conf
[http]
    postBuffer = 524288000
#+end_src
**** color
#+begin_src conf
[color]
    ui = auto
[color "status"]
    added = green bold
    changed = red bold
    untracked = red bold
[color "branch"]
    current = green bold
    remote = magenta bold
[color "diff"]
    new = green bold
    old = red bold
#+end_src
**** http
#+begin_src conf
[push]
    followTags = true
#+end_src
**** status
#+begin_src conf
[status]
    showUntrackedFiles = all
    short=true
    branch=true
#+end_src
**** commit
#+begin_src conf
[commit]
    gpgsign = true
#+end_src
**** push
#+begin_src conf
[push]
    followTags = true
#+end_src
**** github
#+begin_src conf
[github]
	user = dieggsy
#+end_src
*** gitignore
:PROPERTIES:
:header-args+: :tangle ~/.gitignore
:END:

#+begin_src conf
.DS\_Store
*.pyc
__pychache__
*.alfredworkflow
#+end_src
** i3
*** i3wm
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/i3/config")
:END:
**** Defaults
#+begin_src conf
# Set modifier key to command/windows key
set $mod Mod4

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
font pango:Iosevka Term 8.5

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# reload the configuration file
bindsym $mod+Shift+j reload

# reload X11
bindsym $mod+Shift+x exec --no-startup-id xrdb -merge ~/.Xresources

# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+p restart

# exit i3 (logs you out of your X session)
# bindsym $mod+Shift+period exec --no-startup-id "i3-nagbar -t warning -f 'Iosevka Term' -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -b 'Yes, exit i3' 'i3-msg exit'"
bindsym $mod+Shift+period exec --no-startup-id ~/bin/i3-exit-rofi
#+end_src
**** Rofi
#+begin_src conf
# kill focused window
bindsym $mod+Shift+apostrophe kill

# start rofi for windows and commands
bindsym Mod1+space exec --no-startup-id "rofi -combi-modi window,drun -show combi -modi combi -display-combi ''"

# pass helper
bindsym $mod+p exec --no-startup-id ~/.password-store/.extensions/rofi.bash

# File finder with ripgrep
bindsym $mod+f exec --no-startup-id ~/bin/rofi-files
#+end_src
**** Windows/scratchpad
#+begin_src conf
# Scratchpad
bindsym $mod+minus move scratchpad
bindsym $mod+shift+minus scratchpad show
bindsym $mod+shift+plus sticky toggle

# Floating editor
exec --no-startup-id zsh -c emacs
# for_window [title="^emacs@Ragnarok$"] floating enable;
# for_window [title="^emacs@Ragnarok$"] sticky enable;
# for_window [title="^emacs@Ragnarok$"] move scratchpad;
# bindsym $mod+space [title="^emacs@Ragnarok$"] scratchpad show

bindsym $mod+Return exec --no-startup-id ~/bin/eshell-focus
bindsym $mod+e exec --no-startup-id ~/bin/erc-rofi

for_window [window_role="pop-up"] floating enable
for_window [window_role="bubble"] floating enable
for_window [window_role="task_dialog"] floating enable

for_window [window_type="dialog"] floating enable
for_window [window_type="menu"] floating enable

for_window [class="pinentry"] floating enable
for_window [class="Pinentry"] floating enable

for_window [class="Blueman-manager"] floating enable
for_window [class="Blueman-manager"] resize set 1000 700
for_window [class="Blueman-manager"] move position center

for_window [class="Pcmanfm"] floating enable
for_window [class="Pcmanfm"] resize set 1500 1000
for_window [class="Pcmanfm"] move position center
#+end_src
**** Focus
#+begin_src conf
# change focus
bindsym $mod+h focus left
bindsym $mod+t focus down
bindsym $mod+n focus up
bindsym $mod+s focus right

# alternatively, you can use the cursor keys:
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# change focus between tiling / floating windows
# bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent

# focus the child container
#bindsym $mod+d focus child
#+end_src
**** Motion
#+begin_src conf
# move focused window
bindsym $mod+Shift+h move left
bindsym $mod+Shift+t move down
bindsym $mod+Shift+n move up
bindsym $mod+Shift+s move right
bindsym $mod+Shift+c move position center

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right
#+end_src
**** Layout and splitting
#+begin_src conf
# split in horizontal orientation
bindsym $mod+d split toggle

# enter fullscreen mode for the focused container
bindsym $mod+u fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+o layout stacking
bindsym $mod+comma layout tabbed
bindsym $mod+period layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle
#+end_src
**** Workspaces
#+begin_src conf
# switch to workspace
# workspace_layout tabbed
bindsym $mod+1 workspace 1
bindsym $mod+2 workspace 2
bindsym $mod+3 workspace 3
bindsym $mod+4 workspace 4
bindsym $mod+5 workspace 5
bindsym $mod+6 workspace 6
bindsym $mod+7 workspace 7
bindsym $mod+8 workspace 8
bindsym $mod+9 workspace 9
bindsym $mod+0 workspace 10
bindsym $mod+Tab workspace back_and_forth
workspace_auto_back_and_forth yes

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace 1
bindsym $mod+Shift+2 move container to workspace 2
bindsym $mod+Shift+3 move container to workspace 3
bindsym $mod+Shift+4 move container to workspace 4
bindsym $mod+Shift+5 move container to workspace 5
bindsym $mod+Shift+6 move container to workspace 6
bindsym $mod+Shift+7 move container to workspace 7
bindsym $mod+Shift+8 move container to workspace 8
bindsym $mod+Shift+9 move container to workspace 9
bindsym $mod+Shift+0 move container to workspace 10

for_window [class="etcher"] floating enable
#+end_src
**** Resizing
#+begin_src conf
# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym h resize shrink width 10 px or 10 ppt
        bindsym t resize grow height 10 px or 10 ppt
        bindsym n resize shrink height 10 px or 10 ppt
        bindsym s resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape
        bindsym Return mode "default"
        bindsym Escape mode "default"
}

bindsym $mod+r mode "resize"
#+end_src
**** Bar
#+begin_src conf
# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
bar {
    status_command i3blocks
    position top
    tray_output none
    font pango:Iosevka Term, FontAwesome 9
    strip_workspace_numbers yes
    # mode hide
    colors {
        background #282828
        statusline #fdf4c1
        focused_workspace  #282828 #282828 #FDF4c1
        active_workspace   #282828 #282828 #FDF4c1
        inactive_workspace #282828 #282828 #A89984
        urgent_workspace   #901A1E #901A1E #FDF4c1
        binding_mode       #901A1E #901A1E #FDF4c1
    }
}
#+end_src
**** Appearance
#+begin_src conf
# class                 border  background text    indicator child_border
client.focused          #EBDBB2 #EBDBB2    #282828 #3fd7e5   #EBDBB2
client.focused_inactive #928374 #282828    #EBDBB2 #484e50   #928374
client.unfocused        #928374 #282828    #A89984 #292d2e   #928374
client.urgent           #2D2D2D #2D2D2D    #EBDBB2 #901A1E
client.background       #282828

gaps inner 30
gaps outer 0

set $mode_gaps Toggle gaps: (1) on (2) off
bindsym $mod+g mode "$mode_gaps"
mode "$mode_gaps" {
    bindsym 1 mode "default", gaps inner all set 30, gaps outer all set 0
    bindsym 2 mode "default", gaps inner all set 0, gaps outer all set 0
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
new_window pixel 1
#+end_src
**** Bindings
#+begin_src conf
# Keyboard brightness
bindsym XF86KbdBrightnessDown exec ~/bin/kb-light -
bindsym XF86KbdBrightnessUp exec ~/bin/kb-light +

# Screen brightness
bindsym XF86MonBrightnessUp exec ~/bin/i3blocks/screen + && pkill -RTMIN+2 i3blocks
bindsym XF86MonBrightnessDown exec ~/bin/i3blocks/screen - && pkill -RTMIN+2 i3blocks

# Audio controls
bindsym XF86AudioMute exec amixer -D pulse sset Master toggle && pkill -RTMIN+3 i3blocks
bindsym XF86AudioLowerVolume exec amixer -D pulse sset Master 5%- && pkill -RTMIN+3 i3blocks
bindsym XF86AudioRaiseVolume exec amixer -D pulse sset Master 5%+ && pkill -RTMIN+3 i3blocks

# Media controls
bindsym XF86AudioPrev exec ~/bin/playerctl-cmus previous && pkill -RTMIN+1 i3blocks
bindsym XF86AudioNext exec ~/bin/playerctl-cmus next && pkill -RTMIN+1 i3blocks
bindsym XF86AudioPlay exec ~/bin/playerctl-cmus play-pause && pkill -RTMIN+1 i3blocks

# Screenshot
bindsym --release XF86LaunchB exec "scrot -s ~/Pictures/Screenshots/%Y-%m-%d_%H:%M:%S.png"
bindsym Shift+XF86LaunchB exec "scrot -ub ~/Pictures/Screenshots/%Y-%m-%d_%H:%M:%S.png"
bindsym XF86LaunchA exec "scrot ~/Pictures/Screenshots/%Y-%m-%d_%H:%M:%S.png"
#+end_src
**** Startup Programs/Commands
#+begin_src conf
# exec --no-startup-id nm-applet
exec --no-startup-id dropbox-cli start
exec --no-startup-id unclutter
exec --no-startup-id /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1
exec --no-startup-id nitrogen --restore; # sleep 1; compton -b
# exec --no-startup-id blueman
exec --no-startup-id xautolock -corners ---- -time 5 -locker "betterlockscreen -l dim"
exec --no-startup-id ~/bin/no-lock-fullscreen

exec --no-startup-id xset r rate 300 50

exec --no-startup-id setxkbmap dvorak
exec --no-startup-id "setxkbmap -option 'ctrl:nocaps'"
exec --no-startup-id "xcape -e 'Control_L=Escape'"
#+end_src
**** Plasma Integration
#+begin_src conf :tangle no
## Plasma Integration
# Try to kill the wallpaper set by Plasma (it takes up the entire workspace and hides everythiing)
exec --no-startup-id wmctrl -c Plasma
for_window [title="Desktop — Plasma"] kill; floating enable; border none

## Avoid tiling popups, dropdown windows from plasma
# for the first time, manually resize them, i3 will remember the setting for floating windows
for_window [class="plasmashell"] floating enable;
for_window [class="Plasma"] floating enable; border none
for_window [title="plasma-desktop"] floating enable; border none
for_window [title="win7"] floating enable; border none
for_window [class="krunner"] floating enable; border none
for_window [class="Kmix"] floating enable; border none
for_window [class="Klipper"] floating enable; border none
for_window [class="Plasmoidviewer"] floating enable; border none
#+end_src
**** Manjaro
#+begin_src conf
for_window [title="alsamixer"] floating enable border pixel 1
for_window [class="Calamares"] floating enable border normal
for_window [class="Clipgrab"] floating enable
for_window [title="File Transfer*"] floating enable
for_window [class="Galculator"] floating enable border pixel 1
for_window [class="GParted"] floating enable border normal
for_window [title="i3_help"] floating enable sticky enable border normal
for_window [class="Lightdm-gtk-greeter-settings"] floating enable
for_window [class="Lxappearance"] floating enable sticky enable border normal
for_window [class="Manjaro-hello"] floating enable
for_window [class="Manjaro Settings Manager"] floating enable border normal
for_window [title="MuseScore: Play Panel"] floating enable
for_window [class="Nitrogen"] floating enable sticky enable border normal
for_window [class="Oblogout"] fullscreen enable
for_window [class="octopi"] floating enable
for_window [title="About Pale Moon"] floating enable
for_window [class="Pamac-manager"] floating enable
for_window [class="Pavucontrol"] floating enable
for_window [class="qt5ct"] floating enable sticky enable border normal
for_window [class="Qtconfig-qt4"] floating enable sticky enable border normal
for_window [class="Simple-scan"] floating enable border normal
for_window [class="(?i)System-config-printer.py"] floating enable border normal
for_window [class="Skype"] floating enable border normal
for_window [class="Thus"] floating enable border normal
for_window [class="Timeset-gui"] floating enable border normal
for_window [class="(?i)virtualbox"] floating enable border normal
for_window [class="Xfburn"] floating enable

for_window [urgent=latest] focus
#+end_src
*** i3blocks
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.i3blocks.conf")
:END:
#+begin_src conf
separator=false
border_top=0
border_left=0
border_right=0
border_bottom=2
command=~/bin/i3blocks/$BLOCK_NAME

[dropbox]
interval=2
border=#3FD7E5

[music]
interval=5
signal=1
border=#FE8019

[weather]
instance=4931482
interval=60
border=#DD6F48

[layout]
interval=once
border=#8EC07C

[volume]
interval=once
signal=3
border=#FB4933

[screen]
interval=5
signal=2
border=#FABD2F

[disk]
label=  
command=~/bin/i3blocks/disk /
interval=30
border=#D3869B

[wifi]
label=  
interval=2
border=#B8bb26

[battery]
interval=30
border=#83A598

[date]
interval=10
border=#A89984
# border=#DD6F48
#+end_src
** init.vim
:PROPERTIES:
:header-args+: :tangle ~/.config/nvim/init.vim :comments no
:END:
*** Plugins
#+begin_src vimrc
set nocompatible
filetype off
set rtp+=~/.config/nvim/bundle/Vundle.vim
call vundle#begin("~/.config/nvim/bundle")
Plugin 'Shougo/neocomplcache.vim'
Plugin 'VundleVim/Vundle.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'davidhalter/jedi-vim'
Plugin 'godlygeek/tabular'
Plugin 'itchyny/lightline.vim'
Plugin 'jceb/vim-orgmode'
Plugin 'jiangmiao/auto-pairs'
Plugin 'joshdick/onedark.vim'
Plugin 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plugin 'junegunn/fzf.vim'
Plugin 'morhetz/gruvbox'
Plugin 'mswift42/vim-themes'
Plugin 'osyo-manga/vim-anzu'
Plugin 'plasticboy/vim-markdown'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'sheerun/vim-polyglot'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-speeddating'
Plugin 'tpope/vim-surround'
Plugin 'wincent/command-t'
call vundle#end()
filetype plugin indent on
#+end_src
*** Defaults
#+begin_src vimrc
syntax on
set laststatus=2
set number
set relativenumber
set cursorline
set hlsearch
set backspace=2 "make backspace work like most other apps
set tabstop=4
set shiftwidth=4
set expandtab
#+end_src
*** Plugin settings
#+begin_src vimrc
let g:neocomplcache_enable_at_startup=1
let g:vim_markdown_folding_disabled = 1
#+end_src
*** Bindings
#+begin_src vimrc
let mapleader = "\<Space>"
imap <C-_> <Esc>
nnoremap <leader><leader> :CommandTCommand<CR>
nnoremap <leader>ff :CommandT ./<CR>
nnoremap <leader>fs :w<CR>
nnoremap <leader>bb :CommandTBuffer<CR>

nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)
#+end_src
*** Appearance
#+begin_src vimrc
colorscheme gruvbox
set background=dark
let g:lightline = {
    \ 'colorscheme' : 'gruvbox',
    \ }
#+end_src
** networkmanager_dmenu
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/networkmanager-dmenu/config.ini")
:END:
#+begin_src conf
[dmenu]
dmenu_command = rofi
p = [Networks]
l = 10
rofi_highlight=True
# # Note that dmenu_command can contain arguments as well like `rofi -width 30`
# # Rofi and dmenu are set to case insensitive by default `-i`
# l = number of lines to display, defaults to number of total network options
# fn = font string
# nb = normal background (name, #RGB, or #RRGGBB)
# nf = normal foreground
# sb = selected background
# sf = selected foreground
# b =  (just set to empty value and menu will appear at the bottom
# m = number of monitor to display on
# p = Custom Prompt for the networks menu
# pinentry = Pinentry command

[editor]
terminal = termite
gui_if_available = True
# terminal = <name of terminal program>
# gui_if_available = <True or False>
#+end_src
** peco
:PROPERTIES:
:header-args+: :tangle ~/.config/peco/config.json :comments no
:END:
#+begin_src json
{
    "Prompt": "[peco]",
    "InitialFilter":"SmartCase",
    "SelectionPrefix":">",
    "Keymap": {
        "C-_": "peco.ToggleRangeMode"
    },
    "Style": {
        "Basic": ["on_default", "default"],
        "SavedSelection": ["bold", "on_yellow", "white"],
        "Selected": ["on_white","black"],
        "Query": ["cyan", "bold"],
        "Matched": ["bold", "blue", "on_black"]
    }
}
#+end_src
** pythonrc.py
:PROPERTIES:
:header-args+: :tangle ~/.pythonrc.py :padline no
:END:

#+begin_src python
# -*- coding: utf-8 -*-

from __future__ import print_function, unicode_literals, division

try:
    def progBar(i, total, length=50, kind=None):
        """A nice progress bar to use with for loops."""
        i += 1
        n = int(i*length/total)
        percent = i/total*100
        frame = ("{0:6.2f}% |{1}{2}|".format(percent, '█'*n, ' '*(length-n))
                if kind is None else
                "{0:6.2f}% [{1}{2}]".format(percent, str(kind)*n, ' '*(length-n)))
        endchar = ('\r' if i < total else ' Done!\n')
        print(frame, end=endchar)
except:
    pass

# def write_csv(path, rows):
#     "Write a list of iterables to a CSV, I think"
#     with open(path, 'w') as f:
#         writer = csv.writer(f)
#         writer.writerows(rows)
#+end_src
** termite
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/termite/config")
:END:
#+begin_src conf
[options]
font = iosevka term 9.5
allow_bold=0
cursor_shape=ibeam
[colors]
background=#282828
foreground=#FDf4c1
color0=#282828
color1=#9d1306
color2=#79740e
color3=#b57614
color4=#076678
color5=#8f3f71
color6=#00a7af
color7=#bdae93
color8=#686868
color9=#fb4933
color10=#b8bb26
color11=#fabd2f
color12=#83a598
color13=#d3869b
color14=#3fd7e5
color15=#fdf4c1
#+end_src
** tmux
*** tmux.conf
:PROPERTIES:
:header-args+: :tangle ~/.tmux.conf
:END:
**** Initialize
#+begin_src conf
set -s escape-time 0
# set -g default-terminal "xterm-256color"
# set -ga terminal-overrides ",screen-256color:Tc"
# set -g lock-after-time 300
# set -g lock-command "/usr/bin/cmatrix -B"
set -g update-environment -r
set -g set-titles on
set -g set-titles-string '#W'
# set-option -g set-titles-string '#H:#S.#I.#P #W #T'
#+end_src
**** Prefix
#+begin_src conf
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix
#+end_src
**** Bindings
#+begin_src conf
bind r source-file ~/.tmux.conf

set -g mouse on
set-window-option -g xterm-keys on
set-option -g status-keys vi
setw -g mode-keys vi
bind-key x kill-pane
bind-key q detach-client
bind-key Q detach-client
bind-key Escape copy-mode
bind-key [ copy-mode
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-pipe 'xclip -i -sel c' \; send -X clear-selection
set-option -s set-clipboard off
bind -n C-k clear-history
#+end_src
**** Windows/Panes
#+begin_src conf
setw -g monitor-activity on
set-option -g allow-rename off
set -g history-limit 5000
set -g base-index 1
set -g pane-base-index 1
set-option -g renumber-windows on

bind | split-window -h -c '#{pane_current_path}'
bind - split-window -v -c '#{pane_current_path}'
unbind '"'
unbind %

bind-key { swap-window -t -1
bind-key } swap-window -t +1
bind-key \ next-window

bind-key j select-pane -D
bind-key k select-pane -U
bind-key h select-pane -L
bind-key l select-pane -R
bind-key o swap-pane -D
bind-key < split-window -h \; choose-window 'kill-pane ; join-pane -hs %%'
bind-key > break-pane -d
bind-key ^ split-window -v \; choose-window 'kill-pane ; join-pane -vs %%'
bind-key = select-layout even-horizontal
bind-key + select-layout even-vertical
#+end_src
**** Bell
#+begin_src conf
set-option -g bell-action any
set-option -g visual-bell off
#+end_src
**** Theming
#+begin_src conf
# panes
set -g pane-border-fg black
set -g pane-active-border-fg brightred

## Status bar design
# status line
set -g status-justify left
set -g status-bg default
set -g status-fg colour12
set -g status-interval 2

# messaging
set -g message-fg black
set -g message-bg yellow
set -g message-command-fg blue
set -g message-command-bg black

#window mode
setw -g mode-bg colour6
setw -g mode-fg colour0

# window status
setw -g window-status-format " #F#I:#W#F "
setw -g window-status-current-format " #F#I:#W#F "
setw -g window-status-format "#[fg=magenta]#[bg=black] #I #[bg=cyan]#[fg=colour8] #W "
setw -g window-status-current-format "#[bg=brightmagenta]#[fg=colour8] #I #[fg=colour8]#[bg=colour14] #W "
setw -g window-status-current-bg colour0
setw -g window-status-current-fg colour11
setw -g window-status-current-attr dim
setw -g window-status-bg green
setw -g window-status-fg black
setw -g window-status-attr reverse

# Info on left (I don't have a session display for now)
set -g status-left ''

# loud or quiet?
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-window-option -g monitor-activity off
set-window-option -g aggressive-resize on
set-option -g bell-action none

set -g default-terminal "screen-256color"

# The modes {
setw -g clock-mode-colour colour135
setw -g mode-attr none
setw -g mode-fg colour9
setw -g mode-bg colour237

# }
# The panes {

set -g pane-border-bg colour0
set -g pane-border-fg colour238
set -g pane-active-border-bg colour0
set -g pane-active-border-fg colour6

# }
# The statusbar {

set -g status-position bottom
set -g status-bg colour234
set -g status-fg colour137
set -g status-attr dim
set -g status-left ''
set -g status-right '#[fg=colour233,bg=colour241,bold] %Y-%d-%m #[fg=colour233,bg=colour245,bold] %H:%M '
set -g status-right-length 50
set -g status-left-length 20

setw -g window-status-current-fg colour81
setw -g window-status-current-bg colour238
setw -g window-status-current-attr bold
setw -g window-status-current-format ' #I#[fg=colour250]:#[fg=colour015]#W#[fg=colour6]#F '

setw -g window-status-fg colour13
setw -g window-status-bg colour235
setw -g window-status-attr none
setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour007]#W#[fg=colour244]#F '

setw -g window-status-bell-attr bold
setw -g window-status-bell-fg colour255
setw -g window-status-bell-bg colour1

# }
# The messages {

set -g message-attr bold
set -g message-fg colour232
set -g message-bg colour166

# }
#+end_src
**** osx-specific
#+begin_src conf :tangle (when (eq system-type 'darwin) "~/.tmux.conf")
set-option -g default-command "reattach-to-user-namespace -l zsh"
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
#+end_src
**** Plugins
#+begin_src conf
# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-urlview'
# set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @continuum-restore 'on'

set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-sidebar'
set -g @sidebar-tree-command 'exa -TL2 --color=always'
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
#+end_src
*** tmuxinator-hud
:PROPERTIES:
:header-args+: :tangle ~/.tmuxinator/hud.yml
:END:
#+begin_src yaml :comments no
# ~/.tmuxinator/hud.yml

name: hud

windows:
  - shell:
  - social: exec weechat
  - music: exec cmus
#+end_src
** xbindkeysrc
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.xbindkeysrc") :comments no
:END:
#+begin_src conf-unix :tangle no
"~/bin/i3blocks/volume +"
    XF86AudioRaiseVolume

"~/bin/i3blocks/volume -"
    XF86AudioLowerVolume

"~/bin/i3blocks/volume toggle"
    XF86AudioMute

"~/bin/i3blocks/music next"
    XF86AudioNext

"~/bin/i3blocks/music prev"
    XF86AudioPrev

"~/bin/i3blocks/music toggle"
    XF86AudioPlay

"~/bin/i3blocks/bright Backlight +"
    XF86MonBrightnessUp

"~/bin/i3blocks/bright Backlight -"
    XF86MonBrightnessDown

"~/bin/i3blocks/bright Kb-light +"
    XF86KbdBrightnessUp

"~/bin/i3blocks/bright Kb-light -"
    XF86KbdBrightnessDown

"scrot -s ~/Pictures/Screenshots/%Y-%m-%d_%H:%M:%S.png"
    XF86LaunchB

 "scrot -ub ~/Pictures/Screenshots/%Y-%m-%d_%H:%M:%S.png"
    shift + XF86LaunchB

 "scrot ~/Pictures/Screenshots/%Y-%m-%d_%H:%M:%S.png"
    XF86LaunchA

 "rofi -combi-modi window,run,drun -show combi -modi combi"
    alt + space
#+end_src
** Xresources
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.Xresources")
:END:
#+begin_src conf-xdefaults
#if __has_include(".extend.Xresources")
#include ".extend.Xresources"
#endif

Xft.dpi: 184
Xft.antialias: 1
Xft.hinting: 1
Xft.rgba: rgb
Xft.autohint: false
Xft.hintstyle: hintslight
Xft.lcdfilter: lcddefault

Xcursor.size: 64

rofi.color-enabled: true
rofi.font: iosevka term, fontawesome 20
rofi.scroll-method: 1
rofi.padding: 20
rofi.line-padding: 10
rofi.lines: 10
rofi.color-window: #282828, #fdf4c1, #282828
rofi.color-normal: #282828, #fdf4c1, #282828, #3c3836, #fdf4c1
rofi.color-active: #282828, #DD6f48, #282828, #3c3836, #DD6f48
rofi.color-urgent: #282828, #FB4933, #282828, #3c3836, #FB4933
rofi.width: 40

Emacs.fontBackend: xft
Emacs.font: Iosevka Term-9.5:weight=book
Emacs.geometry: 105x41
Emacs.menuBar: off
Emacs.toolBar: off
Emacs.verticalScrollBars: off
Emacs.cursorBlink: off
Emacs.foreground: #fdf4c1
Emacs.background: #282828
Emacs.mode-line.attributeForeground: #EBDBB2
Emacs.mode-line.attributeBackground: #1D2021
Emacs.mode-line.attributeBox: nil
#+end_src
** zathurarc
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/zathura/zathurarc")
:END:
#+begin_src conf
set font "Iosevka Term 9"
set default-bg "#282828"
set default-fg "#fdf4c1"
set inputbar-bg "#282828"
set inputbar-fg "#3FD7E5"
set statusbar-fg "#fdf4c1"
set first-page-column 1
set recolor-darkcolor "#fDf4c1"
set recolor-lightcolor "#282828"
#+end_src
** xterm-24bit.terminfo
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/xterm-24bit.terminfo")
:END:
#+begin_src text :comments no :tangle no
# Use colon separators.
xterm-24bit|xterm with 24-bit direct color mode,
  use=xterm-256color,
  setb24=\E[48:2:%p1%{65536}%/%d:%p1%{256}%/%{255}%&%d:%p1%{255}%&%dm,
  setf24=\E[38:2:%p1%{65536}%/%d:%p1%{256}%/%{255}%&%d:%p1%{255}%&%dm,
# Use semicolon separators.
xterm-24bits|xterm with 24-bit direct color mode,
  use=xterm-256color,
  setb24=\E[48;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%&%d;%p1%{255}%&%dm,
  setf24=\E[38;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%&%d;%p1%{255}%&%dm,
#+end_src
* Scripts
** erc-rofi
:PROPERTIES:
:header-args+: :tangle ~/bin/erc-rofi :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
this=$(emacsclient --eval "(format \"%s\" (mapcar #'buffer-name (cl-remove-if-not (lambda (buf) (with-current-buffer buf (eq major-mode 'erc-mode))) (buffer-list)))))" | sed 's/"//g;s/[()]//g;s/ /\n/g' | rofi -dmenu -p '[erc] ')
echo $this
emacsclient -e "(switch-to-buffer \"$this\")"
i3-msg '[title=".emacs-wrapped@Ragnarok"] focus'
#+end_src
** eshell-focus
:PROPERTIES:
:header-args+: :tangle ~/bin/eshell-focus :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
# emacsclient -e "(eshell-frame)"
emacsclient -e '(eshell) '
i3-msg '[title=".emacs-wrapped@Ragnarok"] focus'
#+end_src
** exwm-blocks
*** disk
:PROPERTIES:
:header-args+: :tangle ~/bin/exwm-blocks/disk :shebang "#!/bin/bash"
:END:
#+begin_src sh
Disk=$(df -h "$1" | grep -v "^[A-Z]" | awk '{print $4-G"/"$2}')
Short=$(df -h "$1" | grep -v "^[A-Z]" | awk '{print $4}')

echo -e " $Short "
#+end_src
*** layout
:PROPERTIES:
:header-args+: :tangle ~/bin/exwm-blocks/layout :shebang "#!/bin/bash"
:END:
#+begin_src sh
layout="$(setxkbmap -query | grep layout | cut -d' ' -f6)"

if [ "$1" = "toggle" ] && [ "$layout" = "dvorak" ]; then
    setxkbmap us
    layout="QW"
elif [ "$1" = "toggle" ] && [ "$layout" = "us" ]; then
    setxkbmap dvorak
    layout="DV"
elif [ "$layout" = "us" ]; then
    layout="QW"
elif [ "$layout" = "dvorak" ]; then
    layout="DV"
fi

echo " $layout "
#+end_src
*** volume
:PROPERTIES:
:header-args+: :tangle ~/bin/exwm-blocks/volume :shebang "#!/bin/bash"
:END:
#+begin_src sh
if [ "$1" = "toggle" ]; then
    out="$(amixer -D pulse sset Master toggle)"
elif [ "$1" = "+" ]; then
    out="$(amixer -D pulse sset Master 5%+)"
elif [ "$1" = "-" ]; then
    out="$(amixer -D pulse sset Master 5%-)"
else
    out="$(amixer -D pulse get Master)"
fi

# echo "$out"

Vol=$(echo "$out"  | grep "Left: Playback" | awk '{print $5}' | tr -d "[ %]")
Mute=$(echo "$out" | grep "Left: Playback" | awk '{print $6}' | tr -d "[-]")

if [ "$Vol" = "0" ] || [ "$Mute" = "off" ]; then
    echo -ne " $Vol"
elif [ "$Vol" -ge "50" ];then
    echo -ne " $Vol"
else
    echo -ne " $Vol"
fi
#+end_src
** i3-exit-rofi
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3-exit-rofi") :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
# message="Exit i3?"
response=$(echo -e "exit\nlock\nsuspend\nhibernate\nreboot\nshutdown" | rofi -l 6 -width 30 -dmenu -i -p "")
if [ -n "$response" ]; then
    ~/bin/i3exit $response
fi
#+end_src
** i3blocks
i3blocks scripts taken from/inspired by [[https://github.com/yeungocanh/archdot/tree/master/.config/i3blocks][yeungocanh/archdot]].
*** battery
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/battery") :shebang "#!/bin/bash"
:END:
#+begin_src sh
if [ "$BLOCK_BUTTON" = "1" ]; then
    notify-send "$(upower -i /org/freedesktop/UPower/devices/battery_BAT0)"
fi
bat=$(acpi | cut -d " " -f4 | tr -d "%,")
Adapt=$(acpi -a | cut -d " " -f3)

touch /tmp/battery-status
if [ "$bat" -lt 11 ] && [ "$(</tmp/battery-status)" != "critically-low" ] && [ "$Adapt" != "on-line" ]; then
    espeak -vf4 "Battery critically low, consider charging." &
    notify-send "Battery critically low, consider charging." &
    echo "critically-low" > /tmp/battery-status
else
    echo "fine" > /tmp/battery-status
fi


if [ "$Adapt" = "on-line" ];then
    icon=""
elif [ "$bat" -gt "95" ];then
    icon=""
elif [ "$bat" -gt "75" ];then
    icon=""
elif [ "$bat" -gt "50" ];then
    icon=""
elif [ "$bat" -gt "25" ];then
    icon=""
elif [ "$bat" -le "25" ];then
    icon=""
fi


echo -e "  $icon  $bat "
#+end_src
*** date
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/date") :shebang "#!/bin/bash"
:END:
#+begin_src sh
if [ "$BLOCK_BUTTON" = "1" ]; then
    notify-send "$(cal --color=never | head -n-1 | cut -c -20)"
fi
echo -e "    $(date +%F\ %R) "
echo -e "    $(date +%R) "
#+end_src
*** disk
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/disk") :shebang "#!/bin/bash"
:END:
#+begin_src sh
if [ "$BLOCK_BUTTON" = "1" ]; then
    notify-send "$(df -h)"
fi
Disk=$(df -h "$1" | grep -v "^[A-Z]" | awk '{print $4-G"/"$2}')
Short=$(df -h "$1" | grep -v "^[A-Z]" | awk '{print $4}')

if [ -z "$1" ];then
    echo -e "Enter Your Mounted Point Name Ex : \"/\" "
else
    # echo -e " $Disk "
    echo -e " $Short "
fi
#+end_src
*** dropbox
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/dropbox") :shebang "#!/bin/bash"
:END:
#+begin_src sh
status=$(dropbox-cli status)
if [ ! "$status" = "Up to date" ]; then
    echo "  $status"
fi
#+end_src
*** layout
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/layout") :shebang "#!/bin/bash"
:END:
#+begin_src sh
layout="$(setxkbmap -query | grep layout | cut -d' ' -f6)"

if [ "$BLOCK_BUTTON" = "1" ] && [ "$layout" = "dvorak" ]; then
    setxkbmap us
    layout="QW"
elif [ "$BLOCK_BUTTON" = "1" ] && [ "$layout" = "us" ]; then
    setxkbmap dvorak
    layout="DV"
elif [ "$layout" = "us" ]; then
    layout="QW"
elif [ "$layout" = "dvorak" ]; then
    layout="DV"
fi

# echo "   $layout "
echo "    $layout "
#+end_src
*** music
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/music") :shebang "#!/bin/bash"
:END:
#+begin_src sh
if [ "$1" = "toggle" ] || [ "$BLOCK_BUTTON" = "1" ]; then
    playerctl-cmus play-pause
elif [ "$1" = "next" ] || [ "$BLOCK_BUTTON" = "5" ]; then
    playerctl-cmus next
elif [ "$1" = "prev" ] || [ "$BLOCK_BUTTON" = "4" ]; then
    playerctl-cmus previous
fi

spotify=$(pgrep -x 'spotify')
spotplaying="$([ -n "$spotify" ] && pacmd list-sink-inputs | grep -B16 'application.name = "spotify"' | head -1 | awk '{print $2}')"
cmus=$(pgrep -x 'cmus')
cmusplaying="$([ -n "$cmus" ] && cmus-remote -Q | head -1 | awk '{print $2}')"

if [ -n "$spotify" ] && [ "$spotplaying" = "RUNNING" ]; then
    artist="$(sp current | grep -E '^Artist' | cut -d' ' -f8-)"
    title="$(sp current | grep Title | cut -d' ' -f9-)"
    icon="⏸"
elif [ -n "$cmus" ] && [ "$cmusplaying" = "playing" ]; then
    title="$(cmus-remote -Q | grep "tag title" | cut -d" " -f3-)"
    artist="$(cmus-remote -Q | grep "tag artist" | cut -d" " -f3-)"
    icon="⏸"
elif [ -n "$spotify" ]; then
    artist="$(sp current | grep -E '^Artist' | cut -d' ' -f8-)"
    title="$(sp current | grep Title | cut -d' ' -f9-)"
    icon="▶"
elif [ -n "$cmus" ]; then
    title="$(cmus-remote -Q | grep "tag title" | cut -d" " -f3-)"
    artist="$(cmus-remote -Q | grep "tag artist" | cut -d" " -f3-)"
    icon="▶"
fi

if [ "$XDG_CURRENT_DESKTOP" = "exwm" ]; then
    emacsclient --eval "(message \"Current track: $artist - $title\")"
elif [ -n "$artist" ] && [ -n "$title" ]; then
    echo -e " $icon $artist - $title "
    echo -e " $icon $title "
fi
#+end_src
*** screen
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/screen") :shebang "#!/bin/bash"
:END:
#+begin_src sh
brightness=$(xbacklight -get)
multiple=$(printf %.0f $(echo "scale=2; $brightness / 5" | bc))
brightness=$((($multiple * 5)))
if [ "$1" = "+" ]; then
    brightness=$((($brightness + 5)))
    xbacklight -set $brightness > /dev/null 2>&1
elif [ "$1" = "-" ]; then
    brightness=$((($brightness - 5)))
    xbacklight -set $brightness > /dev/null 2>&1
fi

echo "    $brightness"
#+end_src
*** volume
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/volume") :shebang "#!/bin/bash"
:END:
#+begin_src sh
if [ "$1" = "toggle" ] || [ "$BLOCK_BUTTON" = "1" ]; then
    amixer -D pulse sset Master toggle > /dev/null 2>&1
elif [ "$1" = "+" ] || [ "$BLOCK_BUTTON" = "5" ]; then
    amixer -D pulse sset Master 5%+ > /dev/null 2>&1
elif [ "$1" = "-" ] || [ "$BLOCK_BUTTON" = "4" ]; then
    amixer -D pulse sset Master 5%- > /dev/null 2>&1
fi

Vol=$(amixer -D pulse get Master | grep "Left: Playback" | awk '{print $5}' | tr -d "[ %]")
Mute=$(amixer -D pulse get Master | grep "Left: Playback" | awk '{print $6}' | tr -d "[-]")

if [ "$XDG_CURRENT_DESKTOP" = "exwm" ] && [ "$1" = "toggle" ] && [ "$Mute" = "off" ]; then
    emacsclient --eval "(progn (setq d/mute t) (force-mode-line-update 'all))"
elif [ "$XDG_CURRENT_DESKTOP" = "exwm" ] && [ "$1" = "toggle" ] && [ "$Mute" = "on" ]; then
    emacsclient --eval "(progn (setq d/mute nil) (force-mode-line-update 'all))"
elif [ "$XDG_CURRENT_DESKTOP" = "exwm" ]; then
    emacsclient --eval "(message \"Volume: $Vol\")"
elif [ "$Vol" = "0" ] || [ "$Mute" = "off" ]; then
    echo -ne "    $Vol "
elif [ "$Vol" -ge "50" ];then
    echo -ne "    $Vol "
else
    echo -ne "    $Vol "
fi
#+end_src
*** weather
:PROPERTIES:
:header-args+: :tangle ~/bin/i3blocks/weather :shebang "#!/bin/bash"
:END:
#+begin_src sh
# Based on http://openweathermap.org/current

API_KEY="fab96973be619554c0024b39a579202a"

# Check on http://openweathermap.org/find
CITY_ID="${BLOCK_INSTANCE}"

# URGENT_LOWER=0
# URGENT_HIGHER=30

ICON_SUNNY=""
ICON_CLOUDY=""
ICON_RAINY=""
ICON_STORM=""
ICON_SNOW=""
ICON_FOG=""

SYMBOL_CELSIUS=""

WEATHER_URL="http://api.openweathermap.org/data/2.5/weather?id=${CITY_ID}&appid=${API_KEY}&units=imperial"

WEATHER_INFO=$(wget -qO- "${WEATHER_URL}")
WEATHER_MAIN=$(echo "${WEATHER_INFO}" | grep -o -e '\"main\":\"[a-Z]*\"' | awk -F ':' '{print $2}' | tr -d '"')
WEATHER_TEMP=$(echo "${WEATHER_INFO}" | grep -o -e '\"temp\":\-\?[0-9]*' | awk -F ':' '{print $2}' | tr -d '"')

if [[ "${WEATHER_MAIN}" = *Snow* ]]; then
  echo "  ${ICON_SNOW}  ${WEATHER_TEMP}${SYMBOL_CELSIUS} "
  echo "  ${ICON_SNOW}  ${WEATHER_TEMP}${SYMBOL_CELSIUS} "
  echo ""
elif [[ "${WEATHER_MAIN}" = *Rain* ]] || [[ "${WEATHER_MAIN}" = *Drizzle* ]]; then
  echo "  ${ICON_RAINY}  ${WEATHER_TEMP}${SYMBOL_CELSIUS} "
  echo "  ${ICON_RAINY}  ${WEATHER_TEMP}${SYMBOL_CELSIUS} "
  echo ""
elif [[ "${WEATHER_MAIN}" = *Cloud* ]]; then
  echo "  ${ICON_CLOUDY}  ${WEATHER_TEMP}${SYMBOL_CELSIUS} "
  echo "  ${ICON_CLOUDY}  ${WEATHER_TEMP}${SYMBOL_CELSIUS} "
  echo ""
elif [[ "${WEATHER_MAIN}" = *Clear* ]]; then
  echo "  ${ICON_SUNNY}  ${WEATHER_TEMP}${SYMBOL_CELSIUS} "
  echo "  ${ICON_SUNNY}  ${WEATHER_TEMP}${SYMBOL_CELSIUS} "
  echo ""
elif [[ "${WEATHER_MAIN}" = *Fog* ]] || [[ "${WEATHER_MAIN}" = *Mist* ]]; then
  echo "  ${ICON_FOG}  ${WEATHER_TEMP}${SYMBOL_CELSIUS} "
  echo "  ${ICON_FOG}  ${WEATHER_TEMP}${SYMBOL_CELSIUS} "
  echo ""
else
  echo "  ${WEATHER_MAIN}  ${WEATHER_TEMP}${SYMBOL_CELSIUS} "
  echo "  ${WEATHER_MAIN}  ${WEATHER_TEMP}${SYMBOL_CELSIUS} "
  echo ""
fi

# if [[ "${WEATHER_TEMP}" -lt "${URGENT_LOWER}" ]] || [[ "${WEATHER_TEMP}" -gt "${URGENT_HIGHER}" ]]; then
#   exit 33
# fi
#+end_src
*** wifi
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/i3blocks/wifi") :shebang "#!/bin/bash"
:END:
#+begin_src sh
if [ "$BLOCK_BUTTON" = "1" ]; then
    networkmanager_dmenu
fi
name="$(iwgetid -r)"
if [ -n "$name" ]; then
    # strength="$(nmcli device wifi list | grep '*' | tail -1 | awk -F '[[:space:]][[:space:]]+' '{print $6}')"
    # echo -e "   $name $strength%"
    # echo -e "$strength% "
    echo -e "  $name "
    echo ""
    # echo "#B8BB26"
else
    echo -e "  None "
    echo
    echo
    # echo "#FB4933"
fi
#+end_src
** i3exit
:PROPERTIES:
:header-args+: :tangle ~/bin/i3exit :shebang "#!/bin/sh"
:END:
#+begin_src sh
[[ $(cat /proc/1/comm) == "systemd" ]] && logind=systemctl || logind=loginctl

case "$1" in
    lock)
        betterlockscreen -l dim
        ;;
    exit)
        i3-msg exit
        ;;
    switch_user)
        dm-tool switch-to-greeter
        ;;
    suspend)
        betterlockscreen -l dim && $logind suspend
        ;;
    hibernate)
        betterlockscreen -l dim && $logind hibernate
        ;;
    reboot)
        $logind reboot
        ;;
    shutdown)
        $logind poweroff
        ;;
    ,*)
        echo "== ! i3exit: missing or invalid argument ! =="
        echo "Try again with: lock | logout | switch_user | suspend | hibernate | reboot | shutdown"
        exit 2
esac

exit 0
#+end_src
** masterinstall
:PROPERTIES:
:header-args+: :tangle ~/bin/masterinstall :shebang "#!/usr/bin/env bash"
:END:
A work in progress to reinstall programs post apocalpyse.
*** macOS
**** Xcode
#+begin_src sh :tangle (when (eq system-type 'darwin) "~/bin/masterinstall")
if  [ ! -d /Applications/Xcode.app ]; then
    echo "Please install Xcode and try again."
    exit 1
else
    echo "\e[1;34mInstalling: \e[91mXcode command line tools\e[0;97m"
    xcode-select --install
fi
#+end_src
**** homebrew
#+begin_src sh :tangle (when (eq system-type 'darwin) "~/bin/masterinstall")
echo "\n\e[1;34mInstalling: \e[91mhomebrew\e[0;97m"
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

# Install brew bundle
echo "\n\e[1;34mInstalling: \e[91mhomebrew programs\e[0;97m"
/usr/local/bin/brew tap Homebrew/bundle
/usr/local/bin/brew bundle --file=~/Dropbox/installed-programs/brew.rb
#+end_src
**** Install alfred workflow utils
#+begin_src sh :tangle (when (eq system-type 'darwin) "~/bin/masterinstall")
echo "\n\e[1;34mInstalling: \e[91mAlfred workflow utils\e[0;97m"
curl -o  ~/bin/workflow-build.py https://gist.githubusercontent.com/deanishe/b16f018119ef3fe951af/raw/
curl -o  ~/bin/workflow-install.py https://gist.githubusercontent.com/deanishe/35faae3e7f89f629a94e/raw/
chmod a+x ~/bin/workflow-build.py
chmod a+x ~/bin/workflow-install.py
echo -e "\e[1;34mDone"
#+end_src
*** Linux
**** apt-get packages
#+begin_src sh :tangle (when (eq system-type 'gnu/linux) "~/bin/masterinstall")
tar -xf ~/Dropbox/installed-programs/apt.tgz /tmp/apt
sudo apt-key add /tmp/apt/repo.keys
sudo cp -R /tmp/apt/sources.list* /etc/apt/
sudo apt-get update
sudo apt-get install dselect
sudo dselect update
sudo dpkg --set-selections < /tmp/apt/package.list
sudo apt-get dselect-upgrade -y
#+end_src
*** nix
#+begin_src sh :tangle (when (eq system-type 'gnu/linx) "~/bin/masterinstall")
curl https://nixos.org/nix/install | sh
nix-env -f ~/dotfiles/nix-local/packages.nix -i
#+end_src
*** pyenv
#+begin_src sh :tangle (when (eq system-type 'gnu/linux) "~/bin/masterinstall")
curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash
pyenv update
#+end_src
*** Python versions
#+begin_src sh
echo "\n\e[1;34mInstalling: \e[91mpython\e[0;97m"
# Pyenv setup
usr/local/bin/pyenv install $python3version
usr/local/bin/pyenv rehash
usr/local/bin/pyenv install $python2version
usr/local/bin/pyenv rehash
#+end_src
*** Pip
#+begin_src sh
pyenv global $python3version
echo "\n\e[1;34mInstalling: \e[91mpip3 programs\e[0;97m"
<~/Dropbox/installed-programs/pip3.txt xargs pip install

pyenv global $python2version
echo "\n\e[1;34mInstalling: \e[91mpip2 programs\e[0;97m"
<~/Dropbox/installed-programs/pip2.txt xargs pip install

pyenv global $python3version
#+end_src
*** Tangle dotfiles
#+begin_src sh
if [ -d ~/dotfiles ]; then
    ~/dotfiles/org-tangle
fi
#+end_src
** no-lock-fullscreen
:PROPERTIES:
:header-args+: :tangle ~/bin/no-lock-fullscreen :shebang "#!/usr/bin/env bash"
:END:
This goes in a cron job using ~crontab -e~ like so:
#+begin_example
*/2 * * * * /home/diego/bin/no-lock-fullscreen
#+end_example
#+begin_src sh
active_id=`xprop -display :0 -root _NET_ACTIVE_WINDOW`
fullscreen="$(xprop -display :0 -id ${active_id:40:9} | grep _NET_WM_STATE_FULLSCREEN)"
if [ -n "$fullscreen" ]; then
    xautolock -disable; xautolock -enable
fi
#+end_src
** ocrpdf
:PROPERTIES:
:header-args+: :tangle ~/bin/ocrpdf :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
if [[ -z $1 ]]; then
    echo "No input file provided."
elif [[ -z $2 ]]; then
    echo "No output file provided"
else
    echo "Converting pdf to tif..."
    \gs -dNOPAUSE -q -r500 \
        -sDEVICE=tiffg4 \
        -dBATCH \
        -sOutputFile=$TMPDIR/tempocr.tif \
        $1
    echo "Running tesseract on pngs..."
    tesseract $TMPDIR/tempocr.tif $2 >/dev/null 2>&1
    echo "Done."
fi
#+end_src
** ocrpdf2
:PROPERTIES:
:header-args+: :tangle ~/bin/ocrpdf2 :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
if [[ -z $1 ]]; then
    echo "No input file provided."
elif [[ -z $2 ]]; then
    echo "No output file provided"
else
    echo "Converting pdf to png..."
    convert -density 500 $1 $TMPDIR/tempocr.png
    count=0
    echo "Running tesseract on pngs..."
    while [ -f $TMPDIR/tempocr-$count.png ]; do
        echo "    Page $count"
        tesseract $TMPDIR/tempocr-$count.png $TMPDIR/tempocr >/dev/null 2>&1
        cat $TMPDIR/tempocr.txt >> $2
        let count=count+1
    done
    echo "Created output file $2"
fi
#+end_src
** pass
Extensions and utilities for [[https://www.passwordstore.org/][pass]] password manager.
*** pass-peco
:PROPERTIES:
:header-args+: :tangle ~/.password-store/.extensions/peco.bash :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
name=$(rg -g "*.gpg" "$HOME/.password-store" --files \
           | sed 's@'"$HOME"'/\.password-store/\(.\+\?\)\.gpg@\1@' \
           | peco --prompt="[pass]")

[[ -n "$name" ]] && pass -c $name
#+end_src
*** pass-rofi
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.password-store/.extensions/rofi.bash") :shebang "#!/usr/bin/env bash"
:END:
#+begin_src sh
name=$(rg -g "*.gpg" "$HOME/.password-store" --files \
           | sed 's@'"$HOME"'/\.password-store/\(.\+\?\)\.gpg@\1@' \
           | sort \
           | rofi -dmenu -i -p "[pass] " -width 30)

pass -c $name
#+end_src
** playerctl-cmus
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/playerctl-cmus") :shebang "#!/usr/bin/env bash"
:END:
Wrapper around playerctl to control cmus as well.
#+begin_src sh
other=$(ps axc | grep 'spotify')
if [ -n "$other" ]; then
    playerctl $1
else
    if [ "$1" = "play-pause" ]; then
        if [ "$(cmus-remote -Q | grep status)" = "status paused" ]; then
           cmus-remote -p
        elif [ "$(cmus-remote -Q | grep status)" = "status playing" ]; then
            cmus-remote -u
        fi
    elif [ "$1" = "next" ]; then
        cmus-remote -n
    elif [ "$1" = "previous" ]; then
        cmus-remote -r
    fi

fi
#+end_src
** rofi-files
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/bin/rofi-files") :shebang "#!/usr/bin/env zsh"
:END:
A script to search all files using [[https://github.com/BurntSushi/ripgrep][ripgrep]] and [[https://github.com/DaveDavenport/rofi][rofi]].
#+begin_src sh
rg -a --files 2>/dev/null \
    | LC_ALL=C sort \
    | awk -v len=85 '{ if (length($0) > len) print "..." substr($0, length($0)-len, length($0)); else print; }' \
    | rofi -dmenu -i -width 50 -levenshtein-sort -matching regex -p '[files] '\
    | xargs -d '\n' xdg-open

#+end_src
** scriptl
*** scriptl-server
:PROPERTIES:
:header-args+: :tangle ~/scriptl/scriptl-server.lisp
:END:
#+begin_src lisp :tangle no
(ql:quickload :swank)
(ql:quickload :scriptl)
(ql:quickload :dbus)

(swank:create-server :port 4005 :dont-close t)
(scriptl:start)

(defmacro scriptl-script (script-name args &key (path #P"/home/diego/scriptl/") body)
  `(progn
     (defun ,script-name ,args
       ,body)
     (let ((*default-pathname-defaults* ,path))
       (scriptl:make-script ,(string-downcase (symbol-name script-name)) ',script-name))))

(load "/home/diego/scriptl/scripts.lisp")
#+end_src
*** scripts
:PROPERTIES:
:header-args+: :tangle ~/scriptl/scripts.lisp
:END:
**** kb-light
#+begin_src lisp :tangle no
(scriptl-script
 kb-light (&optional up-down)
 :path #P"/home/diego/scriptl/"
 :body
 (dbus:with-open-bus (bus (dbus:system-server-addresses))
   (dbus:with-introspected-object
       (kb-light bus
                 "/org/freedesktop/UPower/KbdBacklight"
                 "org.freedesktop.UPower")
     (let* ((delta (cond ((string= up-down "+") 2)
                         ((string= up-down "-") -2)
                         (t 0)))
            (current (kb-light "org.freedesktop.UPower.KbdBacklight"
                               "GetBrightness"))
            (maximum (kb-light "org.freedesktop.UPower.KbdBacklight"
                               "GetMaxBrightness"))
            (new (max 0 (+ current delta) )))
       (when (<= 0 new maximum)
         (setq current new)
         (kb-light "org.freedesktop.UPower.KbdBacklight"
                   "SetBrightness"
                   current))
       (format t "~a~%" (round (* 100 (float (/ current maximum)))))))))
#+end_src
** spectrum_ls
:PROPERTIES:
:header-args+: :tangle ~/bin/spectrum_ls :shebang "#!/usr/bin/env zsh"
:END:
Builds on oh-my-zsh's [[https://github.com/robbyrussell/oh-my-zsh/blob/master/lib/spectrum.zsh#L26][spectrum_ls]].
#+begin_src sh
if [ "$#" = 1 ]; then
  code="$(printf "%03d\n" $1)"
  print -P -- "$code: %F{$code}$code%f"
else;
    for code in $(seq -f "%03g" ${1:-000} ${2:-255}); do
        print -P -- "$code: %F{$code}$code%f"
    done
fi
#+end_src
** text-pager
:PROPERTIES:
:header-args+: :tangle ~/bin/text-pager :shebang "#!/usr/bin/env bash"
:END:
A pager that wraps words at the 80th column, useful for [[https://github.com/michael-lazar/rtv][michael-lazar/rtv]].
#+begin_src sh
[ $# -ge 1 -a -f "$1" ] && input="$1" || input="-"
cat $input | fold -w 80 -s | less
#+end_src
** updates
:PROPERTIES:
:header-args+: :tangle ~/bin/updates :shebang "#!/usr/bin/env bash"
:END:
A script to update pip, apt, and homebrew packages.
*** Initialize
Make sure not in a virtualenv and track pyenv python version.
#+begin_src sh
if [ -n "$VIRTUAL_ENV" ]; then
    echo 'Exit virtualenv first'
elif [ -n "$PYTHONPATH" ]; then
    echo 'Not updating, PYTHONPATH is set.'
else
    # Track global python version
    eval "$(pyenv init -)"
    globalpython=$(echo $(pyenv version) | cut -d' ' -f1)
#+end_src
*** Python 2 pip
#+begin_src sh
# Update pip for python 2
pyenv global $python2version
echo -e "\e[1;34mUpdating: \e[91mpip2\e[0;97m"
IFS=$'\n'
echo  $'Getting outdated pip2 packages...'
res=$(pip list -o --format=legacy | sed 's/ .*//')

if [ -z "$res" ]; then
    echo $'All packages up to date.'
else
    echo $res | xargs pip install --upgrade
fi
pip freeze > ~/Dropbox/installed-programs/pip2.txt
sed -i -e 's/=.*//' ~/Dropbox/installed-programs/pip2.txt
#+end_src
*** Python 3 pip
#+begin_src sh
# Update pip for python 3
pyenv global $python3version
echo -e "\n\e[1;34mUpdating: \e[91mpip3\e[0;97m"
IFS=$'\n'
echo  $'Getting outdated pip3 packages...'
res=$(pip list -o --format=legacy | sed 's/ .*//')

if [ -z "$res" ]; then
    echo $'All packages up to date.'
else
    echo $res | xargs pip install --upgrade
fi
pip freeze > ~/Dropbox/installed-programs/pip3.txt
sed -i -e 's/=.*//' ~/Dropbox/installed-programs/pip3.txt
#+end_src
*** Package manager
**** Darwin
#+begin_src sh :tangle (when (eq system-type 'darwin) "~/bin/updates")
pyenv global system
echo -e "\n\e[1;34mUpdating: \e[91mHomebrew\e[0;97m"
brew update
brew upgrade
brew cleanup
brew prune
brew doctor

brew bundle dump --force --file=~/Dropbox/installed-programs/brew.rb
#+end_src

**** Debian
#+begin_src sh :tangle (when (eq system-type 'gnu/linux) "~/bin/updates")
echo -e "\n\e[1;34mUpdating: \e[91mapt-get\e[0;97m"
sudo apt-get update
sudo apt-get upgrade

mkdir -p ~/Dropbox/installed-programs/apt
dpkg --get-selections > ~/Dropbox/installed-programs/apt/package.list
sudo cp -R /etc/apt/sources.list* ~/Dropbox/installed-programs/apt/
sudo apt-key exportall > ~/Dropbox/installed-programs/apt/repo.keys
#+end_src
*** Finalize
#+begin_src sh
echo " "
echo -e "\e[1;34mDone"

pyenv global $globalpython # Set python version back to original
fi
#+end_src
** wm.sh
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux) "~/.config/plasma-workspace/env/wm.sh")
:END:
#+begin_src sh :tangle no
export KDEWM=/usr/bin/i3
#+end_src
* Desktop files
** emacsclient.desktop
:PROPERTIES:
:header-args+: :tangle (when (eq system-type 'gnu/linux)  "~/.local/share/applications/emacsclient.desktop")
:END:
This lets you open files with a running instance of emacs. Kinda nifty.
#+begin_src conf
[Desktop Entry]
Name=Emacs Client
Exec=emacsclient -n %u
Icon=emacs-icon
Type=Application
Terminal=false
#+end_src
** vlc-dvd.desktop
:PROPERTIES:
:header-args+: :tangle ~/.local/share/applications/vlc-dvd.desktop
:END:
#+begin_src conf
[Desktop Entry]
Version=1.0
Name=VLC DVD player
Exec=vlc dvd://
TryExec=vlc
Icon=vlc
Terminal=false
Type=Application
Categories=AudioVideo;Player;Recorder;
X-KDE-Protocols=ftp,http,https,mms,rtmp,rtsp,sftp,smb
Keywords=Player;Capture;DVD;Audio;Video;Server;Broadcast;
#+end_src
** firefox-nightly.desktop
:PROPERTIES:
:header-args+: :tangle ~/.local/share/applications/firefox-nightly.desktop
:END:
I like firefox-nightly GTK theme to be light regardless of the global gtk
theme, to avoid dark input boxes.
#+begin_src conf
[Desktop Entry]
Name=Firefox Nightly
GenericName=Web Browser
Comment=Browse the Web
Exec=env GTK_THEME=Arc firefox-nightly --class=FirefoxNightly %u
Icon=firefox-nightly
Terminal=false
Type=Application
MimeType=text/html;text/xml;application/xhtml+xml;application/vnd.mozilla.xul+xml;text/mml;x-scheme-handler/http;x-scheme-handler/https;
StartupNotify=true
StartupWMClass=FirefoxNightly
Categories=Network;WebBrowser;
Keywords=web;browser;internet;
Actions=new-window;new-private-window;

[Desktop Action new-window]
Name=New Window
Exec=env GTK_THEME=Arc firefox-nightly --class=FirefoxNightly --new-window %u

[Desktop Action new-private-window]
Name=New Private Window
Exec=env GTK_THEME=Arc firefox-nightly --class=FirefoxNightly --private-window %u
#+end_src
** spotify.desktop
:PROPERTIES:
:header-args+: :tangle ~/.local/share/applications/spotify.desktop
:END:
On high dpi displays with linux, the spotify UI is way too small. This scales
it up
#+begin_src conf
[Desktop Entry]
Name=Spotify
GenericName=Music Player
Comment=Spotify streaming music client
Icon=spotify-client
Exec=spotify --force-device-scale-factor=2  %U
TryExec=spotify
Terminal=false
Type=Application
Categories=Audio;Music;Player;AudioVideo;
MimeType=x-scheme-handler/spotify;
#+end_src
* Local vars
Tangles the files asynchronously on save.
#+begin_example
# Local Variables:
# after-save-hook: (git-gutter d/async-babel-tangle)
# org-pretty-entities: nil
# d/async-babel-tangle-decrypt: t
# End:
#+end_example
