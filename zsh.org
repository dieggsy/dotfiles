#+TITLE: zsh.org
#+PROPERTY: header-args :comments link :mkdirp yes :results silent

* Introduction
aosnetuh
* Contents                                                              :toc:
- [[#introduction][Introduction]]
- [[#zshrc][zshrc]]
  - [[#initial-setup][Initial setup]]
  - [[#completion][Completion]]
  - [[#pluginsexternal][Plugins/External]]
  - [[#zsh-options][Zsh options]]
  - [[#keys][Keys]]
  - [[#vars][Vars]]
  - [[#aliases][Aliases]]
  - [[#use-gnu-coreutils-in-macos][Use gnu coreutils in macOS]]
  - [[#finish-up][Finish up]]
- [[#zshenv][zshenv]]
  - [[#path][Path]]
  - [[#variables][Variables]]
- [[#zprofile][zprofile]]
- [[#modules][Modules]]
  - [[#sudo][sudo]]
- [[#local-vars][Local vars]]

* zshrc
:PROPERTIES:
:header-args+: :tangle ~/.zshrc
:END:
** Initial setup
*** Prompt
A minimalist prompt adapted from prezto with no (gasp!) prompt character.
#+begin_src sh
zmodload zsh/zprof
start_time="$(date +%s%N | cut -b1-13)"
function prompt_sorin_pwd {
  local pwd="${PWD/#$HOME/~}"

  if [[ "$pwd" == (#m)[/~] ]]; then
    _prompt_sorin_pwd="$MATCH"
    unset MATCH
  else
    _prompt_sorin_pwd="${${${${(@j:/:M)${(@s:/:)pwd}##.#?}:h}%/}//\%/%%}/${${pwd:t}//\%/%%}"
  fi
  echo $_prompt_sorin_pwd
}

setopt prompt_subst

PROMPT='${$(git-status)}%F{7}$(prompt_sorin_pwd)%f%b %F{166}Î»%f '
#+end_src
*** Cursor
Changes the cursor depending on whether in insert or normal mode (I use vi
keys in zsh).
#+begin_src sh
if [ "$(uname)" = "Darwin" ]; then
    zle-line-init () {
        zle -K viins
        echo -ne "\033]12;Gray\007"
        echo -ne "\033[\x35 q"
    }
    zle -N zle-line-init
    zle-keymap-select () {
        if [[ $KEYMAP == vicmd ]]; then
            if [[ -z $TMUX ]]; then
                printf "\033]12;Green\007"
                printf "\033[1 q"
            else
                printf "\033Ptmux;\033\033]12;red\007\033\\"
                printf "\033Ptmux;\033\033[1 q\033\\"
            fi
        else
            if [[ -z $TMUX ]]; then
                printf "\033]12;Grey\007"
                printf "\033[\x35 q"
            else
                printf "\033Ptmux;\033\033]12;grey\007\033\\"
                printf "\033Ptmux;\033\033[\x35 q\033\\"
            fi
        fi
    }
    zle -N zle-keymap-select
elif [ -z "$INSIDE_EMACS" ]; then
    # Modal cursor color for vi's insert/normal modes.
    # http://stackoverflow.com/questions/30985436/
    # https://bbs.archlinux.org/viewtopic.php?id=95078
    # http://unix.stackexchange.com/questions/115009/
    zle-line-init () {
        zle -K viins
        echo -ne "\033]12;white\007"
        echo -ne "\033[5 q"
    }
    zle -N zle-line-init
    zle-keymap-select () {
        if [[ $KEYMAP == vicmd ]]; then
            if [[ -z $TMUX ]]; then
                printf "\033]12;white\007"
                printf "\033[2 q"
            else
                printf "\033Ptmux;\033\033]12;white\007\033\\"
                printf "\033Ptmux;\033\033[2 q\033\\"
            fi
        else
            if [[ -z $TMUX ]]; then
                printf "\033]12;white\007"
                printf "\033[5 q"
            else
                printf "\033Ptmux;\033\033]12;white\007\033\\"
                printf "\033Ptmux;\033\033[5 q\033\\"
            fi
        fi
        #print 'did select' >/dev/pts/16
    }
    zle -N zle-keymap-select
fi
#+end_src
*** Setup help
Sets up the ~help~ command on zsh.
#+begin_src sh
autoload -Uz run-help
if [ "alias" = $(whence -w run-help | cut -d ' ' -f2) ]; then
    unalias run-help
fi
alias help=run-help
#+end_src
** Completion
#+begin_src sh
autoload -Uz compinit && compinit -i
setopt glob_complete
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' menu select
zstyle ':completion:*' group-name ''
zstyle ':completion:*:corrections' format ' %F{green}-- %d (errors: %e) --%f'
zstyle ':completion:*:descriptions' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*' list-dirs-first true
zstyle ':completion:*' squeeze-slashes true
zstyle ':completion:*' _expand_alias
#+end_src
** Plugins/External
*** [[https://github.com/yyuu/pyenv/][pyenv]]
#+begin_src sh
eval "$(pyenv init -)"
#+end_src
*** [[https://github.com/nvbn/thefuck][thefuck]]
#+begin_src sh
# if which thefuck > /dev/null; then eval $(thefuck --alias); fi
fuck() {
    eval "$( command thefuck --alias )"
    $(thefuck $(fc -ln -1 | tail -n 1)); fc -R "$@"
}
#+end_src
*** [[https://github.com/zplug/zplug][zplug]] start
#+begin_src sh
if [[ ! -d ~/.zplug ]];then
    git clone https://github.com/zplug/zplug ~/.zplug
fi
source ~/.zplug/init.zsh
#+end_src
**** [[https://github.com/b4b4r07/enhancd][enhancd]]
#+begin_src sh
zplug "b4b4r07/enhancd", use:init.sh
export ENHANCD_FILTER=peco
#+end_src
**** [[https://github.com/rupa/z][z]]
#+begin_src sh
zplug "rupa/z", use:z.sh
#+end_src
**** [[https://github.com/zsh-users/zsh-completions][zsh-completions]]
#+begin_src sh :tangle no
zplug "zsh-users/zsh-completions"
#+end_src
**** [[https://github.com/zsh-users/zsh-autosuggestions][zsh-autosuggestions]]
#+begin_src sh
zplug "zsh-users/zsh-autosuggestions", at:develop
#+end_src
**** [[https://github.com/zsh-users/zsh-syntax-highlighting/][zsh-syntax-highlighting]]
#+begin_src sh
zplug "zsh-users/zsh-syntax-highlighting", defer:2
#+end_src
**** [[https://github.com/zsh-users/zsh-history-substring-search][zsh-history-substring-search]]
#+begin_src sh
zplug "zsh-users/zsh-history-substring-search"
#+end_src
**** prezto
***** environment
#+begin_src sh
zplug "modules/environment", from:prezto
#+end_src
***** history
#+begin_src sh
zplug "modules/history", from:prezto
#+end_src
***** directory
#+begin_src sh
zplug "modules/directory", from:prezto
#+end_src
***** spectrum
#+begin_src sh
zplug "modules/spectrum", from:prezto
#+end_src
**** oh-my-zsh
***** colored-man-pages
#+begin_src sh
zplug "plugins/colored-man-pages", from:oh-my-zsh
#+end_src
***** pip
#+begin_src sh
zplug "plugins/pip", from:oh-my-zsh
#+end_src
**** sudo
#+begin_src sh
zplug "~/.zmodules", from:local
#+end_src
**** cool-peco
#+begin_src sh
zplug "dieggsy/cool-peco"
#+end_src
*** zplug install
#+begin_src sh
if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi
#+end_src
*** zplug load
#+begin_src sh
zplug load
if zplug check zsh-users/zsh-syntax-highlighting; then
    ZSH_HIGHLIGHT_STYLES[globbing]='fg=208'
    ZSH_HIGHLIGHT_STYLES[command]='fg=010'
    ZSH_HIGHLIGHT_STYLES[alias]='fg=010'
    ZSH_HIGHLIGHT_STYLES[builtin]='fg=010'
    ZSH_HIGHLIGHT_STYLES[function]='fg=010'
fi

if zplug check zsh-users/zsh-history-substring-search; then
    HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND=''
    HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND=''
fi
#+end_src
** Zsh options
#+begin_src sh
setopt auto_cd
setopt histignoredups
setopt autonamedirs
setopt clobber
unsetopt correct
#+end_src
** Keys
#+begin_src sh
bindkey -v
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down
export KEYTIMEOUT=1
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char
bindkey '^r' cool-peco-history
bindkey '^t' cool-peco-filename-search
bindkey -M vicmd '/' cool-peco-history
bindkey '^h' cool-peco-ssh
bindkey '^p' cool-peco-ps
bindkey '^F' cool-peco-all-funcs
#+end_src
** Vars
#+begin_src sh
 [ -z $TMUX ] && [ -z $INSIDE_EMACS ] && [ "$(uname)" = "Linux" ] && export TERM=xterm-24bit

# some ls colors i've gotten used to
export LS_COLORS='di=0;94:ex=0;92:ln=0;36'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# kwm/khd
kwm="koekeishiya/formulae/kwm"
khd="koekeishiya/formulae/khd"

# Python
export python3version=3.6.2
export python2version=2.7.13

export SURFRAW_text_browser=/usr/local/bin/lynx
# export SURFRAW_graphical=no

# GPG
GPG_TTY=$(tty)
export GPG_TTY

# pass
export PASSWORD_STORE_ENABLE_EXTENSIONS=true

# Named dirs
hash -d config=~/.config
hash -d emacs=~/dotfiles/emacs.d
#+end_src
** Aliases
*** Simple aliases
#+begin_src sh
if which brew > /dev/null; then
    alias startkwm="brew services start $kwm"
    alias stopkwm="brew services stop $kwm"
    alias restartkwm="brew services restart $kwm"
    alias startkhd="brew services start $khd"
    alias stopkhd="brew services stop $khd"
    alias restartkhd="brew services restart $khd"
    alias cask="brew cask"
fi
alias -g ...='../..'
alias -g ....='../../..'
alias -g .....='../../../..'
alias -g ......='../../../../..'
alias -- -='cd -'
# alias cpg="cool-peco-ghq"
alias cpwd="pwd | tr -d '\n' | pbcopy"
alias csi="rlwrap csi -q"
alias def='dict -d wn'
alias ed="ed -p:"
alias editv="emacsclient -t"
alias encrypt="gpg2 --armor --encrypt"
alias locate="noglob locate"
alias lock="gpg2 -c --armor"
alias encryptdir="gpg-zip --encrypt"
alias lockdir="gpg-zip -c"
alias gpg="gpg2"
alias decrypt="gpg2 -d"
alias decryptdir="gpg-zip -d"
alias history-stat="history 0 | awk '{print \$2}' | sort | uniq -c | sort -n -r | head"
which hub > /dev/null && alias git=hub
[ "$(uname)" = "Linux" ] && compdef hub=git
[ "$(uname)" = "Linux" ] && which nautilus > /dev/null && alias nautilus="nautilus &> /dev/null"
alias gls='gls -X --group-directories-first --color=always'
alias ls='LS_COLORS="" exa --group-directories-first --sort=extension'
alias glst="gls -t"
if [ -d /Applications/Mathematica.app ]; then
    alias mathematica='/Applications/Mathematica.app/Contents/MacOS/WolframKernel'
fi
alias mux='tmuxinator'
alias pass="EDITOR='emacsclient -nw' pass"
alias pep8="pep8 --first --ignore=E129,W503,E226"
alias piphere="pip install --target=./"
alias printers="lpstat -p | awk '{print $2}'"
alias resetb="source ~/.zshrc"
alias resetwifi="networksetup -setairportpower en0 off; sleep 2;"\
"networksetup -setairportpower en0 on"
alias rg="rg -M 200 -i -g '!archive-contents' --colors 'line:style:bold' --colors 'path:style:bold'"
alias rtv='PAGER=text-pager rtv --enable-media'
alias sbcl="rlwrap -irc sbcl"
alias starwars="telnet towel.blinkenlights.nl" # heh
alias sudo='sudo '                             # recognize aliases
alias toshredsyousay='shred -zvun 10'
alias wiki="wiki -w 80"
#+end_src
*** Function "aliases"
#+begin_src sh
edit () {
    emacsclient -n $@
    if (( $+commands[i3-msg] )); then
        i3-msg '[instance="dropmite"] move scratchpad' &> /dev/null
        i3-msg '[title="emacs@Ragnarok"] focus' &> /dev/null
    fi
}

ff() { find . -type f -iname "*$1*" | peco --prompt "[find-file]" }

fd() { find . -type d -iname "*$1*" | peco --prompt="[find-dir]"}

f() { find . -iname "*$1*" | peco --prompt="[find]"}

fsz() { find ./ -type f -iname "*$1*" -exec du -sh {} + |
            sort -rh |
            peco --prompt="[find-sizes]"}

calc() { emacs --batch --eval "(message (calc-eval \"$1\"))" }
alias calc="noglob calc"

erg () { emacsclient -n $(rg -n $1 |
                              peco --prompt="[erg]" |
                              awk -F\: '{print "+"$2,$1}') &> /dev/null}

cpg () {
    if [ "$1" = "next" ]; then
        current="$(pwd | cut -d/ -f5-)"
        next="$(ghq list | grep -A1 -e $current | tail -n1)"
        cd $(ghq root)/$next
    elif [ "$1" = "prev" ]; then
        current="$(pwd | cut -d/ -f5-)"
        prev="$(ghq list | grep -B1 -e $current | head -n1)"
        cd $(ghq root)/$prev
    elif [ -n "$1" ]; then
        ghq "$@"
    else;
        cool-peco-ghq
    fi
}
#+end_src
** Use gnu coreutils in macOS
:PROPERTIES:
:header-args: :tangle (when (eq system-type 'darwin) "~/.zshrc")
:END:
#+begin_src sh
if [ "$(uname)" = "Darwin" ]; then
    path=(
        /usr/local/opt/coreutils/libexec/gnubin
        $path
    )

    export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"
fi
#+end_src
** Finish up
#+begin_src sh
end_time="$(date +%s%N | cut -b1-13)"
((startup_time=end_time-start_time))
echo "$startup_time"
#+end_src
* zshenv
:PROPERTIES:
:header-args+: :tangle ~/.zshenv
:END:

#+begin_src sh
# Ensure that a non-login, non-interactive shell has a defined environment.
if [[ "$SHLVL" -eq 1 && ! -o LOGIN && -s "${ZDOTDIR:-$HOME}/.zprofile" ]]; then
    source "${ZDOTDIR:-$HOME}/.zprofile"
fi

source ~/.nix-profile/etc/profile.d/nix.sh
#+end_src
** Path
#+begin_src sh
export GOPATH="$HOME/go"
export GOROOT=/usr/lib/go-1.8

export PYENV_ROOT="$HOME/.pyenv"
path=(
    $HOME/.cargo/bin
    $PYENV_ROOT/bin
    $HOME/bin
    $HOME/scriptl
    $HOME/.local/bin
    /usr/local/{bin,sbin}
    $path
    $GOPATH/bin
    $GOROOT/bin
)

fpath=(
    /usr/share/zsh/site-functions/
    $fpath
)
export MANPATH=":$HOME/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/share/man/"
typeset -gU path manpath cdpath fpath
#+end_src
** Variables
#+begin_src sh
export PYTHONSTARTUP=$HOME/.pythonrc.py

export CHICKEN_REPOSITORY=~/.local/lib/chicken

export WWW_HOME='https://duckduckgo.com'
export RTV_EDITOR='emacsclient -t'
export RTV_URLVIEWER='urlview'

export LOCALE_ARCHIVE="$(readlink ~/.nix-profile/lib/locale)/locale-archive"
# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
    export EDITOR='vim'
else
    export EDITOR="emacsclient -n" # Set emacs as default editor
    export ALTERNATE_EDITOR="vim"
fi

export PAGER="less"
export LESS='-g-i-M-R-S-w-z-4'
(( $#commands[(i)lesspipe(|.sh)] )) && export LESSOPEN="| /usr/bin/env $commands[(i)lesspipe(|.sh)] %s 2>&-"

[[ "$OSTYPE" == darwin* ]] && export BROWSER='open'

[[ -z "$LANG" ]] && export LANG='en_US.UTF-8'

[[ -n "$GTK_MODULES" ]] && export GTK_MODULES="$GTK_MODULES:s/pantheon-filechooser-module//"

export XDG_DATA_DIRS=$HOME/.nix-profile/share:$HOME/.local/share:/usr/local/share:/usr/share/:/var/lib/snapd/desktop
#+end_src
* zprofile
:PROPERTIES:
:header-args+: :tangle ~/.zprofile
:END:
#+begin_src sh
if [ "$(uname)" = "Darwin" ]; then
    if [ -f ~/.gnupg/.gpg-agent-info ] && [ -n "$(pgrep gpg-agent)" ]; then
        source ~/.gnupg/.gpg-agent-info
        export GPG_AGENT_INFO
    else
        eval $(gpg-agent --daemon --write-env-file ~/.gnupg/.gpg-agent-info)
    fi
    export GOROOT=/usr/local/Cellar/go/1.8/libexec
fi
#+end_src
* Modules
** sudo
:PROPERTIES:
:header-args+: :tangle ~/.zmodules/sudo.zsh
:END:
#+begin_src sh
sudo-command-line() {
    [[ -z $BUFFER ]] && zle up-history
    if [[ $BUFFER == sudo\ * ]]; then
        LBUFFER="${LBUFFER#sudo }"
    elif [[ $BUFFER == $EDITOR\ * ]]; then
        LBUFFER="${LBUFFER#$EDITOR }"
        LBUFFER="sudoedit $LBUFFER"
    elif [[ $BUFFER == sudoedit\ * ]]; then
        LBUFFER="${LBUFFER#sudoedit }"
        LBUFFER="$EDITOR $LBUFFER"
    else
        LBUFFER="sudo $LBUFFER"
    fi
    zle && zle vi-add-next
}
zle -N sudo-command-line
# Defined shortcut keys: [Esc] [Esc]
bindkey -M vicmd "\e" sudo-command-line
#+end_src
* Local vars
Tangles the files asynchronously on save.
#+begin_example
# Local Variables:
# after-save-hook: (git-gutter d/async-babel-tangle)
# org-pretty-entities: nil
# End:
#+end_example

